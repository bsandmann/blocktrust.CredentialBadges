@page "/snippet"
@using System.Text.Json
@using Blocktrust.CredentialBadges.Core.Commands.VerifyOpenBadge
@using Blocktrust.CredentialBadges.Core.Common
@using Blocktrust.CredentialBadges.OpenBadges
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.Images.ImageDownload
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.StoreVerifiedCredential
@using Blocktrust.CredentialBadges.Web.Domain
@using Blocktrust.CredentialBadges.Web.Services.GenerateSnippetService
@using Blocktrust.CredentialBadges.Web.Services.Images
@using MediatR
@inject IMediator Mediator
@inject IHttpClientFactory HttpClientFactory
@inject ImageBytesToBase64 ImageBytesToBase64

@rendermode InteractiveServer

<PageTitle>Snippet</PageTitle>

<style>
    .code-snippet {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
    
    .code-snippet pre {
        background-color: #272822;
        color: #f8f8f2;
        padding: 10px;
        border-radius: 5px;
        overflow-x: auto;
    }

</style>

<h1>Snippet Generator Demo</h1>

<input class="" type="text" @bind="rawInput" @bind:event="oninput" @onkeydown="HandleKeyDown"/>
<button class="btn btn-success" @onclick="ParseVerifyAndCreateSnippet">Parse</button>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="background-color: #d87575">@ErrorMessage</p>
}

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @AlertClass">
        @Message
    </div>
}

<h3>Code Snippet</h3>
<div class="code-snippet">
    <h4>Snippet</h4>
    <pre><code>@snippet</code></pre>
    <button @onclick="CopyToClipboard">Copy</button>
</div>

@code {
    private string? rawInput;
    private string? ErrorMessage;
    private string Message { get; set; }
    private string AlertClass { get; set; }
    private bool IsLoading { get; set; }

    private string snippet = "";

    // Inject the GenerateSnippetService
    [Inject]
    private GenerateSnippetService generateSnippetService { get; set; }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(rawInput))
        {
            ErrorMessage = null;
            await ParseVerifyAndCreateSnippet();
        }
        else if (e.Key == "Escape")
        {
            ErrorMessage = null;
            rawInput = null;
            StateHasChanged();
        }
    }

    private async Task ParseVerifyAndCreateSnippet()
    {
        var parserResult = CredentialParser.Parse(rawInput);
        if (parserResult.IsFailed)
        {
            ErrorMessage = parserResult.Errors.First().Message;
            return;
        }

        var verifyOpenBadgeResult = await Mediator.Send(new VerifyOpenBadgeRequest(parserResult.Value));
        if (verifyOpenBadgeResult.IsFailed)
        {
            ErrorMessage = verifyOpenBadgeResult.Errors.First().Message;
            return;
        }

        if (!verifyOpenBadgeResult.Value.VerificationIsSuccessfull())
        {
            ErrorMessage = "Verification of the OpenBadge failed. Only verified OpenBadges can be used to generate a snippet.";
            return;
        }

        // Process image URL or base64 data
        // var image = ((AchievementCredential)parserResult.Value).CredentialSubject.Achievement.Image;

        var image ="https://cdn.pixabay.com/photo/2013/07/12/16/01/badge-150755_1280.png";

        if (string.IsNullOrEmpty(image))
        {
            ErrorMessage = "Image URL is required.";
            return;
        }

        if (!image.StartsWith("data:image/"))
        {
            // Download image bytes
            try
            {
                var httpClient = HttpClientFactory.CreateClient();
                var handler = new ImageDownloadHandler(httpClient);
                var downloadRequest = new ImageDownloadRequest(image);
                var downloadResult = await handler.HandleAsync(downloadRequest);

                if (downloadResult.IsSuccess)
                {
                    // Convert downloaded image bytes to base64
                    var conversionResult = ImageBytesToBase64.Convert(downloadResult.Value);
                    if (conversionResult.IsSuccess)
                    {
                        image = conversionResult.Value;
                    }
                    else
                    {
                        ErrorMessage = $"Failed to convert image to base64: {conversionResult.Errors.First().Message}";
                        return;
                    }
                }
                else
                {
                    ErrorMessage = $"Failed to download image: {downloadResult.Errors.First().Message}";
                    return;
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"An error occurred: {ex.Message}";
                return;
            }
        }

        var storeVerifiedCredentialRequest = new StoreVerifiedCredentialRequest
        {
            Name = ((AchievementCredential)parserResult.Value).CredentialSubject.Achievement.Name,
            Description = ((AchievementCredential)parserResult.Value).CredentialSubject.Achievement.Description,
            Image = image, // Use the processed image (base64)
            Credential = JsonSerializer.Serialize(parserResult.Value),
            Status = VerifiedCredential.CredentialStatus.Verified
        };

        var storeResult = await Mediator.Send(storeVerifiedCredentialRequest);

        if (!storeResult.IsSuccess)
        {
            Message = $"Failed to store credential: {storeResult.Errors.First().Message}";
            AlertClass = "alert-danger";
        }

        var snippetResult = generateSnippetService.GenerateSnippet(storeResult.Value);
        snippet = snippetResult.Snippet;
    }

    private async Task CopyToClipboard()
    {
        // await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", snippet);
        Message = "Snippet copied to clipboard!";
        AlertClass = "alert-success";
    }
}
