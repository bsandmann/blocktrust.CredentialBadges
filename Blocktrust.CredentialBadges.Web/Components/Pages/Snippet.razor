@page "/snippet"
@using System.Text.Json
@using Blocktrust.CredentialBadges.Core.Commands.VerifyOpenBadge
@using Blocktrust.CredentialBadges.Core.Common
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.StoreVerifiedCredential
@using Blocktrust.CredentialBadges.Web.Domain
@using MediatR
@inject IMediator Mediator



@rendermode InteractiveServer

<PageTitle>Snippet</PageTitle>

<h1>Snippet Generator Demo</h1>

<input class="" type="text" @bind="rawInput" @bind:event="oninput" @onkeydown="HandleKeyDown"/>
<button class="btn btn-success" @onclick="ParseVerifyAndCreateSnippet">Parse</button>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="background-color: #d87575">@ErrorMessage</p>
}


@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @AlertClass">
        @Message
    </div>
}


@code {
    private string? rawInput;
    private string? ErrorMessage;
    private string Message { get; set; }
    private string AlertClass { get; set; }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(rawInput))
        {
            ErrorMessage = null;
            await ParseVerifyAndCreateSnippet();
        }
        else if (e.Key == "Escape")
        {
            ErrorMessage = null;
            rawInput = null;
            StateHasChanged();
        }
    }

    private async Task ParseVerifyAndCreateSnippet()
    {
        //TODO refactor in seperate command
        
        var parserResult = CredentialParser.Parse(rawInput);
        if (parserResult.IsFailed)
        {
            ErrorMessage = parserResult.Errors.First().Message;
            return;
        }

        var verifyOpenBadgeResult = await Mediator.Send(new VerifyOpenBadgeRequest(parserResult.Value));
        if (verifyOpenBadgeResult.IsFailed)
        {
            ErrorMessage = verifyOpenBadgeResult.Errors.First().Message;
            return;
        }

        if (!verifyOpenBadgeResult.Value.VerificationIsSuccessfull())
        {
            ErrorMessage = "Verification of the OpenBadge failed. Only verified OpenBadges can be used to generate a snippet.";
            return;
        }


        // Image extraction

        // Image upload

        // Database entry
        var storeVerifiedCredentialRequest = new StoreVerifiedCredentialRequest
        {
            Name = "Example Credential",
            Description = "This is a sample credential issued by the Digital Credentials Consortium to demonstrate the functionality of Verifiable Credentials for wallets and verifiers.",
            Image = new byte[] { 0x00, 0x01, 0x02, 0x03 },
            Credential = JsonSerializer.Serialize(parserResult.Value),
            Status = VerifiedCredential.CredentialStatus.Verified
        };
        var result = await Mediator.Send(storeVerifiedCredentialRequest);

        if (!result.IsSuccess)
        {
            Message = $"Failed to store credential: {result.Errors.First().Message}";
            AlertClass = "alert-danger";
        }
    

        // Snippet generation
    }

}