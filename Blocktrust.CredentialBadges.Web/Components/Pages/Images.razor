@page "/images"
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.Images.ImageDownload
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<h3>Image Download Test</h3>

<div class="container mt-4">
    <div class="mb-3">
        <label for="imageUrlInput" class="form-label">Image URL:</label>
        <input type="text" id="imageUrlInput" class="form-control" @bind="imageUrl" placeholder="Enter image URL" />
    </div>
    <button class="btn btn-primary" @onclick="HandleImageDownload">Download Image</button>

    @if (DownloadedBytes != null)
    {
        <div class="mt-4">
            <h2>Downloaded Image</h2>
            <img src="data:image/png;base64,@Convert.ToBase64String(DownloadedBytes)" alt="Downloaded Image" class="img-fluid">
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-4" role="alert">
            @ErrorMessage
        </div>
    }
</div>

@code {
    private string imageUrl;
    private byte[] DownloadedBytes { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleImageDownload()
    {
        var imageDownloadRequest = new ImageDownloadRequest(imageUrl);

        try
        {
            var httpClient = HttpClientFactory.CreateClient();
            var handler = new ImageDownloadHandler(httpClient);
            var result = await handler.HandleAsync(imageDownloadRequest);

            if (result.IsSuccess)
            {
                DownloadedBytes = result.Value;
                ErrorMessage = null;
            }
            else
            {
                DownloadedBytes = null;
                ErrorMessage = $"Failed to download image: {result.Errors.FirstOrDefault()?.Message}";
            }
        }
        catch (Exception ex)
        {
            DownloadedBytes = null;
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
}