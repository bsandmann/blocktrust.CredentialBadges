@page "/credentialinput"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject IHttpClientFactory HttpClientFactory
@inject ImageBytesToBase64 ImageBytesToBase64
@using System.Text.Json
@using Blocktrust.CredentialBadges.Core.Commands.VerifyOpenBadge
@using Blocktrust.CredentialBadges.Core.Common
@using Blocktrust.CredentialBadges.OpenBadges
@using Blocktrust.CredentialBadges.Core.Commands.Images.ImageDownload
@using Blocktrust.CredentialBadges.Core.Services.Images
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.StoreVerifiedCredential
@using Blocktrust.CredentialBadges.Web.Enums
@using MediatR

<PageTitle>Generate Snippet</PageTitle>

<div class="relative min-h-screen w-screen bg-[#F0F1F2] flex items-center justify-center">
    <!-- Corner images -->
    <img src="/images/InputPageRectangle.svg" alt="" class="absolute top-36 left-36 w-16 h-16">
    <img src="/images/InputPageTriangle.svg" alt="" class="absolute top-24 right-24 w-16 h-16">
    <img src="/images/InputPageTriangle.svg" alt="" class="absolute bottom-24 left-24 w-16 h-16">
    <img src="/images/InputPageRectangle.svg" alt="" class="absolute bottom-36 right-36 w-16 h-16">

    <!-- Content container -->
    <div class="flex flex-col bg-[#FAFAFA] border border-gray-200 rounded-lg shadow-md backdrop-filter backdrop-blur-sm p-8 w-full max-w-lg">
        <h1 class="text-2xl font-bold text-[#334155] mb-4">Generate Snippet</h1>
        <p class="text-[#334155] mb-6">
            Input a base 64, jwt or json credential to continue
        </p>
        
        <label for="credentialInput" class="block text-lg font-medium text-[#334155] mb-2">Input Credential</label>
        <textarea 
            id="credentialInput" 
            rows="4" 
            class="w-full p-2 border border-gray-300 rounded-md text-[#334155] mb-4" 
            placeholder="Enter credential..."
            @bind="credentialInput"
            @onkeydown="HandleKeyDown">
        </textarea>
        
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="text-yellow-600 mb-4">@ErrorMessage</p>
        }

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="text-green-500 mb-4">@Message</p>
        }
        
        <button 
            @onclick="ParseVerifyAndContinue" 
            class="bg-[#334155] text-[#F8FAFC] font-medium py-2 px-4 rounded-md hover:bg-[#475569] transition-colors self-center"
            disabled="@IsLoading">
            @if (IsLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="sr-only">Loading...</span>
            }
            else
            {
                <span>Continue</span>
            }
        </button>
    </div>
</div>

@code {
    private string credentialInput;
    private string ErrorMessage;
    private string Message;
    private bool IsLoading;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(credentialInput))
        {
            await ParseVerifyAndContinue();
        }
        else if (e.Key == "Escape")
        {
            ErrorMessage = null;
            credentialInput = null;
            StateHasChanged();
        }
    }

    private async Task ParseVerifyAndContinue()
    {
        IsLoading = true;
        ErrorMessage = null;
        Message = null;

        try
        {
            var parserResult = CredentialParser.Parse(credentialInput);
            if (parserResult.IsFailed)
            {
                ErrorMessage = parserResult.Errors.First().Message;
                return;
            }

            var verifyOpenBadgeResult = await Mediator.Send(new VerifyOpenBadgeRequest(parserResult.Value));
            if (verifyOpenBadgeResult.IsFailed)
            {
                ErrorMessage = verifyOpenBadgeResult.Errors.First().Message;
                return;
            }

            if (!verifyOpenBadgeResult.Value.VerificationIsSuccessfull())
            {
                ErrorMessage = "Verification of the OpenBadge failed. Only verified OpenBadges can be used to generate a snippet.";
                return;
            }

            var image = ((AchievementCredential)parserResult.Value).CredentialSubject?.Achievement?.Image?.Id.ToString();

            if (string.IsNullOrEmpty(image))
            {
                image = "";

            }

            if (!string.IsNullOrEmpty(image)&&image.StartsWith("http"))
            {
                var httpClient = HttpClientFactory.CreateClient();
                var handler = new ImageDownloadHandler(httpClient);
                var downloadRequest = new ImageDownloadRequest(image);
                var downloadResult = await handler.HandleAsync(downloadRequest);

                if (downloadResult.IsSuccess)
                {
                    var conversionResult = ImageBytesToBase64.Convert(downloadResult.Value);
                    if (conversionResult.IsSuccess)
                    {
                        image = conversionResult.Value;
                    }
                    else
                    {
                        ErrorMessage = $"Failed to convert image to base64: {conversionResult.Errors.First().Message}";
                        return;
                    }
                }
                else
                {
                    ErrorMessage = $"Failed to download image: {downloadResult.Errors.First().Message}";
                    return;
                }
            }

            var storeVerifiedCredentialRequest = new StoreVerifiedCredentialRequest
            {
                Name = ((AchievementCredential)parserResult.Value).CredentialSubject.Achievement.Name,
                Description = ((AchievementCredential)parserResult.Value).CredentialSubject.Achievement.Description,
                Image = image,
                Credential = JsonSerializer.Serialize(parserResult.Value),
                Status = EVerificationStatus.Verified,
                ValidFrom = ((AchievementCredential)parserResult.Value).ValidFrom,
                ValidUntil = ((AchievementCredential)parserResult.Value).ValidUntil!=null?((AchievementCredential)parserResult.Value).ValidUntil.Value:DateTime.Now.AddYears(1),
                Issuer = ((AchievementCredential)parserResult.Value).Issuer?.Id.ToString()
            };

            var storeResult = await Mediator.Send(storeVerifiedCredentialRequest);

            if (!storeResult.IsSuccess)
            {
                ErrorMessage = $"Failed to store credential";
                return;
            }

            Message = "Credential successfully stored!";
            await Task.Delay(1000); // Give user time to see the success message
            NavigationManager.NavigateTo($"/previewbadge/{storeResult.Value.Id}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
}