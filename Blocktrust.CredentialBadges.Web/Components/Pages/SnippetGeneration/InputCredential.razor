@page "/credentialinput"
@page "/credentialinput/{CredentialValue}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject IHttpClientFactory HttpClientFactory
@inject ImageBytesToBase64 ImageBytesToBase64
@using Blocktrust.CredentialBadges.Core.Commands.VerifyOpenBadge
@using Blocktrust.CredentialBadges.Core.Common
@using Blocktrust.CredentialBadges.OpenBadges
@using Blocktrust.CredentialBadges.Core.Commands.Images.ImageDownload
@using Blocktrust.CredentialBadges.Core.Services.Images
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.StoreVerifiedCredential
@using Blocktrust.CredentialBadges.Web.Enums
@using MediatR
@using System.Text.RegularExpressions
@using System.Web
@using VDS.RDF

<PageTitle>Generate Snippet</PageTitle>

<div
    class="relative min-h-screen w-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
    <img src="/images/InputPageRectangle.svg" alt="" class="absolute top-36 left-36 w-16 h-16 opacity-50">
    <img src="/images/InputPageTriangle.svg" alt="" class="absolute top-24 right-24 w-16 h-16 opacity-50">
    <img src="/images/InputPageTriangle.svg" alt="" class="absolute bottom-24 left-24 w-16 h-16 opacity-50">
    <img src="/images/InputPageRectangle.svg" alt="" class="absolute bottom-36 right-36 w-16 h-16 opacity-50">

    <div
        class="bg-white border border-gray-200 rounded-xl shadow-lg backdrop-filter backdrop-blur-lg p-8 w-full max-w-2xl">
        <h1 class="text-2xl font-bold text-gray-800 mb-6">Generate Snippet</h1>
        <p class="text-gray-600 mb-8">
            Input a base 64, JWT, or JSON credential to continue
        </p>

        <div class="space-y-6">
            <div>
                <label for="credentialInput" class="block text-sm font-medium text-gray-700 mb-2">Input
                    Credential</label>
                <textarea
                    id="credentialInput"
                    rows="4"
                    class="w-full p-3 border @(string.IsNullOrEmpty(credentialInput) && showValidation ? "border-red-500" : "border-gray-300") rounded-md text-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                    placeholder="Enter credential..."
                    @bind="credentialInput"
                    @onkeydown="HandleKeyDown">
                </textarea>
                @if (string.IsNullOrEmpty(credentialInput) && showValidation)
                {
                    <p class="text-red-500 text-sm mt-1">Credential input is required.</p>
                }
                <div class="flex space-x-2 mt-2">
                    <button @onclick="UseSampleAchievementCredential" 
                            class="text-sm text-slate-700 border border-slate-300 rounded px-3 py-1 bg-white hover:bg-slate-50 transition-colors">
                        Use sample Achievement-Credential
                    </button>
                    <button @onclick="UseSampleEndorsementCredential" 
                            class="text-sm text-slate-700 border border-slate-300 rounded px-3 py-1 bg-white hover:bg-slate-50 transition-colors">
                        Use sample Endorsement-Credential
                    </button>
                </div>
            </div>

            <div>
                <label for="domainInput" class="block text-sm font-medium text-gray-700 mb-2">Domain (Optional)</label>
                <input
                    type="text"
                    id="domainInput"
                    class="w-full p-3 border @(!string.IsNullOrEmpty(domainError) ? "border-red-500" : "border-gray-300") rounded-md text-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                    placeholder="Enter domain (e.g., example.com)"
                    @bind="domainInput"
                    @bind:event="oninput"
                    @onblur="ValidateDomain"/>
                @if (!string.IsNullOrEmpty(domainError))
                {
                    <p class="text-red-500 text-sm mt-1">@domainError</p>
                }
            </div>

            @if (!string.IsNullOrEmpty(infoMessage))
            {
                <div
                    class="@(isSuccess ? "bg-green-100 border-green-500 text-green-700" : "bg-red-100 border-red-500 text-red-700") border-l-4 p-4 rounded-md">
                    <p class="font-bold">@(isSuccess ? "Success" : "Error")</p>
                    <p>@infoMessage</p>
                </div>
            }

            <div class="flex justify-end">
                <button
                    @onclick="ParseVerifyAndContinue"
                    class="bg-slate-700 text-white px-4 py-2 rounded flex items-center hover:bg-slate-600">
                    @if (isLoading)
                    {
                        <span class="mr-2">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none"
                                 viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                        stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor"
                                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                        <span>Verifying...</span>
                    }
                    else if (isVerified)
                    {
                        <span>Continue to Preview</span>
                    }
                    else
                    {
                        <span>Continue</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<div
    class="fixed bottom-4 right-4 px-4 py-2 rounded-md shadow-lg transition-opacity duration-300 @(showToast ? "opacity-100" : "opacity-0") bg-yellow-500 text-white">
    @toastMessage
</div>

@code {
    [Parameter] public string? CredentialValue { get; set; }

    private string credentialInput;
    private string domainInput;
    private string domainError;
    private bool isLoading;
    private bool showValidation;
    private bool isVerified;
    private Guid storedCredentialId;

    private bool showToast;
    private string toastMessage;
    private string infoMessage;
    private bool isSuccess;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(CredentialValue))
        {
            credentialInput = HttpUtility.UrlDecode(CredentialValue);
        }
    }

    private void ValidateDomain()
    {
        if (!string.IsNullOrWhiteSpace(domainInput))
        {
            var domainPattern = @"^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+[A-Za-z]{2,12}$";
            if (!Regex.IsMatch(domainInput, domainPattern))
            {
                domainError = "Please enter a valid domain (e.g., example.com)";
            }
            else
            {
                domainError = null;
            }
        }
        else
        {
            domainError = null;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(credentialInput))
        {
            await ParseVerifyAndContinue();
        }
        else if (e.Key == "Escape")
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        credentialInput = null;
        domainInput = null;
        domainError = null;
        showValidation = false;
        isVerified = false;
        infoMessage = null;
        isSuccess = false;
        StateHasChanged();
    }

    private async Task ParseVerifyAndContinue()
    {
        if (isLoading)
        {
            ShowToast("Please wait, verification is in progress.");
            return;
        }

        if (isVerified)
        {
            NavigationManager.NavigateTo($"/previewbadge/{storedCredentialId}");
            return;
        }

        showValidation = true;
        if (string.IsNullOrEmpty(credentialInput))
        {
            infoMessage = "Please enter a credential before continuing.";
            isSuccess = false;
            return;
        }

        isLoading = true;
        infoMessage = null;

        ValidateDomain();
        if (!string.IsNullOrEmpty(domainError))
        {
            isLoading = false;
            infoMessage = domainError;
            isSuccess = false;
            return;
        }

        try
        {
            var parserResult = CredentialParser.Parse(credentialInput);
            if (parserResult.IsFailed)
            {
                infoMessage = "Invalid credential format. Please check your input and try again.";
                isSuccess = false;
                return;
            }

            var verifyOpenBadgeResult = await Mediator.Send(new VerifyOpenBadgeRequest(parserResult.Value));
            if (verifyOpenBadgeResult.IsFailed || !verifyOpenBadgeResult.Value.VerificationIsSuccessfull())
            {
                infoMessage = "Invalid credential. Verification of the OpenBadge failed.";
                isSuccess = false;
                return;
            }

            string image = await ProcessImage(parserResult.Value);
            if (!string.IsNullOrEmpty(infoMessage)) return;

            var storeVerifiedCredentialRequest = CreateStoreVerifiedCredentialRequest(parserResult.Value, image);
            var storeResult = await Mediator.Send(storeVerifiedCredentialRequest);

            if (!storeResult.IsSuccess)
            {
                infoMessage = "Failed to store the credential. Please try again.";
                isSuccess = false;
                return;
            }

            storedCredentialId = storeResult.Value.Id;
            infoMessage = "Credential successfully verified and stored. Click 'Continue to Preview' to proceed.";
            isSuccess = true;
            isVerified = true;
        }
        catch (Exception)
        {
            infoMessage = "An unexpected error occurred. Please try again later.";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<string> ProcessImage(OpenBadgeCredential credential)
    {
        if (credential is not AchievementCredential achievementCredential ||
            string.IsNullOrEmpty(achievementCredential.CredentialSubject?.Image?.Id))
        {
            return string.Empty;
        }

        var imageUrl = achievementCredential.CredentialSubject.Image.Id.ToString();
        if (!imageUrl.StartsWith("http")) return imageUrl;

        var httpClient = HttpClientFactory.CreateClient();
        var handler = new ImageDownloadHandler(httpClient);
        var downloadRequest = new ImageDownloadRequest(imageUrl);
        var downloadResult = await handler.HandleAsync(downloadRequest);

        if (!downloadResult.IsSuccess)
        {
            infoMessage = "Failed to download the image. Please check the image URL and try again.";
            isSuccess = false;
            return string.Empty;
        }

        var conversionResult = ImageBytesToBase64.Convert(downloadResult.Value);
        if (!conversionResult.IsSuccess)
        {
            infoMessage = "Failed to process the image. Please try again or use a different image.";
            isSuccess = false;
            return string.Empty;
        }

        return conversionResult.Value;
    }

    private StoreVerifiedCredentialRequest CreateStoreVerifiedCredentialRequest(OpenBadgeCredential openBadgeCredential, string image)
    {
        if (openBadgeCredential is AchievementCredential achievementCredential)
        {
            var claims = achievementCredential.CredentialSubject?.Claims;
            if (claims is null)
            {
                claims = new Dictionary<string, string>();
            }

            var identifier = achievementCredential.CredentialSubject?.Identifier?.ToString();
            if (!string.IsNullOrWhiteSpace(identifier))
            {
                claims.TryAdd("identifier", identifier);
            }

            var criteria = achievementCredential.CredentialSubject?.Achievement?.Criteria;
            if (criteria is not null && !string.IsNullOrWhiteSpace(criteria.Narrative))
            {
                claims.TryAdd("criteria", criteria.Narrative);
            }

            var specialization = achievementCredential.CredentialSubject?.Achievement?.Specialization;
            if (!string.IsNullOrWhiteSpace(specialization))
            {
                claims.TryAdd("specialization", specialization);
            }

            var fieldOfStudy = achievementCredential.CredentialSubject?.Achievement?.FieldOfStudy;
            if (!string.IsNullOrWhiteSpace(fieldOfStudy))
            {
                claims.TryAdd("fieldOfStudy", fieldOfStudy);
            }

            return new StoreVerifiedCredentialRequest
            {
                SubjectId = achievementCredential.CredentialSubject?.Id?.ToString(),
                SubjectName = achievementCredential.CredentialSubject?.Identifier,
                Claims = claims,
                Credential = credentialInput,
                Status = EVerificationStatus.Verified,
                ValidFrom = achievementCredential.ValidFrom ?? achievementCredential.IssuanceDate ?? DateTime.Now,
                ValidUntil = achievementCredential.ValidUntil,
                Issuer = achievementCredential.Issuer?.Id?.ToString() ?? "Unknown Issuer",
                Domain = !string.IsNullOrWhiteSpace(domainInput) ? domainInput.Trim() : null,
                Image = image
            };
        }
        else if (openBadgeCredential is EndorsementCredential endorsementCredential)
        {
            var claims = endorsementCredential.CredentialSubject?.Claims;
            if (claims is null)
            {
                claims = new Dictionary<string, string>();
            }

            endorsementCredential.CredentialSubject.Claims.TryGetValue("identifier", out string? identifier);

            var endorsementComment = endorsementCredential.CredentialSubject?.EndorsementComment;
            if (!string.IsNullOrWhiteSpace(endorsementComment))
            {
                claims.TryAdd("endorsementComment", endorsementComment);
            }

            return new StoreVerifiedCredentialRequest
            {
                SubjectId = endorsementCredential.CredentialSubject?.Id?.ToString(),
                SubjectName = identifier,
                Claims = claims,
                Credential = credentialInput,
                Status = EVerificationStatus.Verified,
                ValidFrom = endorsementCredential.ValidFrom ?? endorsementCredential.IssuanceDate ?? DateTime.Now,
                ValidUntil = endorsementCredential.ValidUntil,
                Issuer = endorsementCredential.Issuer?.Id?.ToString() ?? "Unknown Issuer",
                Domain = !string.IsNullOrWhiteSpace(domainInput) ? domainInput.Trim() : null,
                Image = image
            };
        }

        throw new InvalidOperationException("Invalid credential type. Please provide a valid Achievement Credential.");
    }

    private async void ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();

        await Task.Delay(3000);

        showToast = false;
        StateHasChanged();
    }

    private void UseSampleAchievementCredential()
    {
        credentialInput = "";
        StateHasChanged();
    }

    private void UseSampleEndorsementCredential()
    {
        credentialInput = "ZXlKaGJHY2lPaUpGVXpJMU5rc2lmUS5leUpwYzNNaU9pSmthV1E2Y0hKcGMyMDZOVE01TURCaU4yTXhaakZqTnpBME5HVmtORGs0T1dGaU5EWTFOekJrTWpreU56SXpObVU1TkRFMFptVmlaVGd5WldFek5tRmhZVGt4TjJFMk5ESmtaRHBEYjFGQ1EyOUZRa1ZyU1V0RWJURTFURmRzZW1NelZuQmliV04wWVRKV05VVkJTa3RNWjI5S1l6SldhbU5FU1RGT2JYTjRSV2xGUTJaa05tbERZbnAyVEVOVFQwNWxiRzEyY3pOdlV6SkpXWGwxWnpoYU0yaHdPVTFhWlZNeVZ6SkNjbXRUVDNkdlNHSlhSbnBrUjFaNVRVSkJRbE5wTkV0RFdFNXNXVE5CZVU1VVduSk5Va2xvUVd0NVdrVmpRMEZoVEMxV1pGQnVVVTlQZEhWc1ZqWkVVMGsyZUdJeFZWTlhSWGh2VVd4SmJtd3liV0VpTENKemRXSWlPaUprYVdRNmNISnBjMjA2Wm1FMVpHWmxObU16WmpOaE16azFPVFEzWm1FM1pXWmlOVFl6WmpNM09URTBaV001TnpNNU5USTJZbU13WVdJeU9EZzJNVE5tWTJSaVpXVTFPVGt5TlRwRGJuTkxaVkpKTmtObldtaGtXRkp2VEZSRlVVSkZiM1ZEWjJ4NldsZE9kMDFxVlRKaGVrVlRTVkZLTlhwT2MzcEJPRkZrU2tkeGNHeFVPV3RWYmxWT1RIZDFNVkExY1dOT1EzbFNibWxXTVZkWE1GaGhlRWszUTJka2RGbFlUakJhV0VsM1JVRkdTMHhuYjBwak1sWnFZMFJKTVU1dGMzaEZhVVZFWkY5WVYyUlVaMDQ0VlhKR1NtWktkVXhLVDJOS2MwSkVSamxJYURKQ2RUUXRRbFpXVmpZeVJqWm5ZeUlzSW01aVppSTZNVGMwTWpJeU5qTTVOeXdpWlhod0lqb3lNRFF5TWpJMk16azNMQ0oyWXlJNmV5SmpjbVZrWlc1MGFXRnNVM1ZpYW1WamRDSTZleUpwWkdWdWRHbG1hV1Z5SWpvaVFtOWlJRUp2YjNSemRISmhjQ0lzSW1WdVpHOXljMlZ0Wlc1MFEyOXRiV1Z1ZENJNklrTnZibTVsWTNSeklIUm9aU0J5YVdkb2RDQndaVzl3YkdVZ2RHOGdaMlYwSUhSb2FXNW5jeUJrYjI1bElpd2libUZ0WlNJNklsTjBZWEowZFhBZ1IyeDFaU0lzSW1SbGMyTnlhWEIwYVc5dUlqb2lRU0JyWlhrZ2JtVjBkMjl5YTJWeUlHTnZibTVsWTNScGJtY2daR1YyWld4dmNHVnljeXdnYVc1MlpYTjBiM0p6TENCaGJtUWdabTkxYm1SbGNuTWdhVzRnZEdobElFTmhjbVJoYm04Z1pXTnZjM2x6ZEdWdExpSXNJbWxrSWpvaVpHbGtPbkJ5YVhOdE9tWmhOV1JtWlRaak0yWXpZVE01TlRrME4yWmhOMlZtWWpVMk0yWXpOemt4TkdWak9UY3pPVFV5Tm1Kak1HRmlNamc0TmpFelptTmtZbVZsTlRrNU1qVTZRMjV6UzJWU1NUWkRaMXBvWkZoU2IweFVSVkZDUlc5MVEyZHNlbHBYVG5kTmFsVXlZWHBGVTBsUlNqVjZUbk42UVRoUlpFcEhjWEJzVkRsclZXNVZUa3gzZFRGUU5YRmpUa041VW01cFZqRlhWekJZWVhoSk4wTm5aSFJaV0U0d1dsaEpkMFZCUmt0TVoyOUtZekpXYW1ORVNURk9iWE40UldsRlJHUmZXRmRrVkdkT09GVnlSa3BtU25WTVNrOWpTbk5DUkVZNVNHZ3lRblUwTFVKV1ZsWTJNa1kyWjJNaUxDSjBlWEJsSWpwYklrVnVaRzl5YzJWdFpXNTBVM1ZpYW1WamRDSmRmU3dpZEhsd1pTSTZXeUpXWlhKcFptbGhZbXhsUTNKbFpHVnVkR2xoYkNKZExDSkFZMjl1ZEdWNGRDSTZXeUpvZEhSd2N6cGNMMXd2ZDNkM0xuY3pMbTl5WjF3dk1qQXhPRnd2WTNKbFpHVnVkR2xoYkhOY0wzWXhJbDBzSW1OeVpXUmxiblJwWVd4VGRHRjBkWE1pT25zaWMzUmhkSFZ6VUhWeWNHOXpaU0k2SWxKbGRtOWpZWFJwYjI0aUxDSnpkR0YwZFhOTWFYTjBTVzVrWlhnaU9qUTJMQ0pwWkNJNkltaDBkSEE2WEM5Y0x6RXdMakV3TGpVd0xqRXdOVG80TURBd1hDOWpiRzkxWkMxaFoyVnVkRnd2WTNKbFpHVnVkR2xoYkMxemRHRjBkWE5jTDJJNVlqWmlZakZsTFRZNE5qUXROREEzTkMxaU9HRmpMVEV5WWpOaE1HSXpNR1l3WXlNME5pSXNJblI1Y0dVaU9pSlRkR0YwZFhOTWFYTjBNakF5TVVWdWRISjVJaXdpYzNSaGRIVnpUR2x6ZEVOeVpXUmxiblJwWVd3aU9pSm9kSFJ3T2x3dlhDOHhNQzR4TUM0MU1DNHhNRFU2T0RBd01Gd3ZZMnh2ZFdRdFlXZGxiblJjTDJOeVpXUmxiblJwWVd3dGMzUmhkSFZ6WEM5aU9XSTJZbUl4WlMwMk9EWTBMVFF3TnpRdFlqaGhZeTB4TW1JellUQmlNekJtTUdNaWZYMTkuVURKTlY0SC00bFowSF9rQXhfN0lWdHRhYnhEdzFGUjdVVExReGNBV2ZKazQ4RnRpWkRCeC1KLTJhbUpxNlAwam4xWnFVM3hrZlNlTTMycUg3OTE2M3c=";
        StateHasChanged();
    }

}