@page "/verifier/{SnippetId}"
@using Blocktrust.CredentialBadges.Web.Domain
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.GetVerifiedCredentialById
@using Blocktrust.CredentialBadges.Web.Enums
@using MediatR
@inject IMediator Mediator
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Blocktrust Credential Verifier</PageTitle>

<div class="max-w-5xl mx-auto px-4 py-8">
    <h2 class="text-3xl font-bold text-gray-900 mb-6">Credential Verification</h2>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@ErrorMessage</span>
        </div>
    }
    else if (isVerifying)
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex justify-center items-center h-48">
                <span class="material-symbols-outlined animate-spin text-4xl text-gray-400">autorenew</span>
            </div>
            <p class="text-gray-600 text-center mt-4">Verifying credential, please wait...</p>
        </div>
    }
    else if (credential != null)
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4">
                <h3 class="text-2xl font-semibold mb-2 sm:mb-0">@credential.Name</h3>
                <div class="flex items-center">
                    <span class="inline-block px-3 py-1 text-sm font-medium leading-5 rounded-full @GetStatusClass(credential.Status) mr-2">@credential.Status</span>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500 transition-colors duration-200" @onclick="RerunVerification">
                        <span class="material-symbols-outlined mr-2">refresh</span> Re-verify
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(credential.Image))
            {
                <div class="mb-6">
                    <img src="data:image;base64,@credential.Image" alt="Credential Image" class="w-full h-auto rounded-lg border border-gray-300"/>
                </div>
            }

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Credential ID</strong>
                    <div class="flex items-center">
                        <p class="text-gray-800 truncate w-3/4" title="@SnippetId">@SnippetId</p>
                        <button class="ml-2 text-slate-500 hover:text-slate-700 transition-colors duration-200" @onclick="() => CopyToClipboard(SnippetId)">
                            <span class="material-symbols-outlined">content_copy</span>
                        </button>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Verification Status:</strong>
                    <div class="flex items-center">
                        <span class="inline-block px-3 py-1 text-sm font-medium leading-5 rounded-full @GetStatusClass(credential.Status)">@credential.Status</span>
                    </div>
                </div>
            </div>

            @* <div class="bg-gray-50 p-4 rounded-lg border border-gray-300 mb-6"> *@
            @*     <strong class="block text-gray-600 mb-2 text-lg">Credential Details:</strong> *@
            @*     <p class="text-gray-800 mb-4">@credential.Description</p> *@
            @*     @foreach (var field in credential.AdditionalFields) *@
            @*     { *@
            @*         <div class="flex flex-col sm:flex-row mb-2"> *@
            @*             <strong class="text-gray-600 sm:w-1/4">@field.Key:</strong> *@
            @*             <span class="text-gray-800 sm:w-3/4">@field.Value</span> *@
            @*         </div> *@
            @*     } *@
            @* </div> *@

            @if (!string.IsNullOrEmpty(VerificationMessage))
            {
                <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-lg mb-6" role="alert">
                    <span class="block sm:inline">@VerificationMessage</span>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string SnippetId { get; set; }
    private VerifiedCredential credential;
    private string ErrorMessage;
    private bool isVerifying = false;
    private string VerificationMessage;

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(SnippetId, out Guid credentialId))
        {
            await LoadCredential(credentialId);
        }
        else
        {
            ErrorMessage = "Invalid credential ID.";
        }
    }

    private async Task LoadCredential(Guid credentialId)
    {
        var result = await Mediator.Send(new GetVerifiedCredentialByIdRequest(credentialId));
        if (result.IsSuccess)
        {
            credential = result.Value;
        }
        else
        {
            ErrorMessage = $"Error: {result.Errors.First().Message}";
        }
    }

    private async Task RerunVerification()
    {
        if (Guid.TryParse(SnippetId, out Guid credentialId))
        {
            try
            {
                isVerifying = true;
                VerificationMessage = string.Empty;
                StateHasChanged();

                var response = await HttpClient.GetAsync($"{NavigationManager.BaseUri}api/VerifyCredential/{credentialId}");
                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadFromJsonAsync<VerificationResponse>();
                    if (jsonResponse != null)
                    {
                        credential.Status = jsonResponse.Status;
                        credential.Name = jsonResponse.Name;
                        credential.Description = jsonResponse.Description;
                        credential.Image = jsonResponse.Image;
                        VerificationMessage = "Verification successful!";
                    }
                }
                else
                {
                    VerificationMessage = "Verification failed. Please try again.";
                }
            }
            catch (Exception ex)
            {
                VerificationMessage = $"Error during re-verification: {ex.Message}";
            }
            finally
            {
                isVerifying = false;
                StateHasChanged();
            }
        }
        else
        {
            ErrorMessage = "Invalid credential ID.";
        }
    }

    private string GetStatusClass(EVerificationStatus status)
    {
        return status switch
        {
            EVerificationStatus.Verified => "bg-green-100 text-green-800",
            EVerificationStatus.Revoked => "bg-red-100 text-red-800",
            EVerificationStatus.Expired => "bg-yellow-100 text-yellow-800",
            EVerificationStatus.NotDue => "bg-blue-100 text-blue-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        // Optionally, you can show a toast or message to indicate successful copy
    }

    public class VerificationResponse
    {
        public Guid Id { get; set; }
        public EVerificationStatus Status { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
    }
}