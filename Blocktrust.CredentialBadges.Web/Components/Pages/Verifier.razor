@page "/verifier/{SnippetId}"
@using Blocktrust.CredentialBadges.Web.Domain
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.GetVerifiedCredentialById
@using Blocktrust.CredentialBadges.Web.Enums
@using MediatR
@using Blocktrust.CredentialBadges.Core.Common
@using Blocktrust.CredentialBadges.OpenBadges
@using Blocktrust.CredentialBadges.Web.Services.TemplatesService
@inject IMediator Mediator
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Blocktrust Credential Verifier</PageTitle>

<div class="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex flex-col items-center">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div
            class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6 w-full sm:w-11/12 md:w-10/12 lg:w-8/12"
            role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@ErrorMessage</span>
        </div>
    }
    else if (isVerifying)
    {
        <div
            class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6 w-full sm:w-11/12 md:w-10/12 lg:w-8/12">
            <div class="flex justify-center items-center h-48">
                <span class="material-symbols-outlined animate-spin text-4xl text-gray-400">autorenew</span>
            </div>
            <p class="text-gray-600 text-center mt-4">Verifying credential, please wait...</p>
        </div>
    }
    else if (credential != null && verificationResponse != null)
    {
        <!--
            Decide whether we have an AchievementCredential or EndorsementCredential.
            Render the appropriate UI blocks for each.
        -->
        <div
            class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6 w-full sm:w-11/12 md:w-10/12 lg:w-8/12">

            <!-- Top Section: Verified/Revoked/Expired/etc. + Credential image + Name -->
            <div class="mb-6 border-b pb-4">
                <div class="flex items-center mb-4">
                    @switch (verificationResponse.Status)
                    {
                        case EVerificationStatus.Verified:
                            <span class="material-symbols-outlined text-green-500 mr-2">check_circle</span>
                            <span class="text-xl font-semibold text-green-500">Verified</span>
                            break;
                        case EVerificationStatus.Revoked:
                            <span class="material-symbols-outlined text-red-500 mr-2">cancel</span>
                            <span class="text-xl font-semibold text-red-500">Revoked</span>
                            break;
                        case EVerificationStatus.Expired:
                            <span class="material-symbols-outlined text-yellow-500 mr-2">warning</span>
                            <span class="text-xl font-semibold text-yellow-500">Expired</span>
                            break;
                        case EVerificationStatus.NotDue:
                            <span class="material-symbols-outlined text-blue-500 mr-2">schedule</span>
                            <span class="text-xl font-semibold text-blue-500">Not Due</span>
                            break;
                        case EVerificationStatus.Invalid:
                            <span class="material-symbols-outlined text-red-500 mr-2">error</span>
                            <span class="text-xl font-semibold text-red-500">Invalid</span>
                            break;
                    }
                </div>
                @if (!string.IsNullOrEmpty(credential.Image))
                {
                    <img src="data:image;base64,@credential.Image" alt="Credential Image"
                         class="w-24 h-24 object-contain rounded-lg my-2"/>
                }
                <h2 class="text-2xl font-bold truncate mb-2">@credential.Name</h2>
                @if (types.Any())
                {
                    <p class="text-gray-600">Type: @types.FirstOrDefault()</p>
                }
            </div>

            <!-- Body Section: Render either the AchievementCredential details or EndorsementCredential details -->
            @if (parserResultAchievement is not null)
            {
                <!-- =========================
                     ACHIEVEMENT CREDENTIAL UI
                     ========================= -->
                <div class="flex flex-col lg:flex-row mb-8">
                    <!-- Left Column (Issuer Info) -->
                    <div class="lg:w-1/3 lg:pr-4 mb-4 lg:mb-0">
                        <h3 class="mb-4 text-slate-900 text-xl">Issuer Information</h3>
                        <div class="flex items-center">
                            @if (!string.IsNullOrEmpty(credential.Image))
                            {
                                <img src="data:image;base64,@credential.Image" alt="Issuer Logo"
                                     class="w-16 h-16 object-contain rounded-full mr-4"/>
                            }
                            <div class="flex-1 min-w-0 flex items-center">
                                <p class="font-semibold truncate flex-grow">@parserResultAchievement.Issuer.Id</p>
                                <button @onclick="() => CopyToClipboard(parserResultAchievement.Issuer.Id.ToString())"
                                        class="ml-2 flex-shrink-0">
                                    <span class="material-symbols-outlined text-gray-500 hover:text-gray-700">
                                        content_copy
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column (Achievement data) -->
                    <div class="lg:w-2/3">
                        <h3 class="mb-4 text-slate-900 text-xl">Credential Details</h3>
                        <div class="flex flex-col mb-2">
                            <strong class="mr-1 min-w-8">Issued To:</strong>
                            <div class="flex flex-row">
                                <p class="truncate flex-grow">@parserResultAchievement.CredentialSubject.Id</p>
                                <button @onclick="() => CopyToClipboard(parserResultAchievement.CredentialSubject.Id.ToString())"
                                        class="ml-2 flex-shrink-0">
                                    <span class="material-symbols-outlined text-gray-500 hover:text-gray-700">content_copy</span>
                                </button>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(credential.Description))
                        {
                            <p class="mb-2"><strong>Description:</strong> @credential.Description</p>
                            @if (!string.IsNullOrEmpty(parserResultAchievement.CredentialSubject.Achievement.Criteria.Narrative))
                            {
                                <div class="mb-2">
                                    <strong>Criteria:</strong>
                                    <p class="break-words">
                                        @parserResultAchievement.CredentialSubject.Achievement.Criteria.Narrative
                                    </p>
                                </div>
                            }
                        }
                        else if (credential.Claims is not null && credential.Claims.Any())
                        {
                            foreach (var claim in credential.Claims)
                            {
                                <p class="mb-2"><strong>@claim.Key:</strong> @claim.Value</p>
                            }
                        }

                        <!-- Always show the valid from date -->
                        <p class="mt-4">
                            <strong>Valid From:</strong> @credential.ValidFrom.ToString("MMMM dd, yyyy")
                        </p>

                        <!-- Show valid until only when available -->
                        @if (credential.ValidUntil.HasValue)
                        {
                            <p>
                                <strong>Valid Until:</strong> @credential.ValidUntil.Value.ToString("MMMM dd, yyyy")
                            </p>
                        }
                    </div>
                </div>
            }
            else if (parserResultEndorsement is not null)
            {
                <!-- =========================
                     ENDORSEMENT CREDENTIAL UI
                     ========================= -->
                <div class="flex flex-col lg:flex-row mb-8">
                    <!-- Left Column (Issuer Info) -->
                    <div class="lg:w-1/3 lg:pr-4 mb-4 lg:mb-0">
                        <h3 class="mb-4 text-slate-900 text-xl">Issuer Information</h3>
                        <div class="flex items-center">
                            @if (!string.IsNullOrEmpty(credential.Image))
                            {
                                <img src="data:image;base64,@credential.Image" alt="Issuer Logo"
                                     class="w-16 h-16 object-contain rounded-full mr-4"/>
                            }
                            <div class="flex-1 min-w-0 flex items-center">
                                <p class="font-semibold truncate flex-grow">@parserResultEndorsement.Issuer.Id</p>
                                <button @onclick="() => CopyToClipboard(parserResultEndorsement.Issuer.Id.ToString())"
                                        class="ml-2 flex-shrink-0">
                                    <span class="material-symbols-outlined text-gray-500 hover:text-gray-700">
                                        content_copy
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column (Endorsement data) -->
                    <div class="lg:w-2/3">
                        <h3 class="mb-4 text-slate-900 text-xl">Credential Details</h3>

                        <!-- The "subject" of the endorsement -->
                        <div class="flex flex-col mb-2">
                            <strong class="mr-1 min-w-8">Endorsed Entity:</strong>
                            <div class="flex flex-row">
                                <p class="truncate flex-grow">@parserResultEndorsement.CredentialSubject.Id</p>
                                <button @onclick="() => CopyToClipboard(parserResultEndorsement.CredentialSubject.Id.ToString())"
                                        class="ml-2 flex-shrink-0">
                                    <span class="material-symbols-outlined text-gray-500 hover:text-gray-700">content_copy</span>
                                </button>
                            </div>
                        </div>

                        <!-- Optional endorsement comment -->
                        @if (!string.IsNullOrEmpty(parserResultEndorsement.CredentialSubject.EndorsementComment))
                        {
                            <p class="mb-2">
                                <strong>Endorsement Comment:</strong> @parserResultEndorsement.CredentialSubject.EndorsementComment
                            </p>
                        }

                        <!-- If there are any extension claims -->
                        @if (parserResultEndorsement.CredentialSubject.Claims is not null
                            && parserResultEndorsement.CredentialSubject.Claims.Any())
                        {
                            <h4 class="mt-2 mb-1 font-semibold">Additional Claims</h4>
                            @foreach (var claim in parserResultEndorsement.CredentialSubject.Claims)
                            {
                                <p class="mb-1"><strong>@claim.Key:</strong> @claim.Value</p>
                            }
                        }

                        <!-- Show general validity if available -->
                        <p class="mt-4">
                            <strong>Valid From:</strong> @credential.ValidFrom.ToString("MMMM dd, yyyy")
                        </p>
                        @if (credential.ValidUntil.HasValue)
                        {
                            <p>
                                <strong>Valid Until:</strong> @credential.ValidUntil.Value.ToString("MMMM dd, yyyy")
                            </p>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="text-red-500">
                    No recognized credential data to display.
                </div>
            }
        </div>

        <!-- Bottom Section (Verification Info) -->
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 w-full sm:w-11/12 md:w-10/12 lg:w-8/12">
            <div class="flex flex-col lg:flex-row">
                <!-- Left Column -->
                <div class="lg:w-1/3 lg:pr-4 mb-4 lg:mb-0">
                    <div
                        class="@(verificationResponse.VerificationChecks.VerificationIsSuccessfull() ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") p-4 rounded-lg mb-4">
                        <div class="flex items-center mb-2">
                            <span
                                class="material-symbols-outlined mr-2">@(verificationResponse.VerificationChecks.VerificationIsSuccessfull() ? "check_circle" : "error")</span>
                            <span
                                class="font-semibold">@(verificationResponse.VerificationChecks.VerificationIsSuccessfull() ? "Credential Verified" : "Verification Failed")</span>
                        </div>
                        <p class="ml-8">Last Checked:
                            <br/>@verificationResponse.VerificationChecks.CheckedOn.ToString("MMM dd, yyyy")</p>
                    </div>
                    <button
                        class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500 transition-colors duration-200 w-full"
                        @onclick="RerunVerification">
                        <span class="material-symbols-outlined mr-2">refresh</span>Rerun Verification
                    </button>
                </div>

                <!-- Right Column: All verification checks (common for both credential types) -->
                <div class="lg:w-2/3">
                    <h3 class="mb-4 text-slate-900 text-xl">Verification Checks</h3>
                    <div class="mb-4">
                        <h4 class="font-semibold mb-2">Issuer</h4>
                        <div class="flex items-center">
                            @if (verificationResponse.VerificationChecks.IssuerFoundInTrustRegistry == null)
                            {
                                <span class="material-symbols-outlined text-yellow-500 mr-2">help</span>
                                <p>Trust registry does not exist</p>
                            }
                            else
                            {
                                <span
                                    class="material-symbols-outlined @(verificationResponse.VerificationChecks.IssuerFoundInTrustRegistry == true ? "text-green-500" : "text-red-500") mr-2">
                                    @(verificationResponse.VerificationChecks.IssuerFoundInTrustRegistry == true ? "check_circle" : "cancel")
                                </span>
                                <p>
                                    @(verificationResponse.VerificationChecks.IssuerFoundInTrustRegistry == true
                                        ? "Issuer found in trust registry"
                                        : "Issuer not found in trust registry")
                                </p>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(verificationResponse.VerificationChecks.ReferenceToTrustRegistry))
                        {
                            <p class="ml-6 text-sm text-gray-600 break-words">
                                Registry: @verificationResponse.VerificationChecks.ReferenceToTrustRegistry</p>
                        }
                    </div>
                    <div>
                        <h4 class="font-semibold mb-2">Credential</h4>
                        <div class="flex items-center mb-1">
                            <span
                                class="material-symbols-outlined @(verificationResponse.VerificationChecks.SignatureIsValid ? "text-green-500" : "text-red-500") mr-2">
                                @(verificationResponse.VerificationChecks.SignatureIsValid ? "check_circle" : "cancel")
                            </span>
                            <p>
                                @(verificationResponse.VerificationChecks.SignatureIsValid
                                    ? "Has a valid digital signature"
                                    : "Invalid digital signature")
                            </p>
                        </div>
                        <div class="flex items-center mb-1">
                            <span
                                class="material-symbols-outlined @(verificationResponse.VerificationChecks.CredentialIsNotExpired != false ? "text-green-500" : "text-red-500") mr-2">
                                @(verificationResponse.VerificationChecks.CredentialIsNotExpired != false ? "check_circle" : "cancel")
                            </span>
                            <p>
                                @(verificationResponse.VerificationChecks.CredentialIsNotExpired != false
                                    ? "Has not expired"
                                    : "Has expired")
                            </p>
                        </div>
                        <div class="flex items-center mb-1">
                            <span
                                class="material-symbols-outlined @(verificationResponse.VerificationChecks.CredentialIssuanceDateIsNotInFuture ? "text-green-500" : "text-red-500") mr-2">
                                @(verificationResponse.VerificationChecks.CredentialIssuanceDateIsNotInFuture ? "check_circle" : "cancel")
                            </span>
                            <p>
                                @(verificationResponse.VerificationChecks.CredentialIssuanceDateIsNotInFuture
                                    ? "Issuance date is not in the future"
                                    : "Issuance date is in the future")
                            </p>
                        </div>
                        <div class="flex items-center">
                            <span
                                class="material-symbols-outlined @(verificationResponse.VerificationChecks.CredentialIsNotRevoked != false ? "text-green-500" : "text-red-500") mr-2">
                                @(verificationResponse.VerificationChecks.CredentialIsNotRevoked != false ? "check_circle" : "cancel")
                            </span>
                            <p>
                                @(verificationResponse.VerificationChecks.CredentialIsNotRevoked != false
                                    ? "Has not been revoked by issuer"
                                    : "Has been revoked by issuer")
                            </p>
                        </div>
                        @if (!string.IsNullOrEmpty(verificationResponse.VerificationChecks.ReferenceToRevocationList))
                        {
                            <p class="ml-6 text-sm text-gray-600 break-words">
                                Revocation List: @verificationResponse.VerificationChecks.ReferenceToRevocationList
                            </p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Toast component -->
@if (showToast)
{
    <div
        class="fixed bottom-4 right-4 px-4 py-2 rounded-md shadow-lg transition-opacity duration-300 @(showToast ? "opacity-100" : "opacity-0") @(isError ? "bg-red-500" : "bg-green-500") text-white">
        @toastMessage
    </div>
}

@code {
    [Parameter] public string SnippetId { get; set; }
    private VerifiedCredential credential;
    private string ErrorMessage;
    private bool isVerifying;
    private AchievementCredential parserResultAchievement;
    private EndorsementCredential parserResultEndorsement;
    private VerificationResponse verificationResponse;
    private bool showToast = false;
    private bool isError = false;
    private string toastMessage = string.Empty;
    private List<string> types = new List<string> { };

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(SnippetId, out Guid credentialId))
        {
            await LoadCredential(credentialId);
        }
        else
        {
            ErrorMessage = "Invalid credential ID.";
        }
    }

    private async Task LoadCredential(Guid credentialId)
    {
        var result = await Mediator.Send(new GetVerifiedCredentialByIdRequest(credentialId, false));
        if (result.IsSuccess)
        {
            credential = result.Value;

            // Decide which credential we are dealing with:
            if (credential.Claims.ContainsKey("endorsementComment"))
            {
                // Parse as EndorsementCredential
                parserResultEndorsement = (EndorsementCredential)CredentialParser.Parse(credential.Credential).Value;
            }
            else
            {
                // Parse as AchievementCredential
                parserResultAchievement = (AchievementCredential)CredentialParser.Parse(credential.Credential).Value;
            }

            // If it's an achievement, proceed to verification checks
            if (parserResultAchievement is not null || parserResultEndorsement is not null)
            {
                await RerunVerification();
                types = new SelectTemplateService().GetFilteredTypes(credential);
            }
            else
            {
                ErrorMessage = "Error parsing credential. Neither achievement nor endorsement format recognized.";
            }
        }
        else
        {
            ErrorMessage = $"Error: {result.Errors.First().Message}";
        }
    }

    private async Task RerunVerification()
    {
        if (Guid.TryParse(SnippetId, out Guid credentialId))
        {
            try
            {
                isVerifying = true;
                StateHasChanged();

                var response = await HttpClient.GetAsync($"{NavigationManager.BaseUri}api/VerifyCredential/{credentialId}");
                if (response.IsSuccessStatusCode)
                {
                    verificationResponse = await response.Content.ReadFromJsonAsync<VerificationResponse>();
                    if (verificationResponse == null)
                    {
                        ErrorMessage = "Failed to parse verification response.";
                    }
                }
                else
                {
                    ErrorMessage = "Verification failed. Please try again.";
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error during re-verification: {ex.Message}";
            }
            finally
            {
                isVerifying = false;
                StateHasChanged();
            }
        }
        else
        {
            ErrorMessage = "Invalid credential ID.";
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            await ShowToast("Copied to clipboard!", false);
        }
        catch (Exception)
        {
            await ShowToast("Failed to copy. Please try again.", true);
        }
    }

    private async Task ShowToast(string message, bool error)
    {
        toastMessage = message;
        isError = error;
        showToast = true;
        StateHasChanged();

        await Task.Delay(3000); // Show toast for 3 seconds

        showToast = false;
        StateHasChanged();
    }
}
