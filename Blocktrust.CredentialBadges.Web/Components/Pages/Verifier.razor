@page "/verifier/{SnippetId}"
@using Blocktrust.CredentialBadges.Web.Domain
@using Blocktrust.CredentialBadges.Web.Commands.VerifiedCredentials.GetVerifiedCredentialById
@using MediatR
@using Blocktrust.CredentialBadges.Core.Common
@using Blocktrust.CredentialBadges.OpenBadges
@inject IMediator Mediator
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Blocktrust Credential Verifier</PageTitle>

<div class="max-w-10/12 mx-auto px-4 py-8 flex flex-col items-center">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6  w-8/12" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@ErrorMessage</span>
        </div>
    }
    else if (isVerifying)
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6 w-8/12">
            <div class="flex justify-center items-center h-48">
                <span class="material-symbols-outlined animate-spin text-4xl text-gray-400">autorenew</span>
            </div>
            <p class="text-gray-600 text-center mt-4">Verifying credential, please wait...</p>
        </div>
    }
    else if (credential != null)
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6 w-8/12">
            
            
            <!-- Top Section -->
            <div class="mb-6 border-b pb-4">
                <div class="flex items-center mb-4">
                    <span class="material-symbols-outlined text-green-500 mr-2">check_circle</span>
                    <span class="text-xl font-semibold">@credential.Status</span>
                </div>
                @if (!string.IsNullOrEmpty(credential.Image))
                {
                    <img src="data:image;base64,@credential.Image" alt="Credential Image" class="w-32 h-32 object-cover rounded-lg mb-4"/>
                }
                <h2 class="text-2xl font-bold mb-2">@credential.Name</h2>
                <p class="text-gray-600">Achievement Type: @parserResult.CredentialSubject.Achievement.AchievementType.Value</p>
            </div>

            
            
            
            <!-- Body Section -->
            <div class="flex flex-col md:flex-row mb-8 ">
                <!-- Left Column (Issuer Info) -->
                <div class="md:w-1/3 md:pr-4 mb-4 md:mb-0 ">
                    <h3 class="text-xl font-semibold mb-4">Issuer Information</h3>
                    <div class="flex items-center">
                        @if (!string.IsNullOrEmpty(credential.Image))
                        {
                            <img src="@credential.Image" alt="Issuer Logo" class="w-16 h-16 object-cover rounded-full mr-4"/>
                        }
                        <div class="">
                            <p class="font-semibold truncate w-96">@parserResult.Issuer.Id</p>
                        </div>
                    </div>
                </div>

                <!-- Right Column (Credential Data) -->
                <div class="md:w-2/3 ">
                    <h3 class="text-xl font-semibold mb-4 text-red-600">Credential Details</h3>
                    <p class="mb-2 w-96 truncate"><strong>Issued To:</strong> @parserResult.CredentialSubject.Id</p>
                    <p class="mb-2"><strong>Description:</strong> @credential.Description</p>
                    <div class="mb-2">
                        <strong>Criteria:</strong>
                        <p class="flex-wrap text-wrap  w-3/4">@parserResult.CredentialSubject.Achievement.Criteria.Narrative</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom Section (Verification Info) -->
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 w-8/12">
            <div class="flex flex-col md:flex-row">
                <!-- Left Column -->
                <div class="md:w-1/3 md:pr-4 mb-4 md:mb-0">
                    <div class="bg-green-100 text-green-800 p-4 rounded-lg mb-4">
                        <div class="flex items-center mb-2">
                            <span class="material-symbols-outlined mr-2">check_circle</span>
                            <span class="font-semibold">Credential Verified</span>
                        </div>
                        <p>Last Checked: @DateTime.Now.ToString("MMM dd, yyyy")</p>
                    </div>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500 transition-colors duration-200" @onclick="RerunVerification">
                        <span class="material-symbols-outlined mr-2">refresh</span> Run Verification
                    </button>
                </div>

                <!-- Right Column -->
                <div class="md:w-2/3">
                    <h3 class="text-xl font-semibold mb-4">Verification Checks</h3>
                    <div class="mb-4">
                        <h4 class="font-semibold mb-2">Issuer</h4>
                        <div class="flex items-center">
                            <span class="material-symbols-outlined text-green-500 mr-2">check_circle</span>
                            <p>Has been issued by a registered institution:</p>
                        </div>
                        <ul class="list-disc list-inside ml-6">
                        </ul>
                    </div>
                    <div>
                        <h4 class="font-semibold mb-2">Credential</h4>
                        <div class="flex items-center mb-1">
                            <span class="material-symbols-outlined text-green-500 mr-2">check_circle</span>
                            <p>Has a valid digital signature</p>
                        </div>
                        <div class="flex items-center mb-1">
                            <span class="material-symbols-outlined text-green-500 mr-2">check_circle</span>
                            <p>Has not expired</p>
                        </div>
                        <div class="flex items-center">
                            <span class="material-symbols-outlined text-green-500 mr-2">check_circle</span>
                            <p>Has not been revoked by issuer</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string SnippetId { get; set; }
    private VerifiedCredential credential;
    private string ErrorMessage;
    private bool isVerifying;
    private AchievementCredential parserResult;

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(SnippetId, out Guid credentialId))
        {
            await LoadCredential(credentialId);
        }
        else
        {
            ErrorMessage = "Invalid credential ID.";
        }
    }

    private async Task LoadCredential(Guid credentialId)
    {
        var result = await Mediator.Send(new GetVerifiedCredentialByIdRequest(credentialId));
        if (result.IsSuccess)
        {
            credential = result.Value;
             parserResult = (AchievementCredential)CredentialParser.Parse(credential.Credential).Value;
            if (parserResult != null)
            {
                await RerunVerification();

            }
            else
            {
                ErrorMessage = $"Error parsing credential: ";
            }
        
           
        }
        else
        {
            ErrorMessage = $"Error: {result.Errors.First().Message}";
        }
    }

    private async Task RerunVerification()
    {
        if (Guid.TryParse(SnippetId, out Guid credentialId))
        {
            try
            {
                isVerifying = true;
                StateHasChanged();

                var response = await HttpClient.GetAsync($"{NavigationManager.BaseUri}api/VerifyCredential/{credentialId}");
                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadFromJsonAsync<VerificationResponse>();
                    if (jsonResponse != null)
                    {
                        // credential.Status = jsonResponse.Status;
                        // credential.Name = jsonResponse.Name;
                        // credential.Description = jsonResponse.Description;
                        // credential.Image = jsonResponse.Image;
                        // // Update other properties as needed
                    }
                }
                else
                {
                    ErrorMessage = "Verification failed. Please try again.";
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error during re-verification: {ex.Message}";
            }
            finally
            {
                isVerifying = false;
                StateHasChanged();
            }
        }
        else
        {
            ErrorMessage = "Invalid credential ID.";
        }
    }


}