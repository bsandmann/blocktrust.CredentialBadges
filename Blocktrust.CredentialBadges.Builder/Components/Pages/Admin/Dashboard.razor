@page "/admin/dashboard"
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout AdminLayout
@using MediatR
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetAllBuilderCredentials
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.UpdateBuilderCredential
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h2 class="text-2xl font-bold">Dashboard</h2>
<p>Welcome to the admin dashboard!</p>

<div class="flex px-2.5 gap-4">
    <!-- Total Approved -->
    <div class="bg-white p-4 w-full rounded shadow-md border border-gray-300">
        <h3 class="text-xl font-semibold text-gray-800">Total Approved</h3>
        <p class="text-3xl font-bold text-green-600">@totalApproved</p>
    </div>

    <!-- Total Pending -->
    <div class="bg-white w-full p-4 rounded shadow-md border border-gray-300">
        <h3 class="text-xl font-semibold text-gray-800">Total Pending</h3>
        <p class="text-3xl font-bold text-yellow-600">@totalPending</p>
    </div>
</div>

<!-- Recent Requests Table -->
<div class="bg-white p-4 rounded shadow-md border border-gray-300">
    <h3 class="text-xl font-semibold text-gray-800">Recent Requests</h3>
    <div class="overflow-x-auto">
        <table class="w-full bg-white border border-gray-300 rounded">
            <thead>
                <tr class="bg-slate-100">
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in recentRequests)
                {
                    <tr class="border-t border-gray-300">
                        <td class="px-6 py-4 whitespace-nowrap">@request.Date.ToShortDateString()</td>
                        <td class="px-6 py-4 whitespace-nowrap">@TruncateString(request.Label, 20)</td>
                        <td class="px-6 py-4 whitespace-nowrap">@TruncateString(request.SubjectDid, 15)</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            @if (request.Status == EBuilderCredentialStatus.Pending)
                            {
                                <span class="bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full text-xs">Pending</span>
                            }
                            else if (request.Status == EBuilderCredentialStatus.Approved)
                            {
                                <span class="bg-green-200 text-green-800 px-2 py-1 rounded-full text-xs">Approved</span>
                            }
                            else if (request.Status == EBuilderCredentialStatus.Declined)
                            {
                                <span class="bg-red-200 text-red-800 px-2 py-1 rounded-full text-xs">Declined</span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap flex space-x-2">
                            <button class="bg-red-500 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-red-600" 
                                    @onclick="() => DeclineRequest(request.CredentialId)" 
                                    disabled="@(request.Status != EBuilderCredentialStatus.Pending)">
                                Decline
                            </button>
                            <button class="bg-slate-700 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-slate-800" 
                                    @onclick="() => ViewRequest(request.CredentialId)">
                                View
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private int totalApproved;
    private int totalPending;
    private int totalDeclined;
    private List<BuilderCredential> recentRequests = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        var result = await Mediator.Send(new GetAllBuilderCredentialsRequest());
        if (result.IsSuccess)
        {
            var credentials = result.Value;
            totalApproved = credentials.Count(c => c.Status == EBuilderCredentialStatus.Approved);
            totalPending = credentials.Count(c => c.Status == EBuilderCredentialStatus.Pending);
            totalDeclined = credentials.Count(c => c.Status == EBuilderCredentialStatus.Declined);

            // Get recent 5 requests
            recentRequests = credentials.OrderByDescending(c => c.Date).Take(5).ToList();
        }
        else
        {
            // Handle error
            Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
        }
    }

    private async Task DeclineRequest(Guid requestId)
    {
        var updateRequest = new UpdateBuilderCredentialRequest
        {
            CredentialId = requestId,
            Status = EBuilderCredentialStatus.Declined,
        };

        var result = await Mediator.Send(updateRequest);

        if (result.IsSuccess)
        {
            await LoadDashboardData();
        }
        else
        {
            Console.WriteLine("Error declining credential: " + result.Errors.First().Message);
        }
    }

    private void ViewRequest(Guid requestId)
    {
        NavigationManager.NavigateTo($"/admin/requests/{requestId}");
    }

    private string TruncateString(string value, int maxLength)
    {
        return value.Length <= maxLength ? value : value.Substring(0, maxLength) + "...";
    }
}
