@page "/admin/requests/pending"
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetAllBuilderCredentials
@* @using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.DeclineBuilderCredential *@
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using MediatR
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout AdminLayout
@inject IMediator Mediator

<div class="max-w-4xl mx-auto px-4 py-8">
    <h2 class="text-2xl font-bold">Pending Requests</h2>
    <p class="text-gray-600 mb-4">Manage pending requests here.</p>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-300 rounded">
            <thead>
                <tr class="bg-slate-100">
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var credential in credentials.Where(c => c.Status == EBuilderCredentialStatus.Pending))
                {
                    <tr class="border-t border-gray-300">
                        <td class="px-6 py-4 whitespace-nowrap">@credential.Date.ToShortDateString()</td>
                        <td class="px-6 py-4 whitespace-nowrap" title="@credential.Label">@TruncateText(credential.Label, 20)</td>
                        <td class="px-6 py-4 whitespace-nowrap" title="@credential.SubjectDid">@TruncateText(credential.SubjectDid, 20)</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full text-xs">Pending</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button class="bg-red-600 text-white px-4 py-2 rounded" @onclick="() => DeclineCredential(credential)">
                                Decline
                            </button>
                            <button class="text-slate-600 hover:text-slate-800" @onclick="() => ViewCredential(credential)">
                                <span class="material-icons">visibility</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<BuilderCredential> credentials = new List<BuilderCredential>();

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Send(new GetAllBuilderCredentialsRequest());
        if (result.IsSuccess)
        {
            credentials = result.Value;
        }
        else
        {
            // Handle error, maybe log it or show a message
            Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
        }
    }

    private void ViewCredential(BuilderCredential credential)
    {
        // Navigate to detailed view of the credential
        // Example: NavigationManager.NavigateTo($"/credentials/{credential.CredentialId}");
    }

    private async Task DeclineCredential(BuilderCredential credential)
    {
        // Implement the request to decline the credential
        // Example: await Mediator.Send(new DeclineBuilderCredentialRequest { CredentialId = credential.CredentialId });
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
        {
            return text;
        }
        return text.Substring(0, maxLength) + "...";
    }
}
