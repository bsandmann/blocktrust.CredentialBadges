@page "/admin/requests"
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetAllBuilderCredentials
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.UpdateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using MediatR
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout AdminLayout
@inject IMediator Mediator
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="max-w-4xl mx-auto px-4 py-8">
    <h2 class="text-2xl font-bold">Requests</h2>
    <p class="text-gray-600 mb-4">Manage all requests here.</p>

    <table class="w-full bg-white border border-gray-300 rounded">
        <thead>
            <tr class="bg-slate-100">
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var credential in credentials)
            {
                <tr class="border-t border-gray-300">
                    <td class="px-6 py-4 whitespace-nowrap">@credential.Date.ToShortDateString()</td>
                    <td class="px-6 py-4 whitespace-nowrap" title="@credential.Label">@TruncateText(credential.Label, 20)</td>
                    <td class="px-6 py-4 whitespace-nowrap" title="@credential.SubjectDid">@TruncateText(credential.SubjectDid, 20)</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="@(GetStatusClass(credential.Status)) px-2 py-1 rounded-full text-xs">@GetStatusText(credential.Status)</span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap flex space-x-2">
                        <button class="bg-red-500 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-red-600 disabled:bg-gray-100 disabled:cursor-not-allowed" 
                                @onclick="() => DeclineCredential(credential)" 
                                disabled="@(credential.Status != EBuilderCredentialStatus.Pending)">
                            Decline
                        </button>
                        <button class="bg-slate-700 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-slate-800" 
                                @onclick="() => ViewCredential(credential)">
                            View
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<BuilderCredential> credentials = new List<BuilderCredential>();

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Send(new GetAllBuilderCredentialsRequest());
        if (result.IsSuccess)
        {
            credentials = result.Value;
        }
        else
        {
            // Handle error
            Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
        }
    }

    private void ViewCredential(BuilderCredential credential)
    {
        // Navigate to detailed view of the credential
        NavigationManager.NavigateTo($"/credentials/{credential.CredentialId}");
    }

    private async Task DeclineCredential(BuilderCredential credential)
    {
        // Create an update request with Declined status
        var updateRequest = new UpdateBuilderCredentialRequest
        {
            CredentialId = credential.CredentialId,
            Status = EBuilderCredentialStatus.Declined,
            VerifiableCredential = credential.VerifiableCredential // You need to pass the current credential object
        };

        var updateResult = await Mediator.Send(updateRequest);

        if (updateResult.IsSuccess)
        {
            // Update the local list of credentials to reflect the change
            var updatedCredential = credentials.FirstOrDefault(c => c.CredentialId == credential.CredentialId);
            if (updatedCredential != null)
            {
                updatedCredential.Status = EBuilderCredentialStatus.Declined;
            }
            // Refresh the state of the component
            StateHasChanged();
        }
        else
        {
            // Handle error
            Console.WriteLine("Error declining credential: " + updateResult.Errors.First().Message);
        }
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
        {
            return text;
        }
        return text.Substring(0, maxLength) + "...";
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.WaitingAcceptance => "bg-blue-200 text-blue-800",
            EBuilderCredentialStatus.RequestSent => "bg-orange-200 text-orange-800",
            EBuilderCredentialStatus.CredentialReceived => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Revoked => "bg-red-200 text-red-800",
            EBuilderCredentialStatus.Expired => "bg-gray-200 text-gray-800",
            EBuilderCredentialStatus.Approved => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Pending => "bg-yellow-200 text-yellow-800",
            EBuilderCredentialStatus.Declined => "bg-red-200 text-red-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private string GetStatusText(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.WaitingAcceptance => "Waiting Acceptance",
            EBuilderCredentialStatus.RequestSent => "Request Sent",
            EBuilderCredentialStatus.CredentialReceived => "Credential Received",
            EBuilderCredentialStatus.Revoked => "Revoked",
            EBuilderCredentialStatus.Expired => "Expired",
            EBuilderCredentialStatus.Approved => "Approved",
            EBuilderCredentialStatus.Pending => "Pending",
            EBuilderCredentialStatus.Declined => "Declined",
            _ => "Unknown",
        };
    }
}
