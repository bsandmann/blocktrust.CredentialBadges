@page "/admin"
@page "/admin/{*pageRoute}"
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetAllBuilderCredentials
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.UpdateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using MediatR
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout AdminLayout
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable

<PageTitle>@GetBrowserPageTitle()</PageTitle>

<AuthorizeView Roles="adminRole">
    <div class="max-w-4xl mx-auto px-4 py-8">
        @if (IsCurrentPage("dashboard"))
        {
            <h2 class="text-2xl font-bold">Dashboard</h2>
            <p>Welcome to the admin dashboard!</p>

            <div class="flex mt-4 gap-4 mb-4">
                <div class="bg-white p-4 w-full rounded shadow-md border border-gray-300">
                    <h3 class="text-xl font-semibold text-gray-800">Total Approved</h3>
                    <p class="text-3xl font-bold text-green-600">@totalApproved</p>
                </div>
                <div class="bg-white w-full p-4 rounded shadow-md border border-gray-300">
                    <h3 class="text-xl font-semibold text-gray-800">Total Pending</h3>
                    <p class="text-3xl font-bold text-yellow-600">@totalPending</p>
                </div>
            </div>

            <h3 class="text-xl font-bold">Recent requests</h3>
        }
        else
        {
            <h2 class="text-2xl font-bold">@GetPageTitle()</h2>
            <p class="text-gray-600 mb-4">@GetPageDescription()</p>
        }
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white border border-gray-300 rounded md:w-full">
                <thead>
                    <tr class="bg-slate-100">
                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var credential in FilteredCredentials())
                    {
                        <tr class="border-t border-gray-300">
                            <td class="px-6 py-4 whitespace-nowrap">@credential.Date.ToShortDateString()</td>
                            <td class="px-6 py-4 whitespace-nowrap" title="@credential.Label">@TruncateText(credential.Label, 20)</td>
                            <td class="px-6 py-4 whitespace-nowrap" title="@credential.SubjectDid">@TruncateText(credential.SubjectDid, 20)</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="@GetStatusClass(credential.Status) px-2 py-1 rounded-full text-xs">@GetStatusText(credential.Status)</span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap flex space-x-2">
                                @if (credential.Status == EBuilderCredentialStatus.Pending)
                                {
                                    <button class="bg-red-500 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-red-600" 
                                            @onclick="() => DeclineCredential(credential)">
                                        Decline
                                    </button>
                                }
                                <button class="bg-slate-700 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-slate-800" 
                                        @onclick="() => ViewCredential(credential)">
                                    View
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</AuthorizeView>

@code {
    private List<BuilderCredential> credentials = new();
    private int totalApproved;
    private int totalPending;

    [Parameter]
    public string PageRoute { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        await LoadCredentials();
        await UpdatePageTitle();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCredentials();
        await UpdatePageTitle();
        StateHasChanged();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await LoadCredentials();
            await UpdatePageTitle();
            StateHasChanged();
        });
    }

    private async Task UpdatePageTitle()
    {
        var title = GetBrowserPageTitle();
        if (!string.IsNullOrWhiteSpace(title))
        {
            await JSRuntime.InvokeVoidAsync("updatePageTitle", title);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task LoadCredentials()
    {
        if (credentials.Count == 0)
        {
            var result = await Mediator.Send(new GetAllBuilderCredentialsRequest());
            if (result.IsSuccess)
            {
                credentials = result.Value;
            }
            else
            {
                Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
            }
        }

        totalApproved = credentials.Count(c => c.Status != EBuilderCredentialStatus.Pending && c.Status != EBuilderCredentialStatus.Declined);
        totalPending = credentials.Count(c => c.Status == EBuilderCredentialStatus.Pending);
    }

    private IEnumerable<BuilderCredential> FilteredCredentials()
    {
        if (IsCurrentPage("requests/pending"))
            return credentials.Where(c => c.Status == EBuilderCredentialStatus.Pending);
        if (IsCurrentPage("requests/approved"))
            return credentials.Where(c => c.Status != EBuilderCredentialStatus.Pending && c.Status != EBuilderCredentialStatus.Declined);
        if (IsCurrentPage("requests/declined"))
            return credentials.Where(c => c.Status == EBuilderCredentialStatus.Declined);
        if (IsCurrentPage("dashboard"))
            return credentials.OrderByDescending(c => c.Date).Take(5);
        return credentials;
    }

    private async Task DeclineCredential(BuilderCredential credential)
    {
        var updateRequest = new UpdateBuilderCredentialRequest
        {
            CredentialId = credential.CredentialId,
            Status = EBuilderCredentialStatus.Declined,
            VerifiableCredential = credential.VerifiableCredential
        };

        var updateResult = await Mediator.Send(updateRequest);

        if (updateResult.IsSuccess)
        {
            credential.Status = EBuilderCredentialStatus.Declined;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error declining credential: " + updateResult.Errors.First().Message);
        }
    }

    private void ViewCredential(BuilderCredential credential)
    {
        NavigationManager.NavigateTo($"/admin/requests/{credential.CredentialId}");
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;
        return text.Substring(0, maxLength) + "...";
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.WaitingAcceptance => "bg-blue-200 text-blue-800",
            EBuilderCredentialStatus.RequestSent => "bg-orange-200 text-orange-800",
            EBuilderCredentialStatus.CredentialReceived => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Revoked => "bg-red-200 text-red-800",
            EBuilderCredentialStatus.Expired => "bg-gray-200 text-gray-800",
            EBuilderCredentialStatus.Approved => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Pending => "bg-yellow-200 text-yellow-800",
            EBuilderCredentialStatus.Declined => "bg-red-200 text-red-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private string GetStatusText(EBuilderCredentialStatus status)
    {
        return status.ToString();
    }

    private bool IsCurrentPage(string route)
    {
        return PageRoute?.Equals(route, StringComparison.OrdinalIgnoreCase) ?? false;
    }

    private string GetBrowserPageTitle()
    {
        var baseTitle = "Blocktrust Credentials Admin - ";
        return (PageRoute?.ToLower() ?? "") switch
        {
            "dashboard" => baseTitle + "Dashboard",
            "requests" => baseTitle + "All Requests",
            "requests/pending" => baseTitle + "Pending Requests",
            "requests/approved" => baseTitle + "Approved Requests",
            "requests/declined" => baseTitle + "Declined Requests",
            _ => baseTitle + "Requests"
        };
    }

    private string GetPageTitle()
    {
        return (PageRoute?.ToLower() ?? "") switch
        {
            "requests" => "Requests",
            "requests/pending" => "Pending Requests",
            "requests/approved" => "Approved Requests",
            "requests/declined" => "Declined Requests",
            _ => "Requests"
        };
    }

    private string GetPageDescription()
    {
        return (PageRoute?.ToLower() ?? "") switch
        {
            "requests" => "Manage all requests here.",
            "requests/pending" => "Manage pending requests here.",
            "requests/approved" => "Manage approved requests here.",
            "requests/declined" => "Manage declined requests here.",
            _ => "Manage requests here."
        };
    }
}