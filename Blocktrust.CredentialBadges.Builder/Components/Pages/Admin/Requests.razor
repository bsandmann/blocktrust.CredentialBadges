@page "/admin/dashboard"
@page "/admin/requests"
@page "/admin/requests/pending"
@page "/admin/requests/approved"
@page "/admin/requests/declined"
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetAllBuilderCredentials
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.UpdateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using MediatR
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@layout AdminLayout
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@implements IDisposable

            <AuthorizeView Roles="adminRole">

                <div class="max-w-4xl mx-auto px-4 py-8">
                    @if (IsCurrentPage("/admin/dashboard"))
                    {
                        <h2 class="text-2xl font-bold">Dashboard</h2>
                        <p>Welcome to the admin dashboard!</p>

                        <div class="flex px-2.5 gap-4 mb-4">
                            <div class="bg-white p-4 w-full rounded shadow-md border border-gray-300">
                                <h3 class="text-xl font-semibold text-gray-800">Total Approved</h3>
                                <p class="text-3xl font-bold text-green-600">@totalApproved</p>
                            </div>
                            <div class="bg-white w-full p-4 rounded shadow-md border border-gray-300">
                                <h3 class="text-xl font-semibold text-gray-800">Total Pending</h3>
                                <p class="text-3xl font-bold text-yellow-600">@totalPending</p>
                            </div>
                        </div>
        
                        <h3 class="text-xl font-bold">Recent requests</h3>

                    }
                    else
                    {
                        <h2 class="text-2xl font-bold">@GetPageTitle()</h2>
                        <p class="text-gray-600 mb-4">@GetPageDescription()</p>
                    }

                    <table class="w-full bg-white border border-gray-300 rounded">
                        <thead>
                        <tr class="bg-slate-100">
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var credential in FilteredCredentials())
                        {
                            <tr class="border-t border-gray-300">
                                <td class="px-6 py-4 whitespace-nowrap">@credential.Date.ToShortDateString()</td>
                                <td class="px-6 py-4 whitespace-nowrap" title="@credential.Label">@TruncateText(credential.Label, 20)</td>
                                <td class="px-6 py-4 whitespace-nowrap" title="@credential.SubjectDid">@TruncateText(credential.SubjectDid, 20)</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="@GetStatusClass(credential.Status) px-2 py-1 rounded-full text-xs">@GetStatusText(credential.Status)</span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap flex space-x-2">
                                    @if (credential.Status == EBuilderCredentialStatus.Pending)
                                    {
                                        <button class="bg-red-500 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-red-600" 
                                                @onclick="() => DeclineCredential(credential)">
                                            Decline
                                        </button>
                                    }
                                  
                        
                        
                                    <button class="bg-slate-700 text-white px-3 py-1 rounded-md text-sm font-medium hover:bg-slate-800" 
                                            @onclick="() => ViewCredential(credential)">
                                        View
                                    </button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
                </AuthorizeView>

            @code {
    private List<BuilderCredential> credentials = new();
    private int totalApproved;
    private int totalPending;

    [Parameter]
    public string CurrentRoute { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentRoute = NavigationManager.Uri;
        NavigationManager.LocationChanged += HandleLocationChanged;
        await LoadCredentials();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentRoute != NavigationManager.Uri)
        {
            CurrentRoute = NavigationManager.Uri;
            await LoadCredentials();
            StateHasChanged();
        }
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        CurrentRoute = e.Location;
        await LoadCredentials();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task LoadCredentials()
    {
        if (credentials.Count == 0)
        {
            var result = await Mediator.Send(new GetAllBuilderCredentialsRequest());
            if (result.IsSuccess)
            {
                credentials = result.Value;
            }
            else
            {
                Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
            }
        }

        totalApproved = credentials.Count(c => c.Status != EBuilderCredentialStatus.Pending && c.Status != EBuilderCredentialStatus.Declined);
        totalPending = credentials.Count(c => c.Status == EBuilderCredentialStatus.Pending);
    }

    private IEnumerable<BuilderCredential> FilteredCredentials()
    {
        if (IsCurrentPage("/admin/requests/pending"))
            return credentials.Where(c => c.Status == EBuilderCredentialStatus.Pending);
        else if (IsCurrentPage("/admin/requests/approved"))
            return credentials.Where(c => c.Status != EBuilderCredentialStatus.Pending && c.Status != EBuilderCredentialStatus.Declined);
        else if (IsCurrentPage("/admin/requests/declined"))
            return credentials.Where(c => c.Status == EBuilderCredentialStatus.Declined);
        else if (IsCurrentPage("/admin/dashboard"))
            return credentials.OrderByDescending(c => c.Date).Take(5);
        else
            return credentials;
    }

    private async Task DeclineCredential(BuilderCredential credential)
    {
        var updateRequest = new UpdateBuilderCredentialRequest
        {
            CredentialId = credential.CredentialId,
            Status = EBuilderCredentialStatus.Declined,
            VerifiableCredential = credential.VerifiableCredential
        };

        var updateResult = await Mediator.Send(updateRequest);

        if (updateResult.IsSuccess)
        {
            credential.Status = EBuilderCredentialStatus.Declined;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error declining credential: " + updateResult.Errors.First().Message);
        }
    }

    private void ViewCredential(BuilderCredential credential)
    {
        NavigationManager.NavigateTo($"/admin/requests/{credential.CredentialId}");
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;
        return text.Substring(0, maxLength) + "...";
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.WaitingAcceptance => "bg-blue-200 text-blue-800",
            EBuilderCredentialStatus.RequestSent => "bg-orange-200 text-orange-800",
            EBuilderCredentialStatus.CredentialReceived => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Revoked => "bg-red-200 text-red-800",
            EBuilderCredentialStatus.Expired => "bg-gray-200 text-gray-800",
            EBuilderCredentialStatus.Approved => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Pending => "bg-yellow-200 text-yellow-800",
            EBuilderCredentialStatus.Declined => "bg-red-200 text-red-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private string GetStatusText(EBuilderCredentialStatus status)
    {
        return status.ToString();
    }

    private bool IsCurrentPage(string route)
    {
        return CurrentRoute.EndsWith(route);
    }

    private string GetPageTitle()
    {
        if (IsCurrentPage("/admin/requests")) return "Requests";
        if (IsCurrentPage("/admin/requests/pending")) return "Pending Requests";
        if (IsCurrentPage("/admin/requests/approved")) return "Approved Requests";
        if (IsCurrentPage("/admin/requests/declined")) return "Declined Requests";
        return "Requests";
    }

    private string GetPageDescription()
    {
        if (IsCurrentPage("/admin/requests")) return "Manage all requests here.";
        if (IsCurrentPage("/admin/requests/pending")) return "Manage pending requests here.";
        if (IsCurrentPage("/admin/requests/approved")) return "Manage approved requests here.";
        if (IsCurrentPage("/admin/requests/declined")) return "Manage declined requests here.";
        return "Manage requests here.";
    }
}