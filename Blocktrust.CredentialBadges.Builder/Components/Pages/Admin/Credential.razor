@page "/admin/requests/{CredentialId:guid}"
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetBuilderCredentialById
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.UpdateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using MediatR
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.ApproveBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using Microsoft.Extensions.Configuration
@inject IMediator Mediator
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IConfiguration Configuration
@layout AdminLayout

<PageTitle>Blocktrust Credentials Admin</PageTitle>

<div class="max-w-5xl mx-auto px-4 py-8">
    <h2 class="text-3xl font-bold text-gray-900 mb-6">Credential Details</h2>

    @if (_isLoading)
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-2xl font-semibold">Loading Credential...</h3>
            </div>
            <div class="flex justify-center items-center h-48">
                <div class="loader">Loading...</div>
            </div>
            <p class="text-gray-600 text-center mt-4">Please wait while we fetch the credential details.</p>
        </div>
    }
    else if (_credential == null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">Credential not found.</span>
        </div>
    }
    else
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-2xl font-semibold">@_credential.Label</h3>
                <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center" @onclick="() => CopyToClipboard(_fullUrl)">
                    <span class="material-symbols-outlined mr-2">content_copy</span> Copy Credential URL
                </button>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Subject DID</strong>
                    <div class="flex items-center">
                        <p class="text-gray-800 truncate w-3/4" title="@_credential.SubjectDid">@_credential.SubjectDid</p>
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(_credential.SubjectDid)">
                            <span class="material-symbols-outlined">content_copy</span>
                        </button>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Status:</strong>
                    <span class="inline-block px-3 py-1 text-sm font-medium leading-5 rounded-full @(GetStatusClass(_credential.Status))">@_credential.Status</span>
                </div>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg border border-gray-300 mb-6">
                <strong class="block text-gray-600 mb-2 text-lg">Credential Subject:</strong>
                <div class="space-y-2">
                    @foreach (var field in ParseCredentialSubject(_credential.CredentialSubject))
                    {
                        if (field.Key == "Image" && !string.IsNullOrEmpty(field.Value))
                        {
                            <div class="flex items-center">
                                <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                                <img src="data:image/png;base64, @field.Value" alt="Credential Image" class="w-24 h-auto rounded border border-gray-300"/>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center">
                                <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                                <span class="text-gray-800 w-3/4 truncate" title="@field.Value">@field.Value</span>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="text-right flex gap-4">
                @if (_credential.Status == EBuilderCredentialStatus.Pending)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 mr-2 flex items-center hover:bg-slate-500" @onclick="ApproveCredential">
                        <span class="material-symbols-outlined mr-2">check</span> Approve
                    </button>
                    <button class="bg-red-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500" @onclick="DeclineCredential">
                        <span class="material-symbols-outlined mr-2">close</span> Decline
                    </button>
                }
                @if (_credential.Status == EBuilderCredentialStatus.RequestSent)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center mr-2 hover:bg-slate-500 opacity-10" disabled>
                        <span class="material-symbols-outlined mr-2">content_copy</span> Copy JSON
                    </button>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500  opacity-10" disabled>
                        <span class="material-symbols-outlined mr-2">code</span> Generate Snippet
                    </button>
                }
                @if (_credential.Status == EBuilderCredentialStatus.CredentialReceived)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center mr-2 hover:bg-slate-500" @onclick="CopyToClipboard">
                        <span class="material-symbols-outlined mr-2">content_copy</span> Copy Credential
                    </button>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500" @onclick="GenerateSnippet">
                        <span class="material-symbols-outlined mr-2">code</span> Generate Snippet
                    </button>
                }
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4" role="alert">
                    <span class="block sm:inline">@_errorMessage</span>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid CredentialId { get; set; }

    private BuilderCredential _credential;
    private string _fullUrl;
    private bool _isLoading = true;
    private string? _errorMessage;
    
    private string? _snippetsUrl;

    protected override async Task OnInitializedAsync()
    {
        _snippetsUrl = Configuration["AppSettings:SnippetsUrl"];
        _fullUrl = GenerateFullUrl();
        await FetchCredentialDetails();
        _isLoading = false;
        StateHasChanged();
    }

    private async Task FetchCredentialDetails()
    {
        var result = await Mediator.Send(new GetBuilderCredentialByIdRequest(CredentialId));

        if (result.IsSuccess)
        {
            _credential = result.Value;
        }
        else
        {
            _credential = null;
            _errorMessage = "Error fetching credential details.";
        }
    }

    private string GenerateFullUrl()
    {
        return NavigationManager.ToAbsoluteUri($"/admin/requests/{CredentialId}").ToString();
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task ApproveCredential()
    {
        var request = new ApproveBuilderCredentialRequest
        {
            CredentialId = _credential.CredentialId,
        };

        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            _credential.Status = EBuilderCredentialStatus.Approved;
            _errorMessage = string.Empty;
            StateHasChanged();
        }
        else
        {
            _errorMessage = "Error approving the credential.";
        }
    }

    private async Task DeclineCredential()
    {
        var request = new UpdateBuilderCredentialRequest
        {
            CredentialId = _credential.CredentialId,
            Status = EBuilderCredentialStatus.Declined,
        };

        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            _credential.Status = EBuilderCredentialStatus.Declined;
            _errorMessage = string.Empty;
            StateHasChanged();
        }
        else
        {
            _errorMessage = "Error declining the credential.";
        }
    }

    private void CopyToClipboard()
    {
        //builder credential json
        CopyToClipboard(_credential.VerifiableCredential);
    }

    private void GenerateSnippet()
    {
        NavigationManager.NavigateTo(_snippetsUrl);
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.Pending => "bg-yellow-100 text-yellow-800",
            EBuilderCredentialStatus.Approved => "bg-green-100 text-green-800",
            EBuilderCredentialStatus.Declined => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private IEnumerable<KeyValuePair<string, string>> ParseCredentialSubject(string credentialSubject)
    {
        var json = Newtonsoft.Json.Linq.JObject.Parse(credentialSubject);
        var fields = new Dictionary<string, string>();

        foreach (var property in json.Properties())
        {
            fields[property.Name] = property.Value.ToString();
        }

        return fields;
    }
}