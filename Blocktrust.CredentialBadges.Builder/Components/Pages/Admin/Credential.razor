@page "/credentials/{CredentialId:guid}"
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetBuilderCredentialById
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using MediatR
@inject IMediator Mediator
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="max-w-5xl mx-auto px-4 py-8">
    <h2 class="text-3xl font-bold text-gray-900 mb-6">Credential Details</h2>

    @if (isLoading)
    {
        <div class="flex justify-center items-center h-48">
            <div class="loader">Loading...</div>
        </div>
    }
    else if (credential == null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">Credential not found.</span>
        </div>
    }
    else
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <h3 class="text-2xl font-semibold mb-4">@credential.Label</h3>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Subject DID</strong>
                    <div class="flex items-center">
                        <p class="text-gray-800 truncate w-3/4" title="@credential.SubjectDid">@credential.SubjectDid</p>
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(credential.SubjectDid)">
                            <span class="material-icons">content_copy</span>
                        </button>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Status:</strong>
                    <span class="inline-block px-3 py-1 text-sm font-medium leading-5 rounded-full @(GetStatusClass(credential.Status))">@credential.Status</span>
                </div>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg border border-gray-300 mb-6">
                <strong class="block text-gray-600 mb-2 text-lg">Credential Subject:</strong>
                <div class="space-y-2">
                    @foreach (var field in ParseCredentialSubject(credential.CredentialSubject))
                    {
                        <div class="flex items-center">
                            <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                            <span class="text-gray-800 w-3/4 truncate" title="@field.Value">@field.Value</span>
                        </div>
                    }
                </div>
            </div>

            <div class="text-right">
                <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center mt-4r" @onclick="() => CopyToClipboard(fullUrl)">
                    <span class="material-icons mr-2">content_copy</span> Copy Credential URL
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid CredentialId { get; set; }

    private BuilderCredential credential;
    private string fullUrl;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await FetchCredentialDetails();
        fullUrl = GenerateFullUrl();
        isLoading = false;
        StateHasChanged();
    }

    private async Task FetchCredentialDetails()
    {
        var result = await Mediator.Send(new GetBuilderCredentialByIdRequest(CredentialId));

        if (result.IsSuccess)
        {
            credential = result.Value;
        }
        else
        {
            credential = null;
        }
    }

    private string GenerateFullUrl()
    {
        return $"/credentials/{CredentialId}";
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.Pending => "bg-yellow-100 text-yellow-800",
            EBuilderCredentialStatus.Approved => "bg-green-100 text-green-800",
            EBuilderCredentialStatus.Declined => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private IEnumerable<KeyValuePair<string, string>> ParseCredentialSubject(string credentialSubject)
    {
        var fields = credentialSubject.Split(new[] { ", " }, StringSplitOptions.None);
        foreach (var field in fields)
        {
            var parts = field.Split(new[] { ": " }, StringSplitOptions.None);
            if (parts.Length == 2 && !string.IsNullOrEmpty(parts[0]) && !string.IsNullOrEmpty(parts[1]))
            {
                yield return new KeyValuePair<string, string>(parts[0], parts[1]);
            }
        }
    }
}
