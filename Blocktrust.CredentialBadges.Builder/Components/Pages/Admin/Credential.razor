@page "/admin/requests/{CredentialId:guid}"
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetBuilderCredentialById
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.ApproveBuilderCredential
@* @using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.DeclineBuilderCredential *@
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using MediatR
@inject IMediator Mediator
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="max-w-5xl mx-auto px-4 py-8">
    <h2 class="text-3xl font-bold text-gray-900 mb-6">Credential Details</h2>

    @if (isLoading)
    {
        <div class="flex justify-center items-center h-48">
            <div class="loader">Loading...</div>
        </div>
    }
    else if (credential == null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">Credential not found.</span>
        </div>
    }
    else
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-2xl font-semibold">@credential.Label</h3>
                <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center" @onclick="() => CopyToClipboard(fullUrl)">
                    <span class="material-icons mr-2">content_copy</span> Copy Credential URL
                </button>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Subject DID</strong>
                    <div class="flex items-center">
                        <p class="text-gray-800 truncate w-3/4" title="@credential.SubjectDid">@credential.SubjectDid</p>
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(credential.SubjectDid)">
                            <span class="material-icons">content_copy</span>
                        </button>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Status:</strong>
                    <span class="inline-block px-3 py-1 text-sm font-medium leading-5 rounded-full @(GetStatusClass(credential.Status))">@credential.Status</span>
                </div>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg border border-gray-300 mb-6">
                <strong class="block text-gray-600 mb-2 text-lg">Credential Subject:</strong>
                <div class="space-y-2">
                    @foreach (var field in ParseCredentialSubject(credential.CredentialSubject))
                    {
                        <div class="flex items-center">
                            <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                            <span class="text-gray-800 w-3/4 truncate" title="@field.Value">@field.Value</span>
                        </div>
                    }
                </div>
            </div>

            <div class="text-right flex gap-4">
                @if (credential.Status == EBuilderCredentialStatus.Pending)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 mr-2 flex items-center" @onclick="ApproveCredential">
                        <span class="material-icons mr-2">check</span> Approve
                    </button>
                    <button class="bg-red-600 text-white px-4 py-2 rounded flex items-center" @onclick="DeclineCredential">
                        <span class="material-icons mr-2">close</span> Decline
                    </button>
                }
                @if (credential.Status == EBuilderCredentialStatus.RequestSent)
                {
                    <button class="bg-blue-600 text-white px-4 py-2 rounded flex items-center mr-2" @onclick="CopyJsonToClipboard" disabled>
                        <span class="material-icons mr-2">content_copy</span> Copy JSON
                    </button>
                }
                @if (credential.Status == EBuilderCredentialStatus.CredentialReceived)
                {
                    <button class="bg-blue-600 text-white px-4 py-2 rounded flex items-center mr-2" @onclick="CopyJsonToClipboard">
                        <span class="material-icons mr-2">content_copy</span> Copy JSON
                    </button>
                    <button class="bg-blue-600 text-white px-4 py-2 rounded flex items-center" @onclick="GenerateSnippet">
                        <span class="material-icons mr-2">code</span> Generate Snippet
                    </button>
                }
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4" role="alert">
                    <span class="block sm:inline">@errorMessage</span>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid CredentialId { get; set; }

    private BuilderCredential credential;
    private string fullUrl;
    private bool isLoading = true;
    private string errorMessage;
    private string jsonContent;
    
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchCredentialDetails();
        fullUrl = GenerateFullUrl();
        isLoading = false;
        StateHasChanged();
    }

    private async Task FetchCredentialDetails()
    {
        var result = await Mediator.Send(new GetBuilderCredentialByIdRequest(CredentialId));

        if (result.IsSuccess)
        {
            credential = result.Value;
            jsonContent = credential.CredentialSubject; // Assuming this is where the JSON is located
        }
        else
        {
            credential = null;
            errorMessage = "Error fetching credential details.";
        }
    }

    private string GenerateFullUrl()
    {
        return $"/admin/requests/{CredentialId}";
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task ApproveCredential()
    {
        var result = await Mediator.Send(new ApproveBuilderCredentialRequest { CredentialId = CredentialId });

        // if (result)
        // {
        //     credential.Status = EBuilderCredentialStatus.Approved;
        //     errorMessage = string.Empty;
        //     StateHasChanged();
        // }
        // else
        // {
        //     errorMessage = "Error approving the credential.";
        // }
    }

    private async Task DeclineCredential()
    {
        // var result = await Mediator.Send(new DeclineBuilderCredentialRequest { CredentialId = CredentialId });
        //
        // if (result.IsSuccess)
        // {
        //     credential.Status = EBuilderCredentialStatus.Declined;
        //     errorMessage = string.Empty;
        //     StateHasChanged();
        // }
        // else
        // {
        //     errorMessage = "Error declining the credential.";
        // }
    }

    private void CopyJsonToClipboard()
    {
        if (!string.IsNullOrEmpty(jsonContent))
        {
            JS.InvokeVoidAsync("navigator.clipboard.writeText", jsonContent);
        }
        else
        {
            errorMessage = "No JSON content available to copy.";
        }
    }

    private void GenerateSnippet()
    {
        // Redirect to snippet page with the CredentialId
        NavigationManager.NavigateTo($"/snippets/{CredentialId}");
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.Pending => "bg-yellow-100 text-yellow-800",
            EBuilderCredentialStatus.Approved => "bg-green-100 text-green-800",
            EBuilderCredentialStatus.Declined => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private IEnumerable<KeyValuePair<string, string>> ParseCredentialSubject(string credentialSubject)
    {
        var fields = credentialSubject.Split(new[] { ", " }, StringSplitOptions.None);
        foreach (var field in fields)
        {
            var parts = field.Split(new[] { ": " }, StringSplitOptions.None);
            if (parts.Length == 2 && !string.IsNullOrEmpty(parts[0]) && !string.IsNullOrEmpty(parts[1]))
            {
                yield return new KeyValuePair<string, string>(parts[0], parts[1]);
            }
        }
    }
}
