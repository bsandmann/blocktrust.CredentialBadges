@page "/new-credential"
@using System.ComponentModel.DataAnnotations
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.CreateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Services
@using Blocktrust.CredentialBadges.OpenBadges
@using Blocktrust.CredentialBadges.OpenBadges.Enums
@using FluentResults
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IMediator Mediator
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="max-w-full mx-8 p-6 bg-white rounded-lg">
    <h3 class="text-2xl font-bold text-gray-800 mb-6">New Credential</h3>

    @if (!isDataLoaded)
    {
        <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6 rounded-md" role="alert">
            <p class="font-bold">Action Required</p>
            <p>To create a new credential, you need to establish a connection with the agent first.</p>
            <a href="/connections" class="text-blue-600 hover:text-blue-800 underline mt-2 inline-block">Go to connection page</a>
        </div>
    }
    else
    {
        <p class="text-gray-600 mb-8">Create a verifiable Open Badge credential and share it for signing.</p>

        <EditForm Model="@credentialModel" OnValidSubmit="CreateCredential" class="space-y-6">
            <DataAnnotationsValidator />

            <div>
                <label for="label" class="block text-sm font-medium text-gray-700 mb-1">Label</label>
                <InputText id="label" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                           @bind-Value="credentialModel.Label" placeholder="Label to easily identify the credential" />
                <ValidationMessage For="@(() => credentialModel.Label)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="achievementType" class="block text-sm font-medium text-gray-700 mb-1">Achievement Type</label>
                <InputSelect id="achievementType" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                             @bind-Value="credentialModel.AchievementType">
                    @foreach (var type in Enum.GetValues(typeof(EAchievementType)))
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => credentialModel.AchievementType)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                <InputText id="name" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                           @bind-Value="credentialModel.Name" placeholder="Name of the credential" />
                <ValidationMessage For="@(() => credentialModel.Name)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <InputTextArea id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                               @bind-Value="credentialModel.Description" placeholder="Detailed description of the credential" />
                <ValidationMessage For="@(() => credentialModel.Description)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="criteria" class="block text-sm font-medium text-gray-700 mb-1">Criteria</label>
                <InputTextArea id="criteria" rows="3" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                               @bind-Value="credentialModel.Criteria" placeholder="Criteria for earning this credential" />
                <ValidationMessage For="@(() => credentialModel.Criteria)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="image" class="block text-sm font-medium text-gray-700 mb-1">Image (Optional)</label>
                <InputFile id="image" OnChange="UploadImage" class="mt-1 block w-full text-sm text-gray-500
                        file:mr-4 file:py-2 file:px-4
                        file:rounded-md file:border-0
                        file:text-sm file:font-semibold
                        file:bg-indigo-50 file:text-indigo-700
                        hover:file:bg-indigo-100" />
            </div>

            @if (!string.IsNullOrEmpty(credentialModel.Image))
            {
                <div class="mt-2">
                    <img src="@($"data:image/png;base64,{credentialModel.Image}")" alt="Uploaded Image" class="w-32 h-32 object-cover rounded-md border border-gray-300" />
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="p-4 rounded-md @(isSuccess ? "bg-green-50 text-green-800 border border-green-300" : "bg-red-50 text-red-800 border border-red-300")">
                    @message
                </div>
            }

            <div class="flex justify-end space-x-4">
                <button type="button" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md bg-white text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        @onclick="CloseForm">
                    Close
                </button>
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md bg-slate-700 text-white hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        disabled="@(isProcessing || !isDataLoaded)">
                    @if (isProcessing)
                    {
                        <span class="mr-2">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Create Credential</span>
                    }
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    private CredentialModel credentialModel = new();
    private bool isProcessing = false;
    private string message = "";
    private bool isSuccess = false;
    private bool isDataLoaded = false;

    private string subjectDid;
    private string issuerDid = "issuerDid"; // Left as is for now
    private Guid subjectConnectionId;
    private Guid issuerConnectionId;

    [Parameter]
    public EventCallback OnCredentialCreated { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadStoredData();
    }

    private async Task LoadStoredData()
    {
        subjectDid = await JS.InvokeAsync<string>("localStorage.getItem", "did");
        var subjectConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "acceptConnectionId");
        var issuerConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "initializeConnectionId");

        isDataLoaded = !string.IsNullOrEmpty(subjectDid) &&
                       !string.IsNullOrEmpty(subjectConnectionIdStr) &&
                       !string.IsNullOrEmpty(issuerConnectionIdStr) &&
                       Guid.TryParse(subjectConnectionIdStr, out subjectConnectionId) &&
                       Guid.TryParse(issuerConnectionIdStr, out issuerConnectionId);

        if (!isDataLoaded)
        {
            message = "Required data not found in local storage. Please complete the necessary setup steps.";
        }
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.ContentType != "image/png" && file.ContentType != "image/jpeg" && file.ContentType != "image/gif")
            {
                message = "Invalid image type. Please upload a PNG, JPEG, or GIF image.";
                credentialModel.Image = "";
                return;
            }

            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5 MB limit
                credentialModel.Image = await ImageProcessingService.ProcessImageAsync(stream, file.ContentType, 100, 100);
                message = ""; // Clear error message if upload is successful
            }
            catch (Exception ex)
            {
                message = $"Error processing image: {ex.Message}";
                credentialModel.Image = "";
            }
        }
    }

    private async Task CreateCredential()
    {
        if (!isDataLoaded)
        {
            message = "Cannot create credential. Required data is missing.";
            return;
        }

        isProcessing = true;
        message = "";

        var date = DateTime.UtcNow;

        // Get the user's name from the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity?.Name;

        var credentialSubject = new
        {
            AchievementType = credentialModel.AchievementType.ToString(),
            credentialModel.Name,
            credentialModel.Description,
            credentialModel.Criteria,
            credentialModel.Image
        };

        var request = new CreateBuilderCredentialRequest
        {
            Date = date,
            Label = credentialModel.Label,
            SubjectDid = subjectDid,
            IssuerDid = issuerDid,
            Status = EBuilderCredentialStatus.Pending,
            IssuerConnectionId = issuerConnectionId,
            SubjectConnectionId = subjectConnectionId,
            CredentialSubject = System.Text.Json.JsonSerializer.Serialize(credentialSubject),
            UserId = userId
        };

        var result = await Mediator.Send<Result<BuilderCredential>>(request);

        if (result.IsSuccess)
        {
            await OnCredentialCreated.InvokeAsync();
            isSuccess = true;
            message = "Credential created successfully.";
            credentialModel = new CredentialModel(); // Reset the form
        }
        else
        {
            isSuccess = false;
            message = $"Failed to create credential: {result.Errors.First().Message}";
        }

        isProcessing = false;
    }

    private async Task CloseForm()
    {
        await OnClose.InvokeAsync();
    }

    public class CredentialModel
    {
        [Required(ErrorMessage = "Label is required.")]
        [StringLength(100, ErrorMessage = "Label must be at most 100 characters long.")]
        public string Label { get; set; } = "";

        [Required(ErrorMessage = "Achievement Type is required.")]
        public EAchievementType AchievementType { get; set; } = EAchievementType.Diploma;

        [Required(ErrorMessage = "Name is required.")]
        [StringLength(200, ErrorMessage = "Name must be at most 200 characters long.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Description is required.")]
        [StringLength(1000, ErrorMessage = "Description must be at most 1000 characters long.")]
        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Criteria is required.")]
        [StringLength(500, ErrorMessage = "Criteria must be at most 500 characters long.")]
        public string Criteria { get; set; } = "";

        public string Image { get; set; } = "";
    }
}