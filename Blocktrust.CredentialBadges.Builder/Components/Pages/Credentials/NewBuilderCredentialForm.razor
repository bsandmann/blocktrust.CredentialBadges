@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.CreateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using FluentResults
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@inject IMediator Mediator
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@namespace Blocktrust.CredentialBadges.Builder.Components.Pages.Credentials

<div class="flex flex-col min-h-[70vh] space-y-6 ">
    <h3 class="text-xl font-semibold text-gray-800 mb-4">New Credential</h3>

    @if (!isDataLoaded)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline"> Required data not found. Please ensure you have made a connection.</span>
        </div>
    }
    else
    {
        <div class="flex-grow space-y-6 max-h-[55vh] overflow-y-scroll px-4 ">
            <div class="flex items-center space-x-4 mt-8 ">
                <label class="text-gray-600 font-medium w-24">Label:</label>
                <input type="text" class="border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-slate-600" @bind="label" />
            </div>
            
                            <div class="text-gray-600 font-medium w-48">Credential Subject:</div>


            @foreach (var field in credentialFields)
            {
                <div class="flex items-center space-x-4">
                    <input type="text" class="border border-gray-300 rounded px-3 py-2 w-1/2 focus:outline-none focus:ring-2 focus:ring-slate-600" @bind="field.Key" placeholder="Key" />
                    <input type="text" class="border border-gray-300 rounded px-3 py-2 w-1/2 focus:outline-none focus:ring-2 focus:ring-slate-600" @bind="field.Value" placeholder="Value" />
                    <button class="text-slate-600 hover:text-slate-800" @onclick="() => RemoveField(field)">
                        <span class="material-icons">close</span>
                    </button>
                </div>
            }

            <button class="text-slate-600 hover:text-slate-800 flex items-center" @onclick="AddField">
                <span class="material-icons mr-2">add</span> Add Field
            </button>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="mt-4 p-4 rounded @(isSuccess ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                    @message
                </div>
            }
        </div>

        <div class="flex justify-end mt-auto pt-6">
            <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center" @onclick="CreateCredential" disabled="@(isProcessing || !isDataLoaded)">
                @if (isProcessing)
                {
                    <span class="material-icons animate-spin mr-2">refresh</span>
                    <span>Processing...</span>
                }
                else
                { <span>Create Credential</span>
                }
            </button>
        </div>
    }
</div>

@code {
    private string label = "";
    private List<KeyValueModel> credentialFields = new List<KeyValueModel>();
    private bool isProcessing = false;
    private string message = "";
    private bool isSuccess = false;
    private bool isDataLoaded = false;

    private string subjectDid;
    private string issuerDid = "issuerDid"; // Left as is for now
    private Guid subjectConnectionId;
    private Guid issuerConnectionId;

    protected override async Task OnInitializedAsync()
    {
        await LoadStoredData();
    }

    private async Task LoadStoredData()
    {
        subjectDid = await JS.InvokeAsync<string>("localStorage.getItem", "did");
        var subjectConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "acceptConnectionId");
        var issuerConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "initializeConnectionId");

        isDataLoaded = !string.IsNullOrEmpty(subjectDid) &&
                       !string.IsNullOrEmpty(subjectConnectionIdStr) &&
                       !string.IsNullOrEmpty(issuerConnectionIdStr) &&
                       Guid.TryParse(subjectConnectionIdStr, out subjectConnectionId) &&
                       Guid.TryParse(issuerConnectionIdStr, out issuerConnectionId);

        if (!isDataLoaded)
        {
            message = "Required data not found in local storage. Please complete the necessary setup steps.";
        }
    }

    private void AddField()
    {
        credentialFields.Add(new KeyValueModel());
    }

    private void RemoveField(KeyValueModel field)
    {
        credentialFields.Remove(field);
    }

    private async Task CreateCredential()
    {
        if (!isDataLoaded)
        {
            message = "Cannot create credential. Required data is missing.";
            return;
        }

        isProcessing = true;
        message = "";

        var date = DateTime.UtcNow;
        var credentialSubject = string.Join(", ", credentialFields.Select(f => $"{f.Key}: {f.Value}"));

        // Get the user's name from the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity?.Name;

        var request = new CreateBuilderCredentialRequest
        {
            Date = date,
            Label = label,
            SubjectDid = subjectDid,
            IssuerDid = issuerDid,
            Status = EBuilderCredentialStatus.Pending,
            IssuerConnectionId = issuerConnectionId,
            SubjectConnectionId = subjectConnectionId,
            CredentialSubject = credentialSubject,
            UserId = userId 
        };

        var result = await Mediator.Send<Result<BuilderCredential>>(request);

        if (result.IsSuccess)
        {
            await OnCredentialCreated.InvokeAsync();
            isSuccess = true;
            message = "Credential created successfully.";
        }
        else
        {
            isSuccess = false;
            message = $"Failed to create credential: {result.Errors.First().Message}";
        }

        isProcessing = false;
    }

    [Parameter]
    public EventCallback OnCredentialCreated { get; set; }

    public class KeyValueModel
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }
}
