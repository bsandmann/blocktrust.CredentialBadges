@page "/new-credential"
@using System.ComponentModel.DataAnnotations
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.CreateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Services
@using Blocktrust.CredentialBadges.OpenBadges
@using Blocktrust.CredentialBadges.OpenBadges.Enums
@using Blocktrust.CredentialBadges.Builder.Enums
@using FluentResults
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IMediator Mediator
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="max-w-full mx-8 p-6 bg-white rounded-lg">
    <h3 class="text-2xl font-bold text-gray-800 mb-6">New Credential</h3>

    @if (!isDataLoaded)
    {
        <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6 rounded-md" role="alert">
            <p class="font-bold">Action Required</p>
            <p>To create a new credential, you need to establish a connection with the agent first.</p>
            <a href="/connections" class="text-blue-600 hover:text-blue-800 underline mt-2 inline-block">Go to connection page</a>
            
            
            <div class="flex justify-end space-x-4">
                <button type="button" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md bg-white text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        @onclick="CloseForm">
                    Close
                </button>
            </div>
        </div>
    }
    else
    {
        <p class="text-gray-600 mb-8">Create a verifiable Open Badge credential and share it for signing.</p>

        <EditForm Model="@credentialModel" OnValidSubmit="CreateCredential" class="space-y-6">
            <DataAnnotationsValidator />

            <div>
                <label for="label" class="block text-sm font-medium text-gray-700 mb-1">Label</label>
                <InputText id="label" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                           @bind-Value="credentialModel.Label" placeholder="Name for reference inside this application" />
                <ValidationMessage For="@(() => credentialModel.Label)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                <InputText id="name" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                           @bind-Value="credentialModel.Name" placeholder="Display name of the credential inside a wallet" />
                <ValidationMessage For="@(() => credentialModel.Name)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="identifier" class="block text-sm font-medium text-gray-700 mb-1">Identifier (Optional)</label>
                <InputText id="identifier" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                           @bind-Value="credentialModel.Identifier" placeholder="Descriptive name of the holder" />
                <ValidationMessage For="@(() => credentialModel.Identifier)" class="text-red-500 text-sm mt-1" />
            </div>

            <div>
                <label for="credentialType" class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                <InputSelect id="credentialType" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                             @bind-Value="credentialModel.CredentialType" @bind-Value:after="OnCredentialTypeChanged">
                    <option value="@ECredentialType.Achievement">Achievement</option>
                    <option value="@ECredentialType.Endorsement">Endorsement</option>
                </InputSelect>
                <ValidationMessage For="@(() => credentialModel.CredentialType)" class="text-red-500 text-sm mt-1" />
            </div>
            
            <div>
                <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                <InputTextArea id="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                               @bind-Value="credentialModel.Description" placeholder="Detailed description of the credential" />
                <ValidationMessage For="@(() => credentialModel.Description)" class="text-red-500 text-sm mt-1" />
            </div>

            @if (credentialModel.CredentialType == ECredentialType.Achievement)
            {
                <div>
                    <label for="achievementType" class="block text-sm font-medium text-gray-700 mb-1">Achievement Type</label>
                    <InputSelect id="achievementType" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                                 @bind-Value="credentialModel.AchievementType">
                        @foreach (var type in availableAchievementTypes)
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => credentialModel.AchievementType)" class="text-red-500 text-sm mt-1" />
                </div>

                <div>
                    <label for="fieldOfStudy" class="block text-sm font-medium text-gray-700 mb-1">Field of Study (Optional)</label>
                    <InputText id="fieldOfStudy" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                               @bind-Value="credentialModel.FieldOfStudy" placeholder="Category, subject, or area of knowledge (e.g., Business, Education, Technology)" />
                    <ValidationMessage For="@(() => credentialModel.FieldOfStudy)" class="text-red-500 text-sm mt-1" />
                </div>

                <div>
                    <label for="specialization" class="block text-sm font-medium text-gray-700 mb-1">Specialization (Optional)</label>
                    <InputText id="specialization" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                               @bind-Value="credentialModel.Specialization" placeholder="Specific focus or concentration (e.g., Entrepreneurship, Technical Communication)" />
                    <ValidationMessage For="@(() => credentialModel.Specialization)" class="text-red-500 text-sm mt-1" />
                </div>
                
                <div>
                    <label for="criteria" class="block text-sm font-medium text-gray-700 mb-1">Criteria (Optional)</label>
                    <InputTextArea id="criteria" rows="3" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                                   @bind-Value="credentialModel.Criteria" placeholder="Criteria for earning this credential" />
                    <ValidationMessage For="@(() => credentialModel.Criteria)" class="text-red-500 text-sm mt-1" />
                </div>
                
                <div>
                    <label for="image" class="block text-sm font-medium text-gray-700 mb-1">Image (Optional)</label>
                    <InputFile id="image" OnChange="UploadImage" class="mt-1 block w-full text-sm text-gray-500
                            file:mr-4 file:py-2 file:px-4
                            file:rounded-md file:border-0
                            file:text-sm file:font-semibold
                            file:bg-indigo-50 file:text-indigo-700
                            hover:file:bg-indigo-100" />
                </div>

                @if (!string.IsNullOrEmpty(credentialModel.Image))
                {
                    <div class="mt-2">
                        <img src="@($"data:image/png;base64,{credentialModel.Image}")" alt="Uploaded Image" class="w-32 h-32 object-cover rounded-md border border-gray-300" />
                    </div>
                }
            }
            else if (credentialModel.CredentialType == ECredentialType.Endorsement)
            {
                <div>
                    <label for="endorsementComment" class="block text-sm font-medium text-gray-700 mb-1">Endorsement Comment (Optional)</label>
                    <InputTextArea id="endorsementComment" rows="3" class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out"
                                   @bind-Value="credentialModel.EndorsementComment" placeholder="Comment about why you are endorsing this entity" />
                    <ValidationMessage For="@(() => credentialModel.EndorsementComment)" class="text-red-500 text-sm mt-1" />
                </div>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="p-4 rounded-md @(isSuccess ? "bg-green-50 text-green-800 border border-green-300" : "bg-red-50 text-red-800 border border-red-300")">
                    @message
                </div>
            }

            <div class="flex justify-end space-x-4">
                <button type="button" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md bg-white text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        @onclick="CloseForm">
                    Close
                </button>
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md bg-slate-700 text-white hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        disabled="@(isProcessing || !isDataLoaded)">
                    @if (isProcessing)
                    {
                        <span class="mr-2">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Create Credential</span>
                    }
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    private CredentialModel credentialModel = new();
    private bool isProcessing = false;
    private string message = "";
    private bool isSuccess = false;
    private bool isDataLoaded = false;
    private List<EAchievementType> availableAchievementTypes = new List<EAchievementType>();

    private string subjectDid;
    private string issuerDid = "issuerDid"; // Left as is for now
    private Guid subjectConnectionId;
    private Guid issuerConnectionId;

    [Parameter]
    public EventCallback OnCredentialCreated { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadStoredData();
        UpdateAchievementTypes();
    }
    
    private void OnCredentialTypeChanged()
    {
        UpdateAchievementTypes();
    }
    
    private void UpdateAchievementTypes()
    {
        availableAchievementTypes.Clear();
        
        if (credentialModel.CredentialType == ECredentialType.Achievement)
        {
            // Add all achievement types except 'Achievement' to avoid confusion
            foreach (var type in Enum.GetValues(typeof(EAchievementType)).Cast<EAchievementType>())
            {
                if (type != EAchievementType.Achievement)
                {
                    availableAchievementTypes.Add(type);
                }
            }
        }
        else // Endorsement
        {
            // For endorsement, we use the default Achievement type
            availableAchievementTypes.Add(EAchievementType.Achievement);
            
            // Clear image when switching to Endorsement type
            if (!string.IsNullOrEmpty(credentialModel.Image))
            {
                credentialModel.Image = "";
            }
        }
        
        // Set default achievement type based on selected credential type
        if (availableAchievementTypes.Any() && !availableAchievementTypes.Contains(credentialModel.AchievementType))
        {
            credentialModel.AchievementType = availableAchievementTypes.First();
        }
    }

    private async Task LoadStoredData()
    {
        subjectDid = await JS.InvokeAsync<string>("localStorage.getItem", "did");
        var subjectConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "acceptConnectionId");
        var issuerConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "initializeConnectionId");

        isDataLoaded = !string.IsNullOrEmpty(subjectDid) &&
                       !string.IsNullOrEmpty(subjectConnectionIdStr) &&
                       !string.IsNullOrEmpty(issuerConnectionIdStr) &&
                       Guid.TryParse(subjectConnectionIdStr, out subjectConnectionId) &&
                       Guid.TryParse(issuerConnectionIdStr, out issuerConnectionId);

        if (!isDataLoaded)
        {
            message = "Required data not found in local storage. Please complete the necessary setup steps.";
        }
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.ContentType != "image/png" && file.ContentType != "image/jpeg" && file.ContentType != "image/gif")
            {
                message = "Invalid image type. Please upload a PNG, JPEG, or GIF image.";
                credentialModel.Image = "";
                return;
            }

            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5 MB limit
                credentialModel.Image = await ImageProcessingService.ProcessImageAsync(stream, file.ContentType, 100, 100);
                message = ""; // Clear error message if upload is successful
            }
            catch (Exception ex)
            {
                message = $"Error processing image: {ex.Message}";
                credentialModel.Image = "";
            }
        }
    }

    private async Task CreateCredential()
    {
        if (!isDataLoaded)
        {
            message = "Cannot create credential. Required data is missing.";
            return;
        }

        isProcessing = true;
        message = "";

        var date = DateTime.UtcNow;

        // Get the user's name from the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity?.Name;

        object credentialSubject;
        
        if (credentialModel.CredentialType == ECredentialType.Achievement)
        {
            credentialSubject = new
            {
                CredentialType = credentialModel.CredentialType.ToString(),
                AchievementType = credentialModel.AchievementType.ToString(),
                credentialModel.Identifier,
                credentialModel.Name,
                credentialModel.Description,
                credentialModel.Criteria,
                credentialModel.FieldOfStudy,
                credentialModel.Specialization,
                credentialModel.Image
            };
        }
        else // Endorsement
        {
            credentialSubject = new
            {
                CredentialType = credentialModel.CredentialType.ToString(),
                credentialModel.Identifier,
                credentialModel.Name,
                credentialModel.Description,
                EndorsementComment = credentialModel.EndorsementComment
            };
        }

        var request = new CreateBuilderCredentialRequest
        {
            Date = date,
            Label = credentialModel.Label,
            SubjectDid = subjectDid,
            IssuerDid = issuerDid,
            Status = EBuilderCredentialStatus.Pending,
            IssuerConnectionId = issuerConnectionId,
            SubjectConnectionId = subjectConnectionId,
            CredentialSubject = System.Text.Json.JsonSerializer.Serialize(credentialSubject),
            UserId = userId
        };

        var result = await Mediator.Send<Result<BuilderCredential>>(request);

        if (result.IsSuccess)
        {
            await OnCredentialCreated.InvokeAsync();
            isSuccess = true;
            message = "Credential created successfully.";
            credentialModel = new CredentialModel(); // Reset the form
        }
        else
        {
            isSuccess = false;
            message = $"Failed to create credential: {result.Errors.First().Message}";
        }

        isProcessing = false;
    }

    private async Task CloseForm()
    {
        await OnClose.InvokeAsync();
    }

    public class CredentialModel
    {
        [Required(ErrorMessage = "Label is required.")]
        [StringLength(100, ErrorMessage = "Label must be at most 100 characters long.")]
        public string Label { get; set; } = "";

        [Required(ErrorMessage = "Type is required.")]
        public ECredentialType CredentialType { get; set; } = ECredentialType.Achievement;
        
        [Required(ErrorMessage = "Achievement Type is required.")]
        public EAchievementType AchievementType { get; set; } = EAchievementType.Achievement;
        
        [StringLength(100, ErrorMessage = "Identifier must be at most 100 characters long.")]
        public string Identifier { get; set; } = "";

        [Required(ErrorMessage = "Name is required.")]
        [StringLength(200, ErrorMessage = "Name must be at most 200 characters long.")]
        public string Name { get; set; } = "";

        [StringLength(1000, ErrorMessage = "Description must be at most 1000 characters long.")]
        public string Description { get; set; } = "";

        [StringLength(500, ErrorMessage = "Criteria must be at most 500 characters long.")]
        public string Criteria { get; set; } = "";
        
        [StringLength(500, ErrorMessage = "Field of Study must be at most 500 characters long.")]
        public string FieldOfStudy { get; set; } = "";
        
        [StringLength(500, ErrorMessage = "Specialization must be at most 500 characters long.")]
        public string Specialization { get; set; } = "";
        
        [StringLength(1000, ErrorMessage = "Endorsement Comment must be at most 1000 characters long.")]
        public string EndorsementComment { get; set; } = "";

        public string Image { get; set; } = "";
    }
}