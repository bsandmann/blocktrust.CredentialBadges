@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.CreateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Services
@using Blocktrust.CredentialBadges.OpenBadges
@using Blocktrust.CredentialBadges.OpenBadges.Enums
@using FluentResults
@using MediatR
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System
@using System.Threading.Tasks
@using System.Text.Json

@inject IMediator Mediator
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ImageProcessingService ImageProcessingService

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@namespace Blocktrust.CredentialBadges.Builder.Components.Pages.Credentials

<div class="flex flex-col space-y-6">
    <h3 class="text-xl font-semibold text-gray-800 mb-2">New Credential</h3>
    

    @if (!isDataLoaded)
    {
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative m-4" role="alert">
            <strong class="font-bold">Action Required:</strong>
            <span class="block sm:inline"> To create a new credential, you need to establish a connection with the agent first. </span>
            <p class="mt-2">
                <a href="/connections" class="text-blue-600 hover:text-blue-800 underline">Click here to go to the connection page</a>
            </p>
        </div>
    }
    else
    {
        <h4 class="text-md text-gray-600 mb-4">Create a verifiable Open Badge credential and share it for signing.</h4>

        <div class="flex flex-col h-full">
            <div class="flex-grow space-y-6 overflow-y-auto px-4 mb-4">
                <div class="flex items-center space-x-4 mt-8">
                    <label class="text-gray-600 font-medium w-24">Label:</label>
                    <input type="text" class="border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-slate-600" 
                           @bind="label" placeholder="Label to easily identify the credential" />
                </div>
                
                <div class="text-gray-600 font-medium w-48">Credential Subject:</div>

             <div class="flex items-center space-x-4 mt-4">
                 <label class="text-gray-600 font-medium w-24">Achievement Type:</label>
                 <select class="border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-slate-600"
                         @bind="achievementType">
                     @foreach (var type in Enum.GetValues(typeof(EAchievementType)))
                     {
                         <option value="@type.ToString()">@type.ToString()</option>
                     }
                 </select>
             </div>
                <div class="flex items-center space-x-4 mt-4">
                    <label class="text-gray-600 font-medium w-24">Name:</label>
                    <input type="text" class="border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-slate-600" 
                           @bind="name" placeholder="Name of the credential" />
                </div>

                <div class="flex items-center space-x-4 mt-4">
                    <label class="text-gray-600 font-medium w-24">Description:</label>
                    <textarea class="border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-slate-600" 
                              @bind="description" placeholder="Detailed description of the credential"></textarea>
                </div>

                <div class="flex items-center space-x-4 mt-4">
                    <label class="text-gray-600 font-medium w-24">Criteria:</label>
                    <textarea class="border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-slate-600" 
                              @bind="criteria" placeholder="Criteria for earning this credential"></textarea>
                </div>

                <div class="flex items-center space-x-4 mt-4">
                    <label class="text-gray-600 font-medium w-24">Image:</label>
                    <InputFile class="border border-gray-300 rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-slate-600" 
                               OnChange="UploadImage" />
                </div>

                @if (!string.IsNullOrEmpty(imageBase64))
                {
                    <div class="relative mt-4">
                        <img src="@($"data:image/png;base64,{imageBase64}")" alt="Uploaded Image" class="w-32 h-auto rounded border border-gray-300" />
                    </div>
                }
            </div>

            <div class="mt-auto">
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="mb-4 p-4 rounded @(isSuccess ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                        @message
                    </div>
                }

                <div class="flex justify-end pt-6">
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500" @onclick="CreateCredential" disabled="@(isProcessing || !isDataLoaded)">
                        @if (isProcessing)
                        {
                            <span class="material-symbols-outlined animate-spin mr-2">refresh</span>
                            <span>Processing...</span>
                        }
                        else
                        { <span>Create Credential</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    }
</div>
@code {
    private string label = "";
    private string achievementType = EAchievementType.Diploma.ToString();
    private string name = "";
    private string description = "";
    private string criteria = "";
    private string imageBase64 = "";
    private bool isProcessing = false;
    private string message = "";
    private bool isSuccess = false;
    private bool isDataLoaded = false;

    private string subjectDid;
    private string issuerDid = "issuerDid"; // Left as is for now
    private Guid subjectConnectionId;
    private Guid issuerConnectionId;

    protected override async Task OnInitializedAsync()
    {
        await LoadStoredData();
    }

    private async Task LoadStoredData()
    {
        subjectDid = await JS.InvokeAsync<string>("localStorage.getItem", "did");
        var subjectConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "acceptConnectionId");
        var issuerConnectionIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "initializeConnectionId");

        isDataLoaded = !string.IsNullOrEmpty(subjectDid) &&
                       !string.IsNullOrEmpty(subjectConnectionIdStr) &&
                       !string.IsNullOrEmpty(issuerConnectionIdStr) &&
                       Guid.TryParse(subjectConnectionIdStr, out subjectConnectionId) &&
                       Guid.TryParse(issuerConnectionIdStr, out issuerConnectionId);

        if (!isDataLoaded)
        {
            message = "Required data not found in local storage. Please complete the necessary setup steps.";
        }
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.ContentType != "image/png" && file.ContentType != "image/jpeg" && file.ContentType != "image/gif")
            {
                message = "Invalid image type. Please upload a PNG, JPEG, or GIF image.";
                imageBase64 = "";
                return;
            }

            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5 MB limit
                var processedImage = await ImageProcessingService.ProcessImageAsync(stream, file.ContentType, 100, 100);
                imageBase64 = processedImage.Split(',')[1]; // Remove the "data:image/png;base64," part
                message = ""; // Clear error message if upload is successful
            }
            catch (Exception ex)
            {
                message = $"Error processing image: {ex.Message}";
                imageBase64 = "";
            }
        }
    }

    private async Task CreateCredential()
    {
        if (!isDataLoaded)
        {
            message = "Cannot create credential. Required data is missing.";
            return;
        }

        isProcessing = true;
        message = "";

        var date = DateTime.UtcNow;

        // Get the user's name from the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity?.Name;

        var credentialSubject = new
        {
            AchievementType = achievementType,
            Name = name,
            Description = description,
            Criteria = criteria,
            Image = imageBase64
        };

        var request = new CreateBuilderCredentialRequest
        {
            Date = date,
            Label = label,
            SubjectDid = subjectDid,
            IssuerDid = issuerDid,
            Status = EBuilderCredentialStatus.Pending,
            IssuerConnectionId = issuerConnectionId,
            SubjectConnectionId = subjectConnectionId,
            CredentialSubject = JsonSerializer.Serialize(credentialSubject),
            UserId = userId 
        };

        var result = await Mediator.Send<Result<BuilderCredential>>(request);

        if (result.IsSuccess)
        {
            await OnCredentialCreated.InvokeAsync();
            isSuccess = true;
            message = "Credential created successfully.";
            imageBase64 = "";
        }
        else
        {
            isSuccess = false;
            message = $"Failed to create credential: {result.Errors.First().Message}";
        }

        isProcessing = false;
    }

    [Parameter]
    public EventCallback OnCredentialCreated { get; set; }
}