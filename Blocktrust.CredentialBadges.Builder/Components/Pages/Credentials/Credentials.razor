@page "/credentials/{*pageRoute}"
@layout CredentialsLayout
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetBuilderCrdentialByUserId
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using MediatR
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable

<PageTitle>@GetBrowserPageTitle()</PageTitle>

<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800">@GetPageTitle() Credentials</h2>
        <button class="bg-slate-700 text-white px-4 py-2 rounded flex items-center hover:bg-slate-600" @onclick="() => showModal = true">
            <span class="material-symbols-outlined mr-2">add</span> New Credential
        </button>
    </div>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-300 rounded">
            <thead>
            <tr class="bg-slate-100">
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
            </tr>
            </thead>
            <tbody>
                @foreach (var credential in FilteredCredentials)
                {
                    <tr class="border-t border-gray-300">
                        <td class="px-6 py-4 whitespace-nowrap">@credential.Date.ToShortDateString()</td>
                        <td class="px-6 py-4 whitespace-nowrap" title="@credential.Label">@TruncateText(credential.Label, 20)</td>
                        <td class="px-6 py-4 whitespace-nowrap" title="@credential.SubjectDid">@TruncateText(credential.SubjectDid, 20)</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="@GetStatusClass(credential.Status) px-2 py-1 rounded-full text-xs">@GetStatusText(credential.Status)</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button class="text-slate-600 hover:text-slate-800" @onclick="() => ViewCredential(credential)">
                                <span class="material-symbols-outlined">visibility</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (showModal)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div class="relative bg-white p-6 rounded-lg shadow-lg w-11/12  md:w-1/2 min-h-3/4">
            <button class="absolute top-4 right-4 text-gray-600 hover:text-gray-800" @onclick="() => showModal = false">
                <span class="material-symbols-outlined">close</span>
            </button>
            <NewBuilderCredentialForm OnCredentialCreated="HandleCredentialCreated" />
        </div>
    </div>
}

@code {
    private bool showModal;
    private List<BuilderCredential> credentials = new();

    [Parameter]
    public string PageRoute { get; set; }

    private IEnumerable<BuilderCredential> FilteredCredentials => (PageRoute?.ToLower() ?? "") switch
    {
        "approved" => credentials.Where(c => c.Status != EBuilderCredentialStatus.Pending && c.Status != EBuilderCredentialStatus.Declined),
        "declined" => credentials.Where(c => c.Status == EBuilderCredentialStatus.Declined),
        "pending" => credentials.Where(c => c.Status == EBuilderCredentialStatus.Pending),
        _ => credentials
    };

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        await LoadCredentials();
        await UpdatePageTitle();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCredentials();
        await UpdatePageTitle();
        StateHasChanged();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await LoadCredentials();
            await UpdatePageTitle();
            StateHasChanged();
        });
    }

    private async Task UpdatePageTitle()
    {
        var title = GetBrowserPageTitle();
        if (!string.IsNullOrWhiteSpace(title))
        {
            await JSRuntime.InvokeVoidAsync("updatePageTitle", title);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task LoadCredentials()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity.Name;

        var result = await Mediator.Send(new GetBuilderCredentialsByUserIdRequest { UserId = userId });
        if (result.IsSuccess)
        {
            credentials = result.Value;
        }
        else
        {
            Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
        }
    }

    private void ViewCredential(BuilderCredential credential)
    {
        NavigationManager.NavigateTo($"/credentials/{credential.CredentialId}");
    }

    private async Task HandleCredentialCreated()
    {
        await LoadCredentials();
        showModal = false;
    }
    
    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
        {
            return text;
        }
        return text.Substring(0, maxLength) + "...";
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.WaitingAcceptance => "bg-blue-200 text-blue-800",
            EBuilderCredentialStatus.RequestSent => "bg-orange-200 text-orange-800",
            EBuilderCredentialStatus.CredentialReceived => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Revoked => "bg-red-200 text-red-800",
            EBuilderCredentialStatus.Expired => "bg-gray-200 text-gray-800",
            EBuilderCredentialStatus.Approved => "bg-green-200 text-green-800",
            EBuilderCredentialStatus.Pending => "bg-yellow-200 text-yellow-800",
            EBuilderCredentialStatus.Declined => "bg-red-200 text-red-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private string GetStatusText(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.WaitingAcceptance => "Waiting Acceptance",
            EBuilderCredentialStatus.RequestSent => "Request Sent",
            EBuilderCredentialStatus.CredentialReceived => "Credential Received",
            EBuilderCredentialStatus.Revoked => "Revoked",
            EBuilderCredentialStatus.Expired => "Expired",
            EBuilderCredentialStatus.Approved => "Approved",
            EBuilderCredentialStatus.Pending => "Pending",
            EBuilderCredentialStatus.Declined => "Declined",
            _ => "Unknown",
        };
    }

    private string GetBrowserPageTitle()
    {
        var baseTitle = "Blocktrust Credentials - ";
        return (PageRoute?.ToLower() ?? "") switch
        {
            "approved" => baseTitle + "Approved Credentials",
            "declined" => baseTitle + "Declined Credentials",
            "pending" => baseTitle + "Pending Credentials",
            _ => baseTitle + "All Credentials"
        };
    }

    private string GetPageTitle()
    {
        return (PageRoute?.ToLower() ?? "") switch
        {
            "approved" => "Approved",
            "declined" => "Declined",
            "pending" => "Pending",
            _ => "All"
        };
    }
}