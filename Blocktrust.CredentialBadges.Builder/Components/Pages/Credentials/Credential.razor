@page "/credentials/{CredentialId:guid}"
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetBuilderCredentialById
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.AcceptBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Commands.Credentials.GetRecordById
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.UpdateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.IdentusClientApi
@using MediatR
@using System.Text.Json
@inject IMediator Mediator
@inject IJSRuntime JS
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration

<PageTitle>Blocktrust Credentials</PageTitle>

<div class="max-w-5xl mx-auto px-4 py-8">
    <h2 class="text-3xl font-bold text-gray-900 mb-6">Credential Details</h2>

    @if (_isLoading)
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <span class="material-symbols-outlined animate-spin text-4xl text-gray-400">autorenew</span>
            </div>
            <div class="flex justify-center items-center h-48">
                <span class="material-symbols-outlined animate-spin text-4xl text-gray-400">autorenew</span>
            </div>
            <p class="text-gray-600 text-center mt-4">Please wait while we fetch the credential details.</p>
        </div>
    }
    else if (credential == null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">Credential not found.</span>
        </div>
    }
    else
    {
        @if (credential.Status == EBuilderCredentialStatus.WaitingAcceptance && string.IsNullOrEmpty(apiKey))
        {
            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4" role="alert">
                <strong class="font-bold">Action Required:</strong>
                <span class="block sm:inline"> To accept this credential, you need to connect your wallet or establish a connection with the agent first. </span>
                <p class="mt-2">
                    <a href="/connections" class="text-blue-600 hover:text-blue-800 underline">Click here to go to the connections page</a>
                </p>
            </div>
        }
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-2xl font-semibold">@credential.Label</h3>
                <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500" @onclick="() => CopyToClipboard(_fullUrl)">
                    <span class="material-symbols-outlined mr-2">content_copy</span> Copy Credential URL
                </button>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Subject DID</strong>
                    <div class="flex items-center">
                        <p class="text-gray-800 truncate w-3/4" title="@credential.SubjectDid">@credential.SubjectDid</p>
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(credential.SubjectDid)">
                            <span class="material-symbols-outlined">content_copy</span>
                        </button>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Status:</strong>
                    <div class="flex items-center">
                        <span class="inline-block px-3 py-1 text-sm font-medium leading-5 rounded-full @(GetStatusClass(credential.Status))">@credential.Status</span>
                        @if (credential.Status == EBuilderCredentialStatus.RequestSent)
                        {
                            <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="CheckStatus">
                                <span class="material-symbols-outlined">refresh</span>
                            </button>
                        }
                    </div>
                </div>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg border border-gray-300 mb-6">
                <strong class="block text-gray-600 mb-2 text-lg">Credential Subject:</strong>
                <div class="space-y-2">
                    @foreach (var field in ParseCredentialSubject(credential.CredentialSubject))
                    {
                        if (field.Key == "Image" && !string.IsNullOrEmpty(field.Value))
                        {
                            <div class="flex items-center">
                                <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                                <img src="data:image/png;base64, @field.Value" alt="Credential Image" class="w-24 h-auto rounded border border-gray-300"/>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center">
                                <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                                <span class="text-gray-800 w-3/4 truncate" title="@field.Value">@field.Value</span>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="text-right flex gap-4">
                @if (credential.Status == EBuilderCredentialStatus.WaitingAcceptance)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center mr-2 hover:bg-slate-500" @onclick="AcceptCredential">Accept</button>
                }
                else if (credential.Status == EBuilderCredentialStatus.RequestSent)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center opacity-10 hover:bg-slate-500" disabled>Copy Credential</button>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center opacity-10 hover:bg-slate-500" disabled>Generate Snippet</button>
                }
                else if (credential.Status == EBuilderCredentialStatus.CredentialReceived)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500" @onclick="CopyCredential">Copy Credential</button>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center hover:bg-slate-500" @onclick="GenerateSnippet">Generate Snippet</button>
                }
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4" role="alert">
                    <span class="block sm:inline">@_errorMessage</span>
                </div>
            }
        </div>
    }
</div>

<div class="fixed bottom-4 right-4 px-4 py-2 rounded-md shadow-lg transition-opacity duration-300 @(showToast ? "opacity-100" : "opacity-0") @(isToastError ? "bg-red-500" : "bg-green-500") text-white">
    @toastMessage
</div>

@code {
    [Parameter]
    public Guid CredentialId { get; set; }

    private BuilderCredential credential;
    private string _fullUrl;
    private bool _isLoading = true;
    private string _errorMessage;
    private string _copyVc = "Verifiable Credential";
    private bool _isRendered;

    private string? apiKey;
    
    private string _snippetsUrl = "";
    
    private bool showToast;
    private string toastMessage;
    private bool isToastError;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _snippetsUrl = Configuration["AppSettings:SnippetsUrl"];
        _fullUrl = GenerateFullUrl();
        apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");
        await FetchCredentialDetails();
        _isLoading = false;
        UpdateCopyVc();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
            StateHasChanged();

            if (credential != null && (credential.Status == EBuilderCredentialStatus.RequestSent || credential.Status == EBuilderCredentialStatus.CredentialReceived))
            {
                await CheckStatus();
            }
        }
    }

    private async Task FetchCredentialDetails()
    {
        var result = await Mediator.Send(new GetBuilderCredentialByIdRequest(CredentialId));

        if (result.IsSuccess)
        {
            credential = result.Value;
            UpdateCopyVc();
        }
        else
        {
            credential = null;
            _errorMessage = "Error fetching credential details.";
        }
        StateHasChanged();
    }

    private void UpdateCopyVc()
    {
        _copyVc = credential?.VerifiableCredential ?? "null";
    }

    private string GenerateFullUrl()
    {
        return NavigationManager.ToAbsoluteUri($"/credentials/{CredentialId}").ToString();
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private void CopyCredential()
    {
        if (credential != null && credential.Status == EBuilderCredentialStatus.CredentialReceived)
        {
            CopyToClipboard(_copyVc);
            ShowToast("Credential copied to clipboard", false);
        }
        else
        {
            ShowToast("Credential is not available yet", true);
        }
    }

    private async Task AcceptCredential()
    {
        var apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");

        if (string.IsNullOrEmpty(apiKey))
        {
            _errorMessage = "API key not found.";
            return;
        }

        AcceptBuilderCredentialRequest acceptBuilderCredentialRequest = new AcceptBuilderCredentialRequest
        {
            ThId = credential.ThId.ToString(),
            ApiKey = apiKey,
            SubjectId = credential.SubjectDid
        };

        var result = await Mediator.Send(acceptBuilderCredentialRequest);

        if (result.IsSuccess)
        {
            credential = result.Value;
            _errorMessage = string.Empty;
            UpdateCopyVc();
            StateHasChanged();
        }
        else
        {
            _errorMessage = "Error accepting the credential.";
        }
    }

    private async Task CheckStatus()
    {
        if (credential == null)
        {
            _errorMessage = "Credential is null.";
            return;
        }

        if (credential.Status != EBuilderCredentialStatus.RequestSent && credential.Status != EBuilderCredentialStatus.CredentialReceived)
        {
            return;
        }

        if (!_isRendered)
        {
            return;
        }

        var apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");

        if (string.IsNullOrEmpty(apiKey))
        {
            _errorMessage = "API key not found.";
            return;
        }

        var result = await Mediator.Send(new GetRecordByIdRequest(credential.RecordIdOnAgent.ToString(), apiKey));

        if (result.IsSuccess && result.Value.ProtocolState == IssueCredentialRecordProtocolState.CredentialReceived)
        {
            var updateRequest = new UpdateBuilderCredentialRequest
            {
                CredentialId = credential.CredentialId,
                Status = EBuilderCredentialStatus.CredentialReceived,
                VerifiableCredential = result.Value.Credential
            };

            var updateResult = await Mediator.Send(updateRequest);

            if (updateResult.IsSuccess)
            {
                credential.Status = EBuilderCredentialStatus.CredentialReceived;
                credential.VerifiableCredential = result.Value.Credential;
                UpdateCopyVc();
                _errorMessage = string.Empty;
            }
            else
            {
                _errorMessage = "Error updating credential status.";
            }
        }
        else
        {
            _errorMessage = "Error checking status or no status update.";
        }

        StateHasChanged();
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.Pending => "bg-yellow-100 text-yellow-800",
            EBuilderCredentialStatus.Approved => "bg-green-100 text-green-800",
            EBuilderCredentialStatus.Declined => "bg-red-100 text-red-800",
            EBuilderCredentialStatus.WaitingAcceptance => "bg-blue-100 text-blue-800",
            EBuilderCredentialStatus.RequestSent => "bg-orange-100 text-orange-800",
            EBuilderCredentialStatus.CredentialReceived => "bg-green-100 text-green-800",
            EBuilderCredentialStatus.Revoked => "bg-red-100 text-red-800",
            EBuilderCredentialStatus.Expired => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

 private Dictionary<string, string> ParseCredentialSubject(string credentialSubjectJson)
    {
        var dictionary = new Dictionary<string, string>();

        if (string.IsNullOrWhiteSpace(credentialSubjectJson))
        {
            return dictionary;
        }

        using (JsonDocument document = JsonDocument.Parse(credentialSubjectJson))
        {
            foreach (JsonProperty property in document.RootElement.EnumerateObject())
            {
                dictionary.Add(property.Name, property.Value.GetString());
            }
        }

        return dictionary;
    }

    private async Task GenerateSnippet()
    {
        if (credential != null && !string.IsNullOrEmpty(credential.VerifiableCredential))
        {
            const int chromiumLengthLimit = 32779; // URL character limit for Chrome and Brave
            var encodedCredential = Uri.EscapeDataString(credential.VerifiableCredential);
            
            string snippetUrl;
            if (encodedCredential.Length > chromiumLengthLimit)
            {
                var message = Uri.EscapeDataString("Please paste the copied credential here.");
                snippetUrl = $"{_snippetsUrl}/{message}";
                CopyToClipboard(credential.VerifiableCredential);
                ShowToast("Credential copied to clipboard", false);
            }
            else
            {
                snippetUrl = $"{_snippetsUrl}/{encodedCredential}";
            }

            await JS.InvokeVoidAsync("open", snippetUrl, "_blank");
        }
        else
        {
            var errorMessage = Uri.EscapeDataString("Unable to generate snippet. Verifiable Credential is not available.");
            await JS.InvokeVoidAsync("open", $"{_snippetsUrl}/{errorMessage}", "_blank");
        }
    }

    private void ShowToast(string message, bool isError)
    {
        toastMessage = message;
        isToastError = isError;
        showToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false;
            StateHasChanged();
        });
    }
}