@page "/credentials/{CredentialId:guid}"
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetBuilderCredentialById
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.AcceptBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Commands.Credentials.GetRecordById
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.UpdateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.IdentusClientApi
@using MediatR
@inject IMediator Mediator
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="max-w-5xl mx-auto px-4 py-8">
    <h2 class="text-3xl font-bold text-gray-900 mb-6">Credential Details</h2>

    @if (isLoading)
    {
        <div class="flex justify-center items-center h-48">
            <div class="loader">Loading...</div>
        </div>
    }
    else if (credential == null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">Credential not found.</span>
        </div>
    }
    else
    {
        <div class="bg-white shadow-lg rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-2xl font-semibold">@credential.Label</h3>
                <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center" @onclick="() => CopyToClipboard(fullUrl)">
                    <span class="material-icons mr-2">content_copy</span> Copy Credential URL
                </button>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Subject DID</strong>
                    <div class="flex items-center">
                        <p class="text-gray-800 truncate w-3/4" title="@credential.SubjectDid">@credential.SubjectDid</p>
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(credential.SubjectDid)">
                            <span class="material-icons">content_copy</span>
                        </button>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg border border-gray-300">
                    <strong class="block text-gray-600 mb-2">Status:</strong>
                    <div class="flex items-center">
                        <span class="inline-block px-3 py-1 text-sm font-medium leading-5 rounded-full @(GetStatusClass(credential.Status))">@credential.Status</span>
                        @if (credential.Status == EBuilderCredentialStatus.RequestSent)
                        {
                            <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="CheckStatus">
                                <span class="material-icons">refresh</span>
                            </button>
                        }
                    </div>
                </div>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg border border-gray-300 mb-6">
                <strong class="block text-gray-600 mb-2 text-lg">Credential Subject:</strong>
                <div class="space-y-2">
                    @foreach (var field in ParseCredentialSubject(credential.CredentialSubject))
                    {
                        if (field.Key == "Image" && !string.IsNullOrEmpty(field.Value))
                        {
                            <div class="flex items-center">
                                <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                                <img src="data:image/png;base64, @field.Value" alt="Credential Image" class="w-24 h-auto rounded border border-gray-300"/>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center">
                                <strong class="text-gray-600 w-1/4 truncate" title="@field.Key">@field.Key:</strong>
                                <span class="text-gray-800 w-3/4 truncate" title="@field.Value">@field.Value</span>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="text-right flex gap-4">
                @if (credential.Status == EBuilderCredentialStatus.WaitingAcceptance)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center mr-2" @onclick="AcceptCredential">Accept</button>
                }
                else if (credential.Status == EBuilderCredentialStatus.RequestSent)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center opacity-10" disabled>Copy JSON</button>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center opacity-10" disabled>Generate Snippet</button>
                }
                else if (credential.Status == EBuilderCredentialStatus.CredentialReceived)
                {
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center" @onclick="() => CopyToClipboard(CopyVC)">Copy Credential</button>
                    <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center" @onclick="GenerateSnippet">Generate Snippet</button>
                }
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4" role="alert">
                    <span class="block sm:inline">@errorMessage</span>
                </div>
            }
        </div>
    }
</div>
@code {
    [Parameter]
    public Guid CredentialId { get; set; }

    private BuilderCredential credential;
    private string fullUrl;
    private bool isLoading = true;
    private string errorMessage;
    private string CopyVC = "Verifiable Credential";
    private bool isRendered;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchCredentialDetails();
        fullUrl = GenerateFullUrl();
        isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;

            if (credential?.Status is EBuilderCredentialStatus.RequestSent or EBuilderCredentialStatus.CredentialReceived)
            {
                await CheckStatus();
            }
        }
    }

    private async Task FetchCredentialDetails()
    {
        var result = await Mediator.Send(new GetBuilderCredentialByIdRequest(CredentialId));

        if (result.IsSuccess)
        {
            credential = result.Value;
        }
        else
        {
            credential = null;
            errorMessage = "Error fetching credential details.";
        }
    }

    private string GenerateFullUrl()
    {
        return $"/credentials/{CredentialId}";
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task AcceptCredential()
    {
        var apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");

        if (string.IsNullOrEmpty(apiKey))
        {
            errorMessage = "API key not found.";
            return;
        }

        if (credential == null)
        {
            errorMessage = "Credential is null.";
            return;
        }

        AcceptBuilderCredentialRequest acceptBuilderCredentialRequest = new AcceptBuilderCredentialRequest
        {
            ThId = credential.ThId.ToString(),
            ApiKey = apiKey,
            SubjectId = credential.SubjectDid
        };

        var result = await Mediator.Send(acceptBuilderCredentialRequest);

        if (result.IsSuccess)
        {
            credential = result.Value;
            errorMessage = string.Empty;
            StateHasChanged();
        }
        else
        {
            errorMessage = "Error accepting the credential.";
        }
    }

    private async Task CheckStatus()
    {
        if (credential == null || credential.Status != EBuilderCredentialStatus.RequestSent || credential.Status != EBuilderCredentialStatus.CredentialReceived)
        {
            return;
        }

        if (!isRendered)
        {
            // Avoid JavaScript interop call if the component is not rendered
            return;
        }

        // Fetch apiKey from local storage
        var apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");

        if (string.IsNullOrEmpty(apiKey))
        {
            errorMessage = "API key not found.";
            return;
        }

        // Add apiKey to the GetRecordByIdRequest
        var result = await Mediator.Send(new GetRecordByIdRequest(credential.RecordIdOnAgent.ToString(), apiKey));

        if (result.IsSuccess && result.Value.ProtocolState == IssueCredentialRecordProtocolState.CredentialReceived)
        {
            var updateRequest = new UpdateBuilderCredentialRequest
            {
                CredentialId = credential.CredentialId,
                Status = EBuilderCredentialStatus.CredentialReceived,
                VerifiableCredential = result.Value.Credential
            };

            var updateResult = await Mediator.Send(updateRequest);

            if (updateResult.IsSuccess)
            {
                credential.Status = EBuilderCredentialStatus.CredentialReceived;
                CopyVC = result.Value.Credential;
                errorMessage = string.Empty;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Error updating credential status.";
            }
        }
        else
        {
            errorMessage = "Error checking status or no status update.";
        }
    }



    private void GenerateSnippet()
    {
        NavigationManager.NavigateTo($"/snippet/{CredentialId}");
    }

    private string GetStatusClass(EBuilderCredentialStatus status)
    {
        return status switch
        {
            EBuilderCredentialStatus.Pending => "bg-yellow-100 text-yellow-800",
            EBuilderCredentialStatus.Approved => "bg-green-100 text-green-800",
            EBuilderCredentialStatus.Declined => "bg-red-100 text-red-800",
            EBuilderCredentialStatus.WaitingAcceptance => "bg-blue-100 text-blue-800",
            EBuilderCredentialStatus.RequestSent => "bg-orange-100 text-orange-800",
            EBuilderCredentialStatus.CredentialReceived => "bg-green-100 text-green-800",
            EBuilderCredentialStatus.Revoked => "bg-red-100 text-red-800",
            EBuilderCredentialStatus.Expired => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800",
        };
    }

    private IDictionary<string, string> ParseCredentialSubject(string credentialSubject)
    {
        try
        {
            return System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(credentialSubject);
        }
        catch (Exception ex)
        {
            errorMessage = "Error parsing credential subject.";
            return new Dictionary<string, string>();
        }
    }
}
