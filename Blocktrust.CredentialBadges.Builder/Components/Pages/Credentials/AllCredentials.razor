@page "/credentials"
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetBuilderCredentialsByUserId
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@layout CredentialsLayout
@using MediatR
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800">Credentials</h2>
        <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center" @onclick="() => showModal = true">
            <span class="material-icons mr-2">add</span> New Credential
        </button>
    </div>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-300 rounded">
            <thead>
            <tr class="bg-slate-100">
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
            </tr>
            </thead>
            <tbody>
                @foreach (var credential in credentials)
                {
                    <tr class="border-t border-gray-300">
                        <td class="px-6 py-4 whitespace-nowrap">@credential.Date.ToShortDateString()</td>
                        <td class="px-6 py-4 whitespace-nowrap" title="@credential.Label">@TruncateText(credential.Label, 20)</td>
                        <td class="px-6 py-4 whitespace-nowrap" title="@credential.SubjectDid">@TruncateText(credential.SubjectDid, 20)</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            @if (credential.Status == EBuilderCredentialStatus.Approved)
                            {
                                <span class="bg-green-200 text-green-800 px-2 py-1 rounded-full text-xs">Approved</span>
                            }
                            else if (credential.Status == EBuilderCredentialStatus.Pending)
                            {
                                <span class="bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full text-xs">Pending</span>
                            }
                            else if (credential.Status == EBuilderCredentialStatus.Declined)
                            {
                                <span class="bg-red-200 text-red-800 px-2 py-1 rounded-full text-xs">Declined</span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button class="text-slate-600 hover:text-slate-800" @onclick="() => ViewCredential(credential)">
                                <span class="material-icons">visibility</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>

    <div class="flex justify-between items-center mt-6">
        <div class="text-sm text-gray-600">Page 1 of 10</div>
        <div class="flex space-x-2">
            <button class="text-gray-600 hover:text-slate-600">Previous</button>
            <button class="text-gray-600 hover:text-slate-600">Next</button>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div class="relative bg-white p-6 rounded-lg shadow-lg w-1/2 h-3/4">
            <button class="absolute top-4 right-4 text-gray-600 hover:text-gray-800" @onclick="() => showModal = false">
                <span class="material-icons">close</span>
            </button>
            <NewBuilderCredentialForm OnCredentialCreated="HandleCredentialCreated" />
        </div>
    </div>
}

@code {
    private bool showModal;
    private List<BuilderCredential> credentials = new List<BuilderCredential>();

    protected override async Task OnInitializedAsync()
    {
        // Retrieve user's name from the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity.Name; // Assuming the Name claim is the UserId
        
        var result = await Mediator.Send(new GetBuilderCredentialsByUserIdRequest { UserId = userId });
        if (result.IsSuccess)
        {
            credentials = result.Value;
        }
        else
        {
            // Handle error, maybe log it or show a message
            Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
        }
    }

    private void ViewCredential(BuilderCredential credential)
    {
        // Navigate to detailed view of the credential
        // Example: NavigationManager.NavigateTo($"/credentials/{credential.CredentialId}");
    }

    private async Task HandleCredentialCreated()
    {
        // Refresh credentials list after creating a new credential
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity.Name; // Assuming the Name claim is the UserId
        
        var result = await Mediator.Send(new GetBuilderCredentialsByUserIdRequest { UserId = userId });
        if (result.IsSuccess)
        {
            credentials = result.Value;
        }
        else
        {
            // Handle error
            Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
        }
    }
    
    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
        {
            return text;
        }
        return text.Substring(0, maxLength) + "...";
    }

}
