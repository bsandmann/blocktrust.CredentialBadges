@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.CreateBuilderCredential
@using Blocktrust.CredentialBadges.Builder.Domain
@using FluentResults
@using MediatR
@inject IMediator Mediator

@rendermode InteractiveServer

<div class="space-y-4">
    <div class="flex items-center space-x-4">
        <label class="text-gray-600 font-medium">Label:</label>
        <input type="text" class="border rounded px-2 py-1 w-60" @bind="label" />
    </div>

    <!-- Add dynamic fields for key-value pairs -->
    @foreach (var field in credentialFields)
    {
        <div class="flex items-center space-x-4">
            <input type="text" class="border rounded px-2 py-1 w-48" @bind="field.Key" placeholder="Key" />
            <input type="text" class="border rounded px-2 py-1 w-48" @bind="field.Value" placeholder="Value" />
            <button class="bg-red-500 text-white px-2 py-1 rounded" @onclick="() => RemoveField(field)">-</button>
        </div>
    }

    <button class="bg-blue-500 text-white px-2 py-1 rounded" @onclick="AddField">Add Field</button>

    <button class="bg-green-500 text-white px-4 py-2 rounded mt-4 float-right" @onclick="CreateCredential">Create Credential</button>
</div>

@code {
    private string label = "";
    private List<KeyValueModel> credentialFields = new List<KeyValueModel>();

    private void AddField()
    {
        credentialFields.Add(new KeyValueModel());
    }

    private void RemoveField(KeyValueModel field)
    {
        credentialFields.Remove(field);
    }

    private async Task CreateCredential()
    {
        // Get DIDs from local storage or another source
        var subjectDid = "subjectDid";
        var issuerDid = "issuerDid";
        var subjectConnectionId = Guid.NewGuid();
        var issuerConnectionId = Guid.NewGuid();

        // Autogenerate UTC date
        var date = DateTime.UtcNow;

        // Convert fields to string
        var credentialSubject = string.Join(", ", credentialFields.Select(f => $"{f.Key}: {f.Value}"));

        var request = new CreateBuilderCredentialRequest
        {
            Date = date,
            Label = label,
            SubjectDid = subjectDid,
            IssuerDid = issuerDid,
            Status = EBuilderCredentialStatus.Pending,
            IssuerConnectionId = issuerConnectionId,
            SubjectConnectionId = subjectConnectionId,
            CredentialSubject = credentialSubject
        };

        // Explicitly specify the return type of Mediator.Send
        var result = await Mediator.Send<Result<BuilderCredential>>(request);

        if (result.IsSuccess)
        {
            await OnCredentialCreated.InvokeAsync(); // Notify parent component (credentials page)
            // Optionally show success message to user
            Console.WriteLine("Credential created successfully.");
        }
        else
        {
            // Handle failure, show error message to user
            Console.WriteLine("Failed to create credential: " + result.Errors.First().Message);
        }
    }

    [Parameter]
    public EventCallback OnCredentialCreated { get; set; }

    // Model for key-value pair
    public class KeyValueModel
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }
}
