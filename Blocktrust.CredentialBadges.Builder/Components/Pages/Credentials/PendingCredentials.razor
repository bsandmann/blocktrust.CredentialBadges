@page "/credentials/pending"
@layout CredentialsLayout
@using Blocktrust.CredentialBadges.Builder.Domain
@using Blocktrust.CredentialBadges.Builder.Enums
@using Blocktrust.CredentialBadges.Builder.Commands.BuilderCredentials.GetAllBuilderCredentials
@using Blocktrust.CredentialBadges.Builder.Components.Layout
@using MediatR
@inject IMediator Mediator

<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800">Pending Credentials</h2>
        <button class="bg-slate-600 text-white px-4 py-2 rounded flex items-center">
            <span class="material-icons mr-2">add</span> New Credential
        </button>
    </div>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-300 rounded">
            <thead>
                <tr class="bg-slate-100">
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Label</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Subject DID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var credential in credentials.Where(c => c.Status == EBuilderCredentialStatus.Pending))
                {
                    <tr class="border-t border-gray-300">
                        <td class="px-6 py-4 whitespace-nowrap">@credential.Date.ToShortDateString()</td>
                        <td class="px-6 py-4 whitespace-nowrap">@credential.Label</td>
                        <td class="px-6 py-4 whitespace-nowrap">@credential.SubjectDid</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full text-xs">Pending</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <button class="text-slate-600 hover:text-slate-800" @onclick="() => ViewCredential(credential)">
                                <span class="material-icons">visibility</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="flex justify-between items-center mt-6">
        <div class="text-sm text-gray-600">Page 1 of 10</div>
        <div class="flex space-x-2">
            <button class="text-gray-600 hover:text-slate-600">Previous</button>
            <button class="text-gray-600 hover:text-slate-600">Next</button>
        </div>
    </div>
</div>

@code {
    private List<BuilderCredential> credentials = new List<BuilderCredential>();

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Send(new GetAllBuilderCredentialsRequest());
        if (result.IsSuccess)
        {
            credentials = result.Value;
        }
        else
        {
            // Handle error, maybe log it or show a message
            Console.WriteLine("Error retrieving credentials: " + result.Errors.First().Message);
        }
    }

    private void ViewCredential(BuilderCredential credential)
    {
        // Navigate to detailed view of the credential
        // Example: NavigationManager.NavigateTo($"/credentials/{credential.CredentialId}");
    }
}
