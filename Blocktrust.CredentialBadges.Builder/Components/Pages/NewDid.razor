@page "/new-did"
@using Blocktrust.CredentialBadges.Builder.Commands.NewDid.NewDidAndApiKey
@using MediatR
@using Microsoft.AspNetCore.Authorization
@inject IMediator Mediator
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]
@implements IDisposable

<PageTitle>@GetBrowserPageTitle()</PageTitle>

<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-16">
        <!-- Left Side: Title and Description -->
        <div class="mt-10">
            <h2 class="text-2xl font-semibold mb-4 text-slate-700">New DID</h2>
            <h3 class="text-slate-700 mb-4">Create a new Decentralized Identifier (DID) or input an existing DID and API Key.</h3>
            <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-4">
                <p class="font-semibold mb-2">What are DID and API Key?</p>
                <ul class="list-disc list-inside">
                    <li>DID: Your unique digital identity identifier</li>
                    <li>API Key: A key for secure access to credential services</li>
                </ul>
            </div>
        </div>

        <!-- Right Side: Display Containers -->
        <div class="mt-10">
            <div class="mb-4">
                <label class="block text-slate-700 mb-1 bg-gray-200 p-1 rounded">DID</label>
                <div class="flex items-center border border-gray-300 rounded p-2">
                    @if (isLoading)
                    {
                        <p class="text-gray-500">Loading...</p>
                    }
                    else
                    {
                        <input type="text" class="w-full bg-transparent outline-none" @bind="didResult"/>
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(didResult)">
                            <span class="material-symbols-outlined">content_copy</span>
                        </button>
                    }
                </div>
            </div>

            <div class="mb-4">
                <label class="block text-slate-700 mb-1 bg-gray-200 p-1 rounded">API Key</label>
                <div class="flex items-center border border-gray-300 rounded p-2">
                    @if (isLoading)
                    {
                        <p class="text-gray-500">Loading...</p>
                    }
                    else
                    {
                        <input type="text" class="w-full bg-transparent outline-none" @bind="apiKeyResult"/>
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(apiKeyResult)">
                            <span class="material-symbols-outlined">content_copy</span>
                        </button>
                    }
                </div>
            </div>
            
            <div class="flex justify-end mb-4">
                <button class="text-slate-700 hover:text-slate-900 focus:outline-none flex items-center" @onclick="SaveCredentials" disabled="@isLoading">
                    <span class="material-symbols-outlined mr-1 text-lg">save</span>
                    <span class="text-sm">Save</span>
                </button>
            </div>

            @if (showNoCredentialsWarning)
            {
                <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4" role="alert">
                    <p class="font-bold">Warning</p>
                    <p>No DID and API Key were found. Please generate new credentials or input existing ones.</p>
                </div>
            }

           <div class="flex justify-start">
                <button class="bg-slate-700 min-w-36 h-12 text-white p-2 rounded hover:bg-slate-600" @onclick="ShowWarningModal" disabled="@isLoading">Generate New</button>
            </div>
        </div>
    </div>
    
    <WarningModal 
        IsVisible="@isWarningModalVisible" 
        OnClose="@CloseWarningModal" 
        OnContinue="@ContinueWithGeneration" />

    <div class="fixed bottom-4 right-4 px-4 py-2 rounded-md shadow-lg transition-opacity duration-300 @(showToast ? "opacity-100" : "opacity-0") @(isToastError ? "bg-red-500" : "bg-green-500") text-white">
        @toastMessage
    </div>
</div>

@code {
    private string didResult = "";
    private string apiKeyResult = "";
    private bool isLoading;
    private bool isWarningModalVisible;
    private bool showNoCredentialsWarning;
    private bool showToast;
    private bool isToastError;
    private string toastMessage = "";

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        await FetchDidAndApiKey();
        await UpdatePageTitle();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdatePageTitle();
        }
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await UpdatePageTitle();
            StateHasChanged();
        });
    }

    private async Task UpdatePageTitle()
    {
        var title = GetBrowserPageTitle();
        if (!string.IsNullOrWhiteSpace(title))
        {
            await JS.InvokeVoidAsync("updatePageTitle", title);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private string GetBrowserPageTitle()
    {
        return "Blocktrust Credentials - New DID";
    }

    private async Task FetchDidAndApiKey()
    {
        isLoading = true;
        StateHasChanged();

        didResult = await JS.InvokeAsync<string>("localStorage.getItem", "did") ?? "";
        apiKeyResult = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey") ?? "";

        showNoCredentialsWarning = string.IsNullOrEmpty(didResult) || string.IsNullOrEmpty(apiKeyResult);

        isLoading = false;
        StateHasChanged();
    }

    private async Task GenerateNew()
    {
        isLoading = true;
        StateHasChanged();

        var request = new NewDidAndApiKeyRequest
        {
            Seed = GenerateRandomHexString(128),
            WalletName = GenerateRandomName(8)
        };

        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            didResult = result.Value.Did;
            apiKeyResult = result.Value.ApiKey;

            await SaveCredentials();
            await ClearConnectionIds();
            ShowToast("New DID and API Key generated successfully", false);
        }
        else
        {
            ShowToast("Error generating DID and API key", true);
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task SaveCredentials()
    {
        if (ValidateDid(didResult) && ValidateApiKey(apiKeyResult))
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "did", didResult);
            await JS.InvokeVoidAsync("localStorage.setItem", "apiKey", apiKeyResult);
            await ClearConnectionIds();
            showNoCredentialsWarning = false;
            ShowToast("DID and API Key saved!", false);
            StateHasChanged();
        }
        else
        {
            ShowToast("Invalid DID or API Key", true);
        }
    }

    private async Task ClearConnectionIds()
    {
        await JS.InvokeVoidAsync("localStorageFunctions.removeItem", "acceptConnectionId");
        await JS.InvokeVoidAsync("localStorageFunctions.removeItem", "initializeConnectionId");
    }

    private bool ValidateDid(string did)
    {
        // TODO: Implement actual DID validation
        return !string.IsNullOrWhiteSpace(did);
    }

    private bool ValidateApiKey(string apiKey)
    {
        // TODO: Implement actual API Key validation
        return !string.IsNullOrWhiteSpace(apiKey);
    }
    
    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        ShowToast("Copied to clipboard", false);
    }

    private string GenerateRandomHexString(int length)
    {
        var random = new Random();
        var buffer = new byte[length / 2];
        random.NextBytes(buffer);
        return BitConverter.ToString(buffer).Replace("-", "").ToLower();
    }

    private string GenerateRandomName(int length)
    {
        var random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
    
    private void ShowWarningModal()
    {
        if (string.IsNullOrEmpty(didResult) && string.IsNullOrEmpty(apiKeyResult))
        {
            // If no credentials exist, generate new ones without showing the warning
            ContinueWithGeneration();
        }
        else
        {
            // If credentials exist, show the warning modal
            isWarningModalVisible = true;
        }
    }

    private void CloseWarningModal()
    {
        isWarningModalVisible = false;
    }

    private async Task ContinueWithGeneration()
    {
        isWarningModalVisible = false;
        await GenerateNew();
    }

    private void ShowToast(string message, bool isError)
    {
        toastMessage = message;
        isToastError = isError;
        showToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false;
            StateHasChanged();
        });
    }
}