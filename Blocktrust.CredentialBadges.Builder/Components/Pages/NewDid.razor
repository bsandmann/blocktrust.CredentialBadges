@page "/new-did"
@using Blocktrust.CredentialBadges.Builder.Commands.NewDid
@using MediatR
@inject IMediator Mediator

<div class="max-w-4xl mx-auto px-4 py-8">
    <h3 class="text-2xl font-semibold mb-4 text-slate-700">New DID</h3>

    <p class="text-slate-700 mb-4">Create a new Decentralized Identifier (DID).</p>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Left Side: Display Containers -->
        <div class="border border-slate-500 p-4 rounded-lg">
            <p class="text-slate-700 mb-2">DID</p>
            <div class="flex items-center justify-between bg-slate-500 text-white rounded-lg p-2 mb-2">
                <p class="text-sm truncate">@didResult</p>
                <button class="bg-slate-500 hover:bg-slate-600 text-white p-1 rounded" @onclick="() => CopyToClipboard(didResult)">
                    <span class="material-icons-outlined">content_copy</span>
                </button>
            </div>
            <p class="text-slate-500 text-xs">Click the copy icon to copy the DID.</p>
        </div>

        <div class="border border-slate-500 p-4 rounded-lg">
            <p class="text-slate-700 mb-2">API Key</p>
            <div class="flex items-center justify-between bg-slate-500 text-white rounded-lg p-2 mb-2">
                <p class="text-sm truncate">@apiKeyResult</p>
                <button class="bg-slate-500 hover:bg-slate-600 text-white p-1 rounded" @onclick="() => CopyToClipboard(apiKeyResult)">
                    <span class="material-icons-outlined">content_copy</span>
                </button>
            </div>
            <p class="text-slate-500 text-xs">Click the copy icon to copy the API Key.</p>
        </div>
    </div>

    <button class="btn btn-primary mt-4">Generate New DID & API Key</button>
     @* @onclick="GenerateNew" *@
</div>

@code {
    private string didResult;
    private string apiKeyResult;
    //
    // private async Task GenerateNew()
    // {
    //     var request = new NewDidAndApiKeyRequest
    //     {
    //         Seed = "SampleSeed", // Replace with actual seed value if needed
    //         WalletName = "SampleWallet" // Replace with actual wallet name if needed
    //     };
    //
    //     var result = await Mediator.Send(request);
    //
    //     if (result.IsSuccess)
    //     {
    //         // result contains DID and API key, update the UI
    //         didResult = "Generated DID"; // Replace with actual value
    //         apiKeyResult = "Generated API Key"; // Replace with actual value
    //     }
    //     else
    //     {
    //         // Handle error if necessary
    //         Console.WriteLine("Error generating DID and API key.");
    //     }
    // }

    private void CopyToClipboard(string text)
    {
        // Simulate copying to clipboard (replace with actual implementation)
        Console.WriteLine($"Copying {text} to clipboard...");
    }
}
