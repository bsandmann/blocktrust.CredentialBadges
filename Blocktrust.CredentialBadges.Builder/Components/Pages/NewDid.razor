@page "/new-did"
@using Blocktrust.CredentialBadges.Builder.Commands.NewDid
@using MediatR
@inject IMediator Mediator
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Left Side: Title and Description -->
        <div>
            <h3 class="text-2xl font-semibold mb-4 text-slate-700">New DID</h3>
            <p class="text-slate-700 mb-4">Create a new Decentralized Identifier (DID).</p>
        </div>

        <!-- Right Side: Display Containers -->
        <div>
            <div class="mb-4">
                <label class="block text-slate-700 mb-1 bg-gray-200 p-1 rounded">DID</label>
                <div class="flex items-center border border-gray-300 rounded p-2">
                    @if (isLoading)
                    {
                        <p class="text-gray-500">Loading...</p>
                    }
                    else
                    {
                        <input type="text" class="w-full bg-transparent outline-none" value="@didResult" readonly />
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(didResult)">
                            <span class="material-icons">
                                content_copy
                            </span>

                        </button>
                    }
                </div>
            </div>

            <div class="mb-4">
                <label class="block text-slate-700 mb-1 bg-gray-200 p-1 rounded">API Key</label>
                <div class="flex items-center border border-gray-300 rounded p-2">
                    @if (isLoading)
                    {
                        <p class="text-gray-500">Loading...</p>
                    }
                    else
                    {
                        <input type="text" class="w-full bg-transparent outline-none" value="@apiKeyResult" readonly />
                        <button class="ml-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(apiKeyResult)">
                            <span class="material-icons">
                            content_copy
                            </span>
                        </button>
                    }
                </div>
            </div>

            <button class="btn btn-primary mt-4" @onclick="GenerateNew" disabled="@isLoading">Generate New DID & API Key</button>
        </div>
    </div>
</div>

@code {
    private string didResult;
    private string apiKeyResult;
    private bool isLoading;
    private bool isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchOrGenerateDidAndApiKey();
        }
    }

    private async Task FetchOrGenerateDidAndApiKey()
    {
        isLoading = true;
        StateHasChanged();

        didResult = await JS.InvokeAsync<string>("localStorage.getItem", "did");
        apiKeyResult = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");

        if (string.IsNullOrEmpty(didResult) || string.IsNullOrEmpty(apiKeyResult))
        {
            await GenerateNew();
        }
        else
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateNew()
    {
        isLoading = true;
        StateHasChanged();

        var request = new NewDidAndApiKeyRequest
        {
            Seed = GenerateRandomHexString(128),
            WalletName = GenerateRandomName(8)
        };

        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            didResult = result.Value.Did;
            apiKeyResult = result.Value.ApiKey;

            await JS.InvokeVoidAsync("localStorage.setItem", "did", didResult);
            await JS.InvokeVoidAsync("localStorage.setItem", "apiKey", apiKeyResult);
        }
        else
        {
            Console.WriteLine("Error generating DID and API key.");
        }

        isLoading = false;
        StateHasChanged();
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Console.WriteLine($"Copied {text} to clipboard.");
    }

    private string GenerateRandomHexString(int length)
    {
        var random = new Random();
        var buffer = new byte[length / 2];
        random.NextBytes(buffer);
        return BitConverter.ToString(buffer).Replace("-", "").ToLower();
    }

    private string GenerateRandomName(int length)
    {
        var random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
}
