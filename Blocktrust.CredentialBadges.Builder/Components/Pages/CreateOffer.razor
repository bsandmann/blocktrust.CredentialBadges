@page "/create-offer"
@using Blocktrust.CredentialBadges.Builder.Commands.Offers.CreateOffer
@using MediatR
@inject IMediator Mediator
@inject ILogger<CreateOfferHandler> Logger
@rendermode InteractiveServer

<h3>Create Credential Offer</h3>

<EditForm Model="_offerRequest" OnValidSubmit="HandleValidSubmit" FormName="createOfferForm">


    <div class="form-group">
        <label for="issuingDID">Issuing DID</label>
        <InputText id="issuingDID" class="form-control" @bind-Value="_offerRequest.IssuingDID" />
    </div>

    <div class="form-group">
        <label for="connectionId">Connection ID</label>
        <InputText id="connectionId" class="form-control" @bind-Value="_connectionId" />
    </div>

    <br />

    <!--  ACHIEVEMENT -->
    <h1>Achievement:</h1>
    <p>id: urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922 </p>
    <p>type: Achievement </p>
    <p>name: Badge </p>
    <p>description: This is a sample credential issued by the Digital Credentials Consortium to demonstrate the functionality of Verifiable Credentials for wallets and verifiers. </p>
    <p>criteria: This credential was issued to a student that demonstrated proficiency in the Python programming language... </p>
    <p>image: https://user-images.githubusercontent.com/752326/214947713-15826a3a-b5ac-4fba-8d4a-884b60cb7157.png </p>

    <hr/>

    <button type="submit" class="btn btn-primary">Create Offer</button>
</EditForm>

<h2>Offer:</h2>
<pre>@_offerresult</pre>

@code {
    private string _connectionId = "e9df055a-57f8-4ef2-87c6-bc035f4256f0";
    private string _offerresult = "pending...";
    
    private static Guid ConvertToGuid(string guidString)
    {
        if (Guid.TryParse(guidString, out Guid guid))
        {
            return guid;
        }
        return Guid.Empty; 
    }

    
    private CreateOfferRequest _offerRequest = new()
    {
        Claims = new 
        {
            type = new List<string> { "AchievementSubject" },
            achievement = new
            {
                id = "urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922",
                type = new List<string> { "Achievement" },
                achievementType = "Diploma",
                name = "Badge",
                description = "This is a sample credential issued by the Digital Credentials Consortium to demonstrate the functionality of Verifiable Credentials for wallets and verifiers.",
                criteria = new
                {
                    type = "Criteria",
                    narrative = "This credential was issued to a student that demonstrated proficiency in the Python programming language through activities performed in the course titled *Introduction to Python* offered by [Example Institute of Technology](https://exit.example.edu) from **February 17, 2023** to **June 12, 2023**. This is a credential with the following criteria:\n1. completed all homework assignments\n2. passed all exams\n3. completed final group project"
                },
                image = new
                {
                    id = "image",
                    type = "Image"
                }
            }
        },
        CredentialFormat = "JWT",
        IssuingDID = "did:prism:7e2dc793804699ea6c11570f02fb43eb32f9066f540d2b173209481b958c8504:CoQBCoEBEkIKDm15LWlzc3Vpbmcta2V5EAJKLgoJc2VjcDI1NmsxEiECHMWgUM3HbC8942TkwHyBulPNiE-JaVdO2uO4Vp5fREASOwoHbWFzdGVyMBABSi4KCXNlY3AyNTZrMRIhAlUNGDTlTX9ivHD_6Kiv1dxtZzdEpCO8fTDBewycsaEw",
        ConnectionId = Guid.Empty,
        AutomaticIssuance = true
    };
    

    private async Task HandleValidSubmit()
    {
        _offerRequest.ConnectionId = ConvertToGuid(_connectionId);
        var result = await Mediator.Send(_offerRequest);
        
        if (result.IsSuccess)
        {
            _offerresult = result.Value.Thid;
            Logger.LogInformation("Offer created successfully: {Result}", result.Value);
        }
        else
        {
            _offerresult = "Error creating offer";
            Logger.LogError("Error creating offer: {Error}", result.Errors.FirstOrDefault()?.Message);
        }
    }
}
