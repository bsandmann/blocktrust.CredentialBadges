@page "/generate-credential"
@using Blocktrust.CredentialBadges.Builder.Commands.Credentials.GenerateCredential
@using MediatR
@using Blocktrust.CredentialBadges.Web.Services.Images
@inject IMediator Mediator
@inject ILogger<GenerateCredentialHandler> Logger
@inject ClipboardService ClipboardService
@inject ImageBytesToBase64 ImageBytesToBase64
@rendermode InteractiveServer

<h3>Generate Credential</h3>

<div class="form-group">
    <label for="issuingDID">Issuing DID</label>
    <input id="issuingDID" class="form-control" @bind="@_issuingDID"/>
</div>

<div class="form-group">
    <label for="connectionId">Connection ID</label>
    <input id="connectionId" class="form-control" @bind="@_connectionId"/>
</div>

<div class="form-group">
    <label for="subjectId">Subject ID</label>
    <input id="subjectId" class="form-control" @bind="@_subjectId"/>
</div>

<div class="form-group">
    <label for="imageUpload">Upload Image</label>
    <InputFile id="imageUpload" OnChange="HandleImageUpload"/>
</div>

<div class="form-group">
    <label for="validityPeriod">Validity Period</label>
    <input id="validityPeriod" type="number" class="form-control" @bind="@_validityPeriod"/>
</div>

<br/>

<!-- ACHIEVEMENT -->
<h1>Achievement:</h1>
<p>id: urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922</p>
<p>type: Achievement</p>
<p>name: Badge</p>
<p>description: This is a sample credential issued by the Digital Credentials Consortium to demonstrate the functionality of Verifiable Credentials for wallets and verifiers.</p>
<p>criteria: This credential was issued to a student that demonstrated proficiency in the Python programming language...</p>
<p>image: @(_uploadedImageBase64 != null ? "data:image/png;base64," + _uploadedImageBase64 : "No Image")</p>

<hr/>

<button class="btn btn-primary" @onclick="HandleGenerateCredential">Generate Credential</button>

<h2>Credential (Base64):</h2>
<pre>@_offerResult</pre>

<button class="btn btn-success" @onclick="() => ClipboardService.CopyTextToClipboard(_offerResult)">Copy result</button>

@code {
    private string _issuingDID = "did:prism:7e2dc793804699ea6c11570f02fb43eb32f9066f540d2b173209481b958c8504:CoQBCoEBEkIKDm15LWlzc3Vpbmcta2V5EAJKLgoJc2VjcDI1NmsxEiECHMWgUM3HbC8942TkwHyBulPNiE-JaVdO2uO4Vp5fREASOwoHbWFzdGVyMBABSi4KCXNlY3AyNTZrMRIhAlUNGDTlTX9ivHD_6Kiv1dxtZzdEpCO8fTDBewycsaEw";
    private string _connectionId = "e9df055a-57f8-4ef2-87c6-bc035f4256f0";
    private string _subjectId = "did:prism:36add215cb7f029113e6a342b3b8311383e80db4cc82665c991b1a8c8617fa11:CnsKeRI6CgZhdXRoLTEQBEouCglzZWNwMjU2azESIQPSdwnkOui4POkwKK3VxJz09z2hBGwq3AhxE8hQovkMVBI7CgdtYXN0ZXIwEAFKLgoJc2VjcDI1NmsxEiECrPIB60w33wcXrcWTH-cbh0DyemYCPsX1mKkmLrzH4ow";
    private string _uploadedImageBase64 = "";
    private string _offerResult = "";
    private int _validityPeriod = 15;

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("Image upload started");
        var imageFile = e.File;
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);

// Convert image bytes to base64 string
        var result = ImageBytesToBase64.Convert(buffer);
        if (result.IsSuccess)
        {
            _uploadedImageBase64 = result.Value;
            Logger.LogInformation("Image upload successful, base64: {Base64}", _uploadedImageBase64);
        }
        else
        {
            Logger.LogError("Image upload and conversion failed: {Error}", result.Errors.FirstOrDefault()?.Message);
        }
    }

    private async Task HandleGenerateCredential()
    {
        _offerResult = "generating...";
        if (!Guid.TryParse(_connectionId, out Guid guid))
        {
            _offerResult = "Error creating offer: Not a valid connection id";
            Logger.LogError("Error creating offer: Not a valid connection id");
            return;
        }

        var generateCredentialRequest = new GenerateCredentialRequest
        {
            Claims = new
            {
                type = new List<string> { "AchievementSubject" },
                achievement = new
                {
                    id = "urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922",
                    type = new List<string> { "Achievement" },
                    achievementType = "Diploma",
                    name = "Badge",
                    description = "This is a sample credential issued by the Digital Credentials Consortium to demonstrate the functionality of Verifiable Credentials for wallets and verifiers.",
                    criteria = new
                    {
                        type = "Criteria",
                        narrative = "This credential was issued to a student that demonstrated proficiency in the Python programming language through activities performed in the course titled *Introduction to Python* offered by [Example Institute of Technology](https://exit.example.edu) from **February 17, 2023** to **June 12, 2023**. This is a credential with the following criteria:\n1. completed all homework assignments\n2. passed all exams\n3. completed final group project"
                    },
                    image = new
                    {
                        id = _uploadedImageBase64,
                        type = "Image",
                    }
                }
            },
            CredentialFormat = "JWT",
            IssuingDID = _issuingDID,
            ConnectionId = guid,
            SubjectId = _subjectId,
            AutomaticIssuance = true,
            ValidityPeriod = _validityPeriod
        };

        var result = await Mediator.Send(generateCredentialRequest);

        if (result.IsSuccess)
        {
            _offerResult = result.Value;
            Logger.LogInformation("Offer created successfully: {Result}", result.Value);
        }
        else
        {
            _offerResult = "Error creating offer";
            Logger.LogError("Error creating offer: {Error}", result.Errors.FirstOrDefault()?.Message);
        }
    }

}