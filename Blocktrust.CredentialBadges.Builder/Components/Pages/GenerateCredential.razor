@page "/generate-credential"
@using Blocktrust.CredentialBadges.Builder.Commands.Credentials.GenerateCredential
@using MediatR
@using Blocktrust.CredentialBadges.Web.Services.Images
@inject IMediator Mediator
@inject ILogger<GenerateCredentialHandler> Logger
@inject ClipboardService ClipboardService
@inject ImageBytesToBase64 ImageBytesToBase64
@rendermode InteractiveServer

<h3>Generate Credential</h3>

<EditForm Model="_generateCredentialRequest" OnValidSubmit="HandleValidSubmit" FormName="generateForm">
    <div class="form-group">
        <label for="issuingDID">Issuing DID</label>
        <InputText id="issuingDID" class="form-control" @bind-Value="_generateCredentialRequest.IssuingDID" />
    </div>

    <div class="form-group">
        <label for="connectionId">Connection ID</label>
        <InputText id="connectionId" class="form-control" @bind-Value="_connectionId" />
    </div>
    
    <div class="form-group">
        <label for="subjectId">Subject ID</label>
        <InputText id="subjectId" class="form-control" @bind-Value="_subjectId" />
    </div>
    
    <div class="form-group">
        <label for="imageUpload">Upload Image</label>
        <InputFile id="imageUpload" OnChange="HandleImageUpload" />
    </div>
    
    <div class="form-group">
        <label for="validityPeriod">Validity Period</label>
        <InputNumber id="validityPeriod" class="form-control" @bind-Value="_generateCredentialRequest.ValidityPeriod" />
    </div>

    <br/>

    <!-- ACHIEVEMENT -->
    <h1>Achievement:</h1>
    <p>id: urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922</p>
    <p>type: Achievement</p>
    <p>name: Badge</p>
    <p>description: This is a sample credential issued by the Digital Credentials Consortium to demonstrate the functionality of Verifiable Credentials for wallets and verifiers.</p>
    <p>criteria: This credential was issued to a student that demonstrated proficiency in the Python programming language...</p>
    <p>image: @(_uploadedImageBase64 != null ? "data:image/png;base64," + _uploadedImageBase64 : "No Image")</p>

    <hr/>

    <button type="submit" class="btn btn-primary">Generate Credential</button>
</EditForm>

<h2>Credential (Base64):</h2>
<pre>@_offerResult</pre>

<button class="btn btn-success" @onclick="() => ClipboardService.CopyTextToClipboard(_offerResult)">Copy result</button>

@code {
    private string _connectionId = "e9df055a-57f8-4ef2-87c6-bc035f4256f0";
    private string _subjectId = "did:prism:36add215cb7f029113e6a342b3b8311383e80db4cc82665c991b1a8c8617fa11:CnsKeRI6CgZhdXRoLTEQBEouCglzZWNwMjU2azESIQPSdwnkOui4POkwKK3VxJz09z2hBGwq3AhxE8hQovkMVBI7CgdtYXN0ZXIwEAFKLgoJc2VjcDI1NmsxEiECrPIB60w33wcXrcWTH-cbh0DyemYCPsX1mKkmLrzH4ow";
    private string _uploadedImageBase64 = "";
    private string _offerResult = "";
    private GenerateCredentialRequest _generateCredentialRequest = new()
    {
        Claims = new
        {
            type = new List<string> { "AchievementSubject" },
            achievement = new
            {
                id = "urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922",
                type = new List<string> { "Achievement" },
                achievementType = "Diploma",
                name = "Badge",
                description = "This is a sample credential issued by the Digital Credentials Consortium to demonstrate the functionality of Verifiable Credentials for wallets and verifiers.",
                criteria = new
                {
                    type = "Criteria",
                    narrative = "This credential was issued to a student that demonstrated proficiency in the Python programming language through activities performed in the course titled *Introduction to Python* offered by [Example Institute of Technology](https://exit.example.edu) from **February 17, 2023** to **June 12, 2023**. This is a credential with the following criteria:\n1. completed all homework assignments\n2. passed all exams\n3. completed final group project"
                },
                image = new
                {
                    id = "Image",
                    type = "Image"
                }
            }
        },
        CredentialFormat = "JWT",
        IssuingDID = "did:prism:7e2dc793804699ea6c11570f02fb43eb32f9066f540d2b173209481b958c8504:CoQBCoEBEkIKDm15LWlzc3Vpbmcta2V5EAJKLgoJc2VjcDI1NmsxEiECHMWgUM3HbC8942TkwHyBulPNiE-JaVdO2uO4Vp5fREASOwoHbWFzdGVyMBABSi4KCXNlY3AyNTZrMRIhAlUNGDTlTX9ivHD_6Kiv1dxtZzdEpCO8fTDBewycsaEw",
        ConnectionId = Guid.Empty,
        AutomaticIssuance = true,
        ValidityPeriod = 15
    };

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("Image upload started");
        var imageFile = e.File;
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);

        // Convert image bytes to base64 string
        var result = ImageBytesToBase64.Convert(buffer);
        if (result.IsSuccess)
        {
            _uploadedImageBase64 = result.Value;
            // _generateCredentialRequest.Claims.achievement.image.data = _uploadedImageBase64;
            Logger.LogInformation("Image upload successful, base64: {Base64}", _uploadedImageBase64);
        }
        else
        {
            Logger.LogError("Image upload and conversion failed: {Error}", result.Errors.FirstOrDefault()?.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        _offerResult = "generating...";
        if (!Guid.TryParse(_connectionId, out Guid guid))
        {
            _offerResult = "Error creating offer: Not a valid connection id";
            Logger.LogError("Error creating offer: Not a valid connection id");
        }
        else
        {
            _generateCredentialRequest.ConnectionId = guid;
            _generateCredentialRequest.SubjectId = _subjectId;

            var result = await Mediator.Send(_generateCredentialRequest);

            if (result.IsSuccess)
            {
                _offerResult = result.Value;
                Logger.LogInformation("Offer created successfully: {Result}", result.Value);
            }
            else
            {
                _offerResult = "Error creating offer";
                Logger.LogError("Error creating offer: {Error}", result.Errors.FirstOrDefault()?.Message);
            }
        }
    }
}
