@page "/generate-demo-credential"
@using Blocktrust.CredentialBadges.Core.Services.Clipboard
@using MediatR
@using Blocktrust.CredentialBadges.Builder.Commands.AutogenerateCredential.GenerateCredential
@using Blocktrust.CredentialBadges.Core.Services.Images
@inject IMediator Mediator
@inject ILogger<GenerateCredentialHandler> Logger
@inject ClipboardService ClipboardService
@inject ImageBytesToBase64 ImageBytesToBase64
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Blocktrust Credentials Generate Credential</PageTitle>

<div class="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
    <div class="relative py-3 sm:max-w-xl sm:mx-auto">
        <div class="absolute inset-0 bg-gradient-to-r from-cyan-400 to-light-blue-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
        <div class="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
            <h1 class="text-2xl font-semibold text-center mb-6">Generate Demo Credential</h1>

            <div class="space-y-4">
                <div>
                    <label for="issuingDID" class="block text-sm font-medium text-gray-700">Issuing DID</label>
                    <input id="issuingDID" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" @bind="@_issuingDID"/>
                </div>

                <div>
                    <label for="connectionId" class="block text-sm font-medium text-gray-700">Connection ID</label>
                    <input id="connectionId" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" @bind="@_connectionId"/>
                </div>

                <div>
                    <label for="subjectId" class="block text-sm font-medium text-gray-700">Subject ID</label>
                    <input id="subjectId" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" @bind="@_subjectId"/>
                </div>

                <div>
                    <label for="imageUpload" class="block text-sm font-medium text-gray-700">Upload Image</label>
                    <InputFile id="imageUpload" OnChange="HandleImageUpload" class="mt-1 block w-full text-sm text-gray-500
                        file:mr-4 file:py-2 file:px-4
                        file:rounded-full file:border-0
                        file:text-sm file:font-semibold
                        file:bg-violet-50 file:text-violet-700
                        hover:file:bg-violet-100"/>
                </div>

                <div>
                    <label for="validityPeriod" class="block text-sm font-medium text-gray-700">Validity Period</label>
                    <input id="validityPeriod" type="number" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" @bind="@_validityPeriod"/>
                </div>
            </div>

            <div class="mt-8">
                <h2 class="text-lg font-semibold mb-2">Achievement Details:</h2>
                <div class="bg-gray-50 p-4 rounded-md">
                    <p><strong>ID:</strong> urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922</p>
                    <p><strong>Type:</strong> Achievement</p>
                    <p><strong>Achievement Type:</strong> Diploma</p>
                    <p><strong>Name:</strong> Diploma in Decentralized Identity Solutions</p>
                    <p><strong>Description:</strong> This credential is issued by Blocktrust University to recognize the completion of a specialized course in developing decentralized identity solutions.</p>
                    <p><strong>Criteria:</strong> This credential was issued to a student who demonstrated proficiency in developing decentralized identity solutions through activities performed in the course titled <em>Advanced Decentralized Identity Solutions</em> offered by Blocktrust University from <strong>January 15, 2024</strong> to <strong>May 30, 2024</strong>. The criteria for earning this credential include:</p>
                    <ul class="list-disc list-inside ml-4">
                        <li>Completion of all course modules</li>
                        <li>Successful participation in hands-on labs</li>
                        <li>Passing all quizzes and final exams</li>
                        <li>Development of a capstone project showcasing decentralized identity solutions</li>
                    </ul>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(_uploadedImageBase64))
            {
                <div class="mt-4">
                    <p class="text-sm font-medium text-gray-700 mb-2">Uploaded Image:</p>
                    <img src="data:image/png;base64,@_uploadedImageBase64" alt="Uploaded Image" class="max-w-full h-auto rounded-md"/>
                </div>
            }

            <div class="mt-8">
                <button class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" @onclick="HandleGenerateCredential">
                    Generate Credential
                </button>
            </div>

            @if (!string.IsNullOrEmpty(_offerResult))
            {
                <div class="mt-8">
                    <h2 class="text-lg font-semibold mb-2">Credential (Base64):</h2>
                    <div class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                        <pre class="text-xs">@_offerResult</pre>
                    </div>
                    <button class="mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" @onclick="() => ClipboardService.CopyTextToClipboard(_offerResult)">
                        Copy result
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _issuingDID = "did:prism:7e2dc793804699ea6c11570f02fb43eb32f9066f540d2b173209481b958c8504:CoQBCoEBEkIKDm15LWlzc3Vpbmcta2V5EAJKLgoJc2VjcDI1NmsxEiECHMWgUM3HbC8942TkwHyBulPNiE-JaVdO2uO4Vp5fREASOwoHbWFzdGVyMBABSi4KCXNlY3AyNTZrMRIhAlUNGDTlTX9ivHD_6Kiv1dxtZzdEpCO8fTDBewycsaEw";
    private string _connectionId = "e9df055a-57f8-4ef2-87c6-bc035f4256f0";
    private string _subjectId = "did:prism:36add215cb7f029113e6a342b3b8311383e80db4cc82665c991b1a8c8617fa11:CnsKeRI6CgZhdXRoLTEQBEouCglzZWNwMjU2azESIQPSdwnkOui4POkwKK3VxJz09z2hBGwq3AhxE8hQovkMVBI7CgdtYXN0ZXIwEAFKLgoJc2VjcDI1NmsxEiECrPIB60w33wcXrcWTH-cbh0DyemYCPsX1mKkmLrzH4ow";
    private string _uploadedImageBase64 = "";
    private string _offerResult = "";
    private int _validityPeriod = 15;

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        Logger.LogInformation("Image upload started");
        var imageFile = e.File;
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);

// Convert image bytes to base64 string
        var result = ImageBytesToBase64.Convert(buffer);
        if (result.IsSuccess)
        {
            _uploadedImageBase64 = result.Value;
            Logger.LogInformation("Image upload successful, base64: {Base64}", _uploadedImageBase64);
        }
        else
        {
            Logger.LogError("Image upload and conversion failed: {Error}", result.Errors.FirstOrDefault()?.Message);
        }
    }

    private async Task HandleGenerateCredential()
    {
        _offerResult = "generating...";
        if (!Guid.TryParse(_connectionId, out Guid guid))
        {
            _offerResult = "Error creating offer: Not a valid connection id";
            Logger.LogError("Error creating offer: Not a valid connection id");
            return;
        }

        var generateCredentialRequest = new GenerateCredentialRequest
        {
            Claims = new
            {
                type = new List<string> { "AchievementSubject" },
                achievement = new
                {
                    id = "urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922",
                    type = new List<string> { "Achievement" },
                    achievementType = "Diploma",
                    name = "Diploma in Decentralized Identity Solutions",
                    description = "This credential is issued by Blocktrust University to recognize the completion of a specialized course in developing decentralized identity solutions.",
                    criteria = new
                    {
                        type = "Criteria",
                        narrative = "This credential was issued to a student who demonstrated proficiency in developing decentralized identity solutions through activities performed in the course titled *Advanced Decentralized Identity Solutions* offered by Blocktrust University from **January 15, 2024** to **May 30, 2024**. The criteria for earning this credential include:\n1. Completion of all course modules\n2. Successful participation in hands-on labs\n3. Passing all quizzes and final exams\n4. Development of a capstone project showcasing decentralized identity solutions."
                    },
                    image = new
                    {
                        id = "data:image/png;base64,"+_uploadedImageBase64,
                        type = "Image"
                    }
                }
            },
            CredentialFormat = "JWT",
            IssuingDID = _issuingDID,
            ConnectionId = guid,
            SubjectId = _subjectId,
            AutomaticIssuance = true,
            ValidityPeriod = _validityPeriod
        };

        var result = await Mediator.Send(generateCredentialRequest);

        if (result.IsSuccess)
        {
            _offerResult = result.Value;
            Logger.LogInformation("Offer created successfully: {Result}", result.Value);
        }
        else
        {
            _offerResult = "Error creating offer";
            Logger.LogError("Error creating offer: {Error}", result.Errors.FirstOrDefault()?.Message);
        }
    }

}