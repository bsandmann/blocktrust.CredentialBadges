@page "/generate-demo-credential"
@using Blocktrust.CredentialBadges.Core.Services.Clipboard
@using MediatR
@using Blocktrust.CredentialBadges.Builder.Commands.AutogenerateCredential.GenerateCredential
@using Blocktrust.CredentialBadges.Builder.Common
@using Blocktrust.CredentialBadges.Builder.Commands.Connections.InitializeConnection
@using Blocktrust.CredentialBadges.Builder.Commands.Connections.AcceptConnection
@using Blocktrust.CredentialBadges.Builder.Services
@using Microsoft.Extensions.Options
@inject IMediator Mediator
@inject ClipboardService ClipboardService
@inject IOptions<AppSettings> AppSettings
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Blocktrust Credentials Generate Credential</PageTitle>

<div class="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
    <div class="relative py-3 sm:max-w-2xl sm:mx-auto">
        <div class="absolute inset-0 bg-gradient-to-r from-cyan-400 to-light-blue-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
        <div class="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
            <h1 class="text-2xl font-semibold text-center mb-6">Generate Demo Credential</h1>

            <div class="space-y-4">
                <div>
                    <label for="issuingDID" class="block text-sm font-medium text-gray-700">Issuing DID</label>
                    <input id="issuingDID" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 bg-gray-100 text-gray-600" value="@_issuingDID" disabled/>
                </div>

                <div class="flex items-center space-x-2">
                    <div class="flex-grow">
                        <label for="connectionId" class="block text-sm font-medium text-gray-700">Connection ID</label>
                        <input id="connectionId" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 bg-gray-100 text-gray-600" value="@_connectionId" disabled/>
                    </div>
                    <button class="mt-6 p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2" 
                            @onclick="InitializeAndAcceptConnection" 
                         >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>

                <div>
                    <label for="subjectId" class="block text-sm font-medium text-gray-700">Subject DID</label>
                    <input id="subjectId" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 bg-gray-100 text-gray-600" value="@_subjectDID" disabled/>
                </div>

                <div>
                    <label for="imageUpload" class="block text-sm font-medium text-gray-700">Upload Image</label>
                    <InputFile id="imageUpload" OnChange="HandleImageUpload" class="mt-1 block w-full text-sm text-gray-500
                        file:mr-4 file:py-2 file:px-4
                        file:rounded-full file:border-0
                        file:text-sm file:font-semibold
                        file:bg-violet-50 file:text-violet-700
                        hover:file:bg-violet-100"/>
                </div>

                <div>
                    <label for="validityPeriod" class="block text-sm font-medium text-gray-700">Validity Period</label>
                    <input id="validityPeriod" type="number" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" @bind="@_validityPeriod"/>
                </div>
            </div>

            <div class="mt-8">
                <h2 class="text-lg font-semibold mb-2">Achievement Details:</h2>
                <div class="bg-gray-50 p-4 rounded-md">
                    <p><strong>ID:</strong> urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922</p>
                    <p><strong>Type:</strong> Achievement</p>
                    <p><strong>Achievement Type:</strong> Diploma</p>
                    <p><strong>Name:</strong> Diploma in Decentralized Identity Solutions</p>
                    <p><strong>Description:</strong> This credential is issued by Blocktrust University to recognize the completion of a specialized course in developing decentralized identity solutions.</p>
                    <p><strong>Criteria:</strong> This credential was issued to a student who demonstrated proficiency in developing decentralized identity solutions through activities performed in the course titled <em>Advanced Decentralized Identity Solutions</em> offered by Blocktrust University from <strong>January 15, 2024</strong> to <strong>May 30, 2024</strong>. The criteria for earning this credential include:</p>
                    <ul class="list-disc list-inside ml-4">
                        <li>Completion of all course modules</li>
                        <li>Successful participation in hands-on labs</li>
                        <li>Passing all quizzes and final exams</li>
                        <li>Development of a capstone project showcasing decentralized identity solutions</li>
                    </ul>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(_uploadedImageBase64))
            {
                <div class="mt-4">
                    <p class="text-sm font-medium text-gray-700 mb-2">Uploaded Image:</p>
                    <img src="data:image/png;base64,@_uploadedImageBase64" alt="Uploaded Image" class=" h-32 w-32 rounded-md"/>
                </div>
            }

            <div class="mt-8">
                <button class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" 
                        @onclick="HandleGenerateCredential" 
                       >
                    Generate Credential
                </button>
            </div>

            @if (!string.IsNullOrEmpty(_offerResult))
            {
                <div class="mt-8">
                    <h2 class="text-lg font-semibold mb-2">Credential (Base64):</h2>
                    <div class="bg-gray-100 p-4 rounded-md overflow-x-auto">
                        <pre class="text-xs">@_offerResult</pre>
                    </div>
                    <button class="mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" @onclick="CopyCredential">
                        Copy result
                    </button>
                </div>
            }
        </div>
    </div>

    <!-- Toast component -->
    @if (showToast)
    {
        <div class="fixed bottom-4 right-4 px-4 py-2 rounded-md shadow-lg transition-opacity duration-300 @(showToast ? "opacity-100" : "opacity-0") @(isError ? "bg-red-500" : "bg-green-500") text-white">
            @toastMessage
        </div>
    }
</div>

@code {
    private string _issuingDID;
    private string _connectionId = "Not connected";
    private string _subjectDID;
    private string _uploadedImageBase64 = "";
    private string _offerResult = "";
    private int _validityPeriod = 15;
    private bool showToast;
    private bool isError;
    private string toastMessage = string.Empty;
    private bool _isConnecting = false;

    protected override async Task OnInitializedAsync()
    {
        _issuingDID = AppSettings.Value.IssuingDID;
        _subjectDID = AppSettings.Value.SubjectDID;
        await InitializeAndAcceptConnection();
    }

    private async Task InitializeAndAcceptConnection()
    {
        if (_isConnecting)
        {
            await ShowToast("Connection is already in progress. Please wait.", true);
            return;
        }
        

        _isConnecting = true;
        _connectionId = "Connecting...";
        StateHasChanged();

        var initResult = await Mediator.Send(new InitializeConnectionRequest());
        if (initResult.IsSuccess)
        {
            _connectionId = initResult.Value.ConnectionId;
            await Task.Delay(20000); // Wait for 20 seconds

            var acceptResult = await Mediator.Send(new AcceptConnectionRequest
            {
                ApiKey = AppSettings.Value.UserApiKey,
                InvitationUrl = ExtractBase64FromInvitation(initResult.Value.InvitationUrl)
            });

            if (!acceptResult.IsSuccess)
            {
                _connectionId = "Error: Failed to accept connection";
                await ShowToast("Failed to establish connection. Please try again.", true);
            }
            else
            {
                await ShowToast("Connection established successfully!", false);
            }
        }
        else
        {
            _connectionId = "Error: Failed to initialize connection";
            await ShowToast("Failed to initialize connection. Please try again.", true);
        }

        _isConnecting = false;
        StateHasChanged();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.ContentType != "image/png" && file.ContentType != "image/jpeg" && file.ContentType != "image/gif")
            {
                await ShowToast("Invalid image format. Please upload a PNG, JPEG, or GIF image.", true);
                _uploadedImageBase64 = "";
                return;
            }

            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5 MB limit
                _uploadedImageBase64 = await ImageProcessingService.ProcessImageAsync(stream, file.ContentType, 100, 100);
                await ShowToast("Image uploaded successfully!", false);
            }
            catch (Exception ex)
            {
                await ShowToast($"Error uploading image: {ex.Message}", true);
                _uploadedImageBase64 = "";
            }
        }
    }

    private async Task HandleGenerateCredential()
    {
        if (_isConnecting)
        {
            await ShowToast("Connection is still in progress. Please wait for it to complete.", true);
            return;
        }

        if (!IsConnectionValid())
        {
            await ShowToast("Please establish a valid connection before generating a credential.", true);
            return;
        }

        _offerResult = "generating...";
        StateHasChanged();

        var generateCredentialRequest = new GenerateCredentialRequest
        {
            Claims = new
            {
                type = new List<string> { "AchievementSubject" },
                achievement = new
                {
                    id = "urn:uuid:bd6d9316-f7ae-4073-a1e5-2f7f5bd22922",
                    type = new List<string> { "Achievement" },
                    achievementType = "Diploma",
                    name = "Diploma in Decentralized Identity Solutions",
                    description = "This credential is issued by Blocktrust University to recognize the completion of a specialized course in developing decentralized identity solutions.",
                    criteria = new
                    {
                        type = "Criteria",
                        narrative = "This credential was issued to a student who demonstrated proficiency in developing decentralized identity solutions through activities performed in the course titled *Advanced Decentralized Identity Solutions* offered by Blocktrust University from **January 15, 2024** to **May 30, 2024**. The criteria for earning this credential include:\n1. Completion of all course modules\n2. Successful participation in hands-on labs\n3. Passing all quizzes and final exams\n4. Development of a capstone project showcasing decentralized identity solutions."
                    },
                    image = new
                    {
                        id = "data:image/png;base64,"+_uploadedImageBase64,
                        type = "Image"
                    }
                }
            },
            CredentialFormat = "JWT",
            IssuingDID = _issuingDID,
            ConnectionId = Guid.Parse(_connectionId),
            SubjectId = _subjectDID,
            AutomaticIssuance = true,
            ValidityPeriod = _validityPeriod
        };

        var result = await Mediator.Send(generateCredentialRequest);

        if (result.IsSuccess)
        {
            _offerResult = result.Value;
            await ShowToast("Credential generated successfully!", false);
        }
        else
        {
            _offerResult = "";
            await ShowToast($"Error creating offer: {result.Errors.FirstOrDefault()?.Message}", true);
        }
        StateHasChanged();
    }
    
    private string ExtractBase64FromInvitation(string invitationUrl)
    {
        const string marker = "_oob=";
        int startIndex = invitationUrl.IndexOf(marker);

        if (startIndex == -1)
        {
            throw new ArgumentException("Invalid invitation URL format: '_oob=' marker not found.");
        }

        startIndex += marker.Length;

        string base64String = invitationUrl.Substring(startIndex);

        return base64String;
    }

    private bool IsConnectionValid()
    {
        return Guid.TryParse(_connectionId, out _);
    }



    private async Task CopyCredential()
    {
        await ClipboardService.CopyTextToClipboard(_offerResult);
        await ShowToast("Credential copied to clipboard!", false);
    }

    private async Task ShowToast(string message, bool error)
    {
        toastMessage = message;
        isError = error;
        showToast = true;
        StateHasChanged();

        await Task.Delay(3000); // Show toast for 3 seconds

        showToast = false;
        StateHasChanged();
    }
}