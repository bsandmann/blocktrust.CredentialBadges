@page "/connections"
@using Blocktrust.CredentialBadges.Builder.Commands.Connections
@using MediatR
@inject IMediator Mediator
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

        <div>
            <label class="block text-slate-700 mb-1">Invitation URL</label>
            <p class="text-slate-500 mb-4">This URL can be used to invite others to connect.</p>
            <div class="relative border border-gray-300 rounded p-2 mb-4">
                @if (isLoading)
                {
                    <p class="text-gray-500">Loading...</p>
                }
                else
                {
                    <textarea class="w-full bg-transparent outline-none resize-none" rows="4" readonly>@invitationUrl</textarea>
                    <button class="absolute top-2 right-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(invitationUrl)">
                        <span class="material-icons-outlined">content_copy</span>
                    </button>
                }
            </div>
            <div class="text-right">
                <button class="text-slate-500 hover:text-slate-700 flex items-center" @onclick="GenerateNewInvitationUrl">
                    <span class="material-icons-outlined mr-1">refresh</span> Generate New
                </button>
            </div>
        </div>


        <div>
            <label class="block text-slate-700 mb-1">Make a Connection</label>
            <p class="text-slate-500 mb-4">Enter your DID and API Key to connect using the invitation URL.</p>
            
            <div class="mb-4">
                <label class="block text-slate-700 mb-1">DID</label>
                <input type="text" class="w-full border border-gray-300 rounded p-2" @bind="did" />
            </div>

            <div class="mb-4">
                <label class="block text-slate-700 mb-1">API Key</label>
                <input type="text" class="w-full border border-gray-300 rounded p-2" @bind="apiKey" />
            </div>

            <button class="bg-slate-700 text-white p-2 rounded" @onclick="AcceptConnection">Connect</button>
        </div>
    </div>
</div>

@code {
    private string did;
    private string apiKey;
    private string invitationUrl;
    private bool isLoading = true;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized)
        {
            // Load DID and API Key from local storage
            did = await JS.InvokeAsync<string>("localStorage.getItem", "did");
            apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");
            isInitialized = true;
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateNewInvitationUrl()
    {
        isLoading = true;
        StateHasChanged();

        var result = await Mediator.Send(new InitializeConnectionRequest());

        if (result.IsSuccess)
        {
            invitationUrl = result.Value.InvitationUrl;

            // Store initializeConnectionId in local storage
            await JS.InvokeVoidAsync("localStorage.setItem", "initializeConnectionId", result.Value.ConnectionId);
        }
        else
        {
            Console.WriteLine("Error generating invitation URL.");
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task AcceptConnection()
    {
        var request = new AcceptConnectionRequest
        {
            Did = did,
            ApiKey = apiKey,
            InvitationUrl = invitationUrl
        };

        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            // Store acceptConnectionId in local storage
            await JS.InvokeVoidAsync("localStorage.setItem", "acceptConnectionId", result.Value.ConnectionId);

            Console.WriteLine("Connection accepted successfully.");
        }
        else
        {
            Console.WriteLine("Error accepting connection.");
        }
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Console.WriteLine($"Copied {text} to clipboard.");
    }
}
