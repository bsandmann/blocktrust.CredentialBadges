@page "/connections"
@using Blocktrust.CredentialBadges.Builder.Commands.Connections
@using Blocktrust.CredentialBadges.Builder.Commands.Connections.AcceptConnection
@using Blocktrust.CredentialBadges.Builder.Commands.Connections.InitializeConnection
@using MediatR
@using Microsoft.AspNetCore.Authorization
@inject IMediator Mediator
@inject IJSRuntime JS
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]


<div class="max-w-4xl mx-auto px-4 py-8 min-h-screen">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-16">

        <!-- Invitation URL Section -->
        <div class="mt-10">
            <label class="block text-slate-700 mb-1">Invitation URL</label>
            <p class="text-slate-500 mb-4">This URL can be used to invite others to connect.</p>
            <div class="relative border border-gray-300 rounded p-2 mb-4">
                <textarea class="w-full bg-transparent outline-none resize-none" rows="4" readonly>@invitationUrl</textarea>
                <button class="absolute top-2 right-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(invitationUrl)">
                    <span class="material-symbols-outlined">content_copy</span>
                </button>
            </div>
            <div class="text-right">
                <button class="text-slate-500 hover:text-slate-700 flex items-center" @onclick="GenerateNewInvitationUrl">
                    <span class="material-symbols-outlined mr-1">refresh</span> Generate New
                </button>
            </div>
        </div>

        <!-- Make a Connection Section -->
        <div class="mt-10"> 
            <label class="block text-slate-700 mb-1">Make a Connection</label>
            <p class="text-slate-500 mb-4">Enter your DID and API Key to connect using the invitation URL.</p>

            <div class="mb-4">
                <label class="block text-slate-700 mb-1">DID</label>
                <input type="text" class="w-full border border-gray-300 rounded p-2" @bind="did"/>
            </div>

            <div class="mb-4">
                <label class="block text-slate-700 mb-1">API Key</label>
                <input type="text" class="w-full border border-gray-300 rounded p-2" @bind="apiKey"/>
            </div>

            <div class="flex items-center mb-4">
                <button class="text-slate-500 hover:text-slate-700 flex items-center" @onclick="SaveToLocalStorage">
                    <span class="material-symbols-outlined mr-1">save</span> Save
                </button>
            </div>

            <button class="bg-slate-700 min-w-36 h-12 text-white p-2 rounded" @onclick="Connect" disabled="@isConnecting">
                @if (isConnecting)
                {
                    <span class="material-symbols-outlined animate-spin mr-2 text-sm">autorenew</span>
                }
                else
                {
                    <span>Connect</span>
                }
            </button>

            <p class="text-red-500 mt-2" style="display: @errorMessageDisplay">@errorMessage</p>
            <p class="text-green-500 mt-2" style="display: @successMessageDisplay">@successMessage</p>
        </div>
    </div>
</div>

@code {
    private string did;
    private string apiKey;
    private string invitationUrl = "Loading...";
    private bool isInitialized;
    private bool isConnecting;
    private string errorMessage = "";
    private string successMessage = "";
    private string errorMessageDisplay => string.IsNullOrEmpty(errorMessage) ? "none" : "block";
    private string successMessageDisplay => string.IsNullOrEmpty(successMessage) ? "none" : "block";

    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            did = await JS.InvokeAsync<string>("localStorage.getItem", "did");
            apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");
            isInitialized = true;
            StateHasChanged();
            await GenerateNewInvitationUrl();
        }
    }

    private async Task GenerateNewInvitationUrl()
    {
        invitationUrl = "Loading...";
        StateHasChanged();

        var result = await Mediator.Send(new InitializeConnectionRequest());

        if (result.IsSuccess)
        {
            invitationUrl = result.Value.InvitationUrl;
            await JS.InvokeVoidAsync("localStorage.setItem", "initializeConnectionId", result.Value.ConnectionId);
            successMessage = "";
            errorMessage = "";
        }
        else
        {
            errorMessage = "Error generating invitation URL.";
            successMessage = "";
        }

        isConnecting = false;
        StateHasChanged();
    }

    private async Task Connect()
    {
        isConnecting = true;
        StateHasChanged();

        string base64String = ExtractBase64FromInvitation(invitationUrl);

        var acceptConnectionRequest = new AcceptConnectionRequest
        {
            ApiKey = apiKey,
            InvitationUrl = base64String
        };

        var result = await Mediator.Send(acceptConnectionRequest);

        if (result.IsSuccess)
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "acceptConnectionId", result.Value.ConnectionId);
            successMessage = "Connection saved";
            errorMessage = "";
        }
        else
        {
            errorMessage = "Error accepting connection.";
            successMessage = "";
        }

        isConnecting = false;
        StateHasChanged();
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Console.WriteLine($"Copied {text} to clipboard.");
    }

    private async Task SaveToLocalStorage()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "did", did);
        await JS.InvokeVoidAsync("localStorage.setItem", "apiKey", apiKey);
        successMessage = "DID and API Key saved to local storage";
        StateHasChanged();
    }

    public string ExtractBase64FromInvitation(string invitationUrl)
    {
        const string marker = "_oob=";
        int startIndex = invitationUrl.IndexOf(marker);

        if (startIndex == -1)
        {
            throw new ArgumentException("Invalid invitation URL format: '_oob=' marker not found.");
        }

        startIndex += marker.Length;

        string base64String = invitationUrl.Substring(startIndex);

        return base64String;
    }
}
