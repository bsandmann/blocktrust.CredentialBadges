@page "/connections"
@using Blocktrust.CredentialBadges.Builder.Commands.Connections.AcceptConnection
@using Blocktrust.CredentialBadges.Builder.Commands.Connections.InitializeConnection
@using MediatR
@using Microsoft.AspNetCore.Authorization
@inject IMediator Mediator
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]
@implements IDisposable

<PageTitle>@GetBrowserPageTitle()</PageTitle>

<div class="max-w-4xl mx-auto px-4 py-8 min-h-screen">
    <!-- Status Indicator -->
    <div class="flex items-center justify-end mb-4">
        <div class="flex items-center @(isConnected ? "text-green-500" : "text-gray-400")">
            <span class="material-symbols-outlined mr-2">@(isConnected ? "radio_button_checked" : "radio_button_unchecked")</span>
            <span class="text-sm font-medium">@(isConnected ? "Connected" : "Not Connected")</span>
        </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-8">
        <!-- Invitation URL Section -->
        <div class="mt-10">
            <h2 class="block text-slate-700 mb-1">Invitation URL</h2>
            <h3 class="text-slate-500 mb-4">This URL can be used to invite others to connect.</h3>
            <div class="relative border border-gray-300 rounded p-2 mb-4">
                <textarea class="w-full bg-transparent outline-none resize-none" rows="4" readonly>@invitationUrl</textarea>
                <button class="absolute top-2 right-2 text-slate-500 hover:text-slate-700" @onclick="() => CopyToClipboard(invitationUrl)">
                    <span class="material-symbols-outlined">content_copy</span>
                </button>
            </div>
            <div class="text-right">
                <button class="text-slate-500 hover:text-slate-700 flex items-center" @onclick="GenerateNewInvitationUrl">
                    <span class="material-symbols-outlined mr-1">refresh</span> Generate New
                </button>
            </div>
        </div>

        <!-- Make a Connection Section -->
        <div class="mt-10"> 
            <h2 class="block text-slate-700 mb-1">Make a Connection</h2>
            <h3 class="text-slate-500 mb-4">Enter your DID and API Key to connect using the invitation URL.</h3>

            <div class="mb-4">
                <label class="block text-slate-700 mb-1">DID</label>
                <input type="text" class="w-full border border-gray-300 rounded p-2" @bind="did"/>
            </div>

            <div class="mb-4">
                <label class="block text-slate-700 mb-1">API Key</label>
                <input type="text" class="w-full border border-gray-300 rounded p-2" @bind="apiKey"/>
            </div>

            <div class="flex items-center mb-4">
                <button class="text-slate-500 hover:text-slate-700 flex items-center" @onclick="SaveToLocalStorage">
                    <span class="material-symbols-outlined mr-1">save</span> Save
                </button>
            </div>

            <button class="bg-slate-700 min-w-36 h-12 text-white p-2 rounded hover:bg-slate-600" @onclick="Connect" disabled="@isConnecting">
                @if (isConnecting)
                {
                    <span class="material-symbols-outlined animate-spin mr-2 text-sm">autorenew</span>
                }
                else
                {
                    <span>Connect</span>
                }
            </button>
        </div>
    </div>

    <!-- Info Section -->
    <div class="mt-12 bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded mt-4">
        <h3 class="font-semibold mb-2 flex items-center">
            <span class="material-symbols-outlined mr-2">lightbulb</span>
            About Connections
        </h3>
        <p class="mb-2">Connections enable secure exchange of verifiable credentials.</p>
        <p>Clicking 'Connect' links you to the issuer admin agent instance.</p>
    </div>
</div>

<div class="fixed bottom-4 right-4 px-4 py-2 rounded-md shadow-lg transition-opacity duration-300 @(showToast ? "opacity-100" : "opacity-0") @(isToastError ? "bg-red-500" : "bg-green-500") text-white">
    @toastMessage
</div>

@code {
    private string did;
    private string apiKey;
    private string invitationUrl = "Loading...";
    private bool isInitialized;
    private bool isConnecting;
    private bool showToast;
    private bool isToastError;
    private string toastMessage = "";
    private bool isConnected = false;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        if (!isInitialized)
        {
            did = await JS.InvokeAsync<string>("localStorage.getItem", "did");
            apiKey = await JS.InvokeAsync<string>("localStorage.getItem", "apiKey");
            isInitialized = true;
            StateHasChanged();
            await GenerateNewInvitationUrl();
        }
        await UpdatePageTitle();
        await CheckConnectionStatus();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdatePageTitle();
        }
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await UpdatePageTitle();
            await CheckConnectionStatus();
            StateHasChanged();
        });
    }

    private async Task UpdatePageTitle()
    {
        var title = GetBrowserPageTitle();
        if (!string.IsNullOrWhiteSpace(title))
        {
            await JS.InvokeVoidAsync("updatePageTitle", title);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private string GetBrowserPageTitle()
    {
        return "Blocktrust Credentials - Generate Connections";
    }

    private async Task CheckConnectionStatus()
    {
        var initializeConnectionId = await JS.InvokeAsync<string>("localStorage.getItem", "initializeConnectionId");
        var acceptConnectionId = await JS.InvokeAsync<string>("localStorage.getItem", "acceptConnectionId");
        isConnected = !string.IsNullOrEmpty(initializeConnectionId) && !string.IsNullOrEmpty(acceptConnectionId);
    }

    private async Task GenerateNewInvitationUrl()
    {
        invitationUrl = "Loading...";
        StateHasChanged();

        var result = await Mediator.Send(new InitializeConnectionRequest());

        if (result.IsSuccess)
        {
            invitationUrl = result.Value.InvitationUrl;
            await JS.InvokeVoidAsync("localStorage.setItem", "initializeConnectionId", result.Value.ConnectionId);
            ShowToast("New invitation URL generated", false);
        }
        else
        {
            ShowToast("Error generating invitation URL", true);
        }

        isConnecting = false;
        await CheckConnectionStatus();
        StateHasChanged();
    }

    private async Task Connect()
    {
        isConnecting = true;
        StateHasChanged();

        string base64String = ExtractBase64FromInvitation(invitationUrl);

        var acceptConnectionRequest = new AcceptConnectionRequest
        {
            ApiKey = apiKey,
            InvitationUrl = base64String
        };

        var result = await Mediator.Send(acceptConnectionRequest);

        if (result.IsSuccess)
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "acceptConnectionId", result.Value.ConnectionId);
            ShowToast("Connection saved", false);
        }
        else
        {
            ShowToast("Error accepting connection", true);
        }

        isConnecting = false;
        await CheckConnectionStatus();
        StateHasChanged();
    }

    private void CopyToClipboard(string text)
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        ShowToast("Copied to clipboard", false);
    }

    private async Task SaveToLocalStorage()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "did", did);
        await JS.InvokeVoidAsync("localStorage.setItem", "apiKey", apiKey);
        ShowToast("DID and API Key saved to local storage", false);
    }

    public string ExtractBase64FromInvitation(string invitationUrl)
    {
        const string marker = "_oob=";
        int startIndex = invitationUrl.IndexOf(marker);

        if (startIndex == -1)
        {
            throw new ArgumentException("Invalid invitation URL format: '_oob=' marker not found.");
        }

        startIndex += marker.Length;

        string base64String = invitationUrl.Substring(startIndex);

        return base64String;
    }

    private void ShowToast(string message, bool isError)
    {
        toastMessage = message;
        isToastError = isError;
        showToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false;
            StateHasChanged();
        });
    }
}