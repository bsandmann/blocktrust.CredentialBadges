@page "/testspage"
@using MediatR
@using Blocktrust.CredentialBadges.Builder.Commands.NewDid
@inject IMediator Mediator
@rendermode InteractiveServer

<PageTitle>Tests Page</PageTitle>

<h1>
    This page contains code to try out different commands
</h1>

<button @onclick="RegisterDidAndApiKey">Register DID and API Key</button>

<p>@resultMessage</p>

@code {
    private string resultMessage;

    private async Task RegisterDidAndApiKey()
    {
        var request = new NewDidAndApiKeyRequest
        {
            Seed = GenerateRandomHexString(128), // Generate a 128-character hex string
            WalletName = GenerateRandomName(8) // Generate a random name with a length of 8
        };

        var result = await Mediator.Send(request);

        if (result.IsSuccess)
        {
            resultMessage = $" Registered DID: {result.Value.Did}, API Key, {result.Value.ApiKey}";
        }
        else
        {
            resultMessage = $"Failed to register DID and API Key: {result.Errors[0].Message}";
        }
    }

    private string GenerateRandomHexString(int length)
    {
        var random = new Random();
        var buffer = new byte[length / 2];
        random.NextBytes(buffer);
        return BitConverter.ToString(buffer).Replace("-", "").ToLower();
    }

    private string GenerateRandomName(int length)
    {
        var random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }
}