@page "/profile"
@using Microsoft.AspNetCore.Authorization
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>@GetBrowserPageTitle()</PageTitle>

<div class="container mx-auto p-6 max-w-xl bg-white rounded-lg shadow-md mt-16">
    <div class="text-center mt-16">
        <h1 class="text-3xl font-bold mb-4">User Profile</h1>
        <p class="text-xl mb-8">Welcome, @username!</p>
    </div>

    <form action="Account/Logout" method="post" class="text-center">
        <AntiforgeryToken />
        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
        <button type="submit" class="bg-red-500 text-white font-bold py-2 px-4 rounded hover:bg-red-700">
            <span class="bi bi-box-arrow-right mr-2" aria-hidden="true"></span> Logout
        </button>
    </form>
</div>

@code {
    private string? currentUrl;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            username = user.Identity.Name;
        }

        await UpdatePageTitle();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdatePageTitle();
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        await InvokeAsync(async () =>
        {
            await UpdatePageTitle();
            StateHasChanged();
        });
    }

    private async Task UpdatePageTitle()
    {
        var title = GetBrowserPageTitle();
        if (!string.IsNullOrWhiteSpace(title))
        {
            await JS.InvokeVoidAsync("updatePageTitle", title);
        }
    }

    private string GetBrowserPageTitle()
    {
        return "Blocktrust Credentials - User Profile";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}