@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Blocktrust.CredentialBadges.Builder.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<div class="max-w-md mx-auto px-4 py-8">
    <h1 class="text-2xl font-semibold text-gray-800 mb-2">Forgot your password?</h1>
    <h2 class="text-lg text-gray-600 mb-6">Enter your email to reset your password.</h2>
    
    <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
                    <p>@ErrorMessage</p>
                </div>
            }

            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <InputText @bind-Value="Input.Email" id="email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-0" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <ValidationMessage For="() => Input.Email" class="text-red-600 text-sm mt-1"/>
            </div>
            
            <button type="submit" class="w-full bg-slate-700 text-white px-4 py-2 rounded hover:bg-slate-600 transition duration-200">
                Reset Password
            </button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    private string? ErrorMessage { get; set; }

    private async Task OnValidSubmitAsync()
    {
        ErrorMessage = null;
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            ErrorMessage = "If the email address exists in our system, a password reset link will be sent.";
            return;
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }
}