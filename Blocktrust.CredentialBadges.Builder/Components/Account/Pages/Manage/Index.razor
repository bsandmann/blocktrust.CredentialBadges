@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Blocktrust.CredentialBadges.Builder.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<div class="max-w-md mx-auto px-4 py-8">
    <h1 class="text-2xl font-semibold text-gray-800 mb-6">Profile</h1>

    <StatusMessage/>

    <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <div class="space-y-4">
                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                    <input type="text" value="@username" id="username" class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100" placeholder="Your username" disabled/>
                </div>
                <div>
                    <label for="phone-number" class="block text-sm font-medium text-gray-700 mb-1">Phone number</label>
                    <InputText @bind-Value="Input.PhoneNumber" id="phone-number" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-0 focus:border-slate-500" placeholder="Enter your phone number"/>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-red-600 text-sm mt-1"/>
                </div>
                <button type="submit" class="w-full bg-slate-700 text-white px-4 py-2 rounded hover:bg-slate-600 transition duration-200">
                    Save Changes
                </button>
            </div>
        </EditForm>
    </div>

    <div class="mt-6 text-center">
        <a href="/Account/Manage/ChangePassword" class="text-slate-600 hover:text-slate-800 underline">Change Password</a>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}