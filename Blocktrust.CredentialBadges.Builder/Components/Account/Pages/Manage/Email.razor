@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Blocktrust.CredentialBadges.Builder.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage Email</PageTitle>

<div class="max-w-md mx-auto px-4 py-8">
    <h1 class="text-2xl font-semibold text-gray-800 mb-6">Manage Email</h1>
    
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-4" role="alert">
            <p>@message</p>
        </div>
    }
    
    <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post" class="mb-4">
            <AntiforgeryToken/>
        </form>
        
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            
            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Current Email</label>
                <div class="flex items-center">
                    <input type="text" value="@email" class="flex-grow px-3 py-2 border border-gray-300 rounded-md bg-gray-100" placeholder="Your current email" disabled />
                    @if (isEmailConfirmed)
                    {
                        <span class="ml-2 text-green-600">✓</span>
                    }
                    else
                    {
                        <button type="submit" class="ml-2 text-blue-600 hover:text-blue-800 underline" form="send-verification-form">Verify</button>
                    }
                </div>
            </div>
            
            <div class="mb-4">
                <label for="new-email" class="block text-sm font-medium text-gray-700 mb-1">New Email</label>
                <InputText @bind-Value="Input.NewEmail" id="new-email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-0 focus:border-slate-500" autocomplete="email" aria-required="true" placeholder="Enter new email" />
                <ValidationMessage For="() => Input.NewEmail" class="text-red-600 text-sm mt-1" />
            </div>
            
            <button type="submit" class="w-full bg-slate-700 text-white px-4 py-2 rounded hover:bg-slate-600 transition duration-200">
                Change Email
            </button>
        </EditForm>
    </div>
    
    <div class="mt-6 text-center">
        <a href="/Account/Manage" class="text-slate-600 hover:text-slate-800 underline">Back to Manage Account</a>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}