@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using Blocktrust.CredentialBadges.Builder.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Reset Authenticator Key</PageTitle>

<div class="max-w-2xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-semibold text-gray-800 mb-6">Reset Authenticator Key</h1>

    <StatusMessage/>

    <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm mb-6">
        <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6" role="alert">
            <p class="font-bold mb-2">
                <span class="mr-2">⚠️</span>
                Warning
            </p>
            <p class="mb-2">
                <strong>If you reset your authenticator key, your authenticator app will not work until you reconfigure it.</strong>
            </p>
            <p>
                This process disables 2FA until you verify your authenticator app.
                If you do not complete your authenticator app configuration, you may lose access to your account.
            </p>
        </div>

        <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken/>
            <button type="submit" class="w-full bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition duration-200">
                Reset Authenticator Key
            </button>
        </form>
    </div>

    <div class="mt-6 text-center">
        <a href="/Account/Manage/TwoFactorAuthentication" class="text-slate-600 hover:text-slate-800 underline">Back to Two-Factor Authentication</a>
    </div>
</div>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.",
            HttpContext);
    }
}