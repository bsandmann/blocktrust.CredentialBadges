@page "/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Blocktrust.CredentialBadges.Builder.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage Your External Logins</PageTitle>

<div class="max-w-3xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-semibold text-gray-800 mb-6">Manage Your External Logins</h1>
    
    <StatusMessage/>
    
    @if (currentLogins?.Count > 0)
    {
        <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm mb-8">
            <h2 class="text-xl font-semibold text-gray-700 mb-4">Registered Logins</h2>
            <table class="w-full">
                <tbody>
                @foreach (var login in currentLogins)
                {
                    <tr class="border-b border-gray-200 last:border-b-0">
                        <td class="py-3">@login.ProviderDisplayName</td>
                        <td class="py-3 text-right">
                            @if (showRemoveButton)
                            {
                                <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post" class="inline-block">
                                    <AntiforgeryToken/>
                                    <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider"/>
                                    <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey"/>
                                    <button type="submit" class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 transition duration-200" title="Remove this @login.ProviderDisplayName login from your account">
                                        Remove
                                    </button>
                                </form>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    
    @if (otherLogins?.Count > 0)
    {
        <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm">
            <h2 class="text-xl font-semibold text-gray-700 mb-4">Add Another Service to Log In</h2>
            <form class="space-y-4" action="Account/Manage/LinkExternalLogin" method="post">
                <AntiforgeryToken/>
                <div class="flex flex-wrap gap-2">
                    @foreach (var provider in otherLogins)
                    {
                        <button type="submit" class="bg-slate-700 text-white px-4 py-2 rounded hover:bg-slate-600 transition duration-200" name="Provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                            @provider.DisplayName
                        </button>
                    }
                </div>
            </form>
        </div>
    }
    
    <div class="mt-6 text-center">
        <a href="/Account/Manage" class="text-slate-600 hover:text-slate-800 underline">Back to Manage Account</a>
    </div>
</div>

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private ApplicationUser user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private string? LoginProvider { get; set; }

    [SupplyParameterFromForm] private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }
}