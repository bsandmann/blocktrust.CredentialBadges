@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Blocktrust.CredentialBadges.Builder.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="flex items-center justify-center min-h-screen bg-gray-50">
    <div class="container mx-auto px-4">
        <div class="bg-white shadow-lg rounded-lg max-w-md w-full p-8 mx-auto">
            <h1 class="text-3xl font-bold text-center text-gray-700 mb-6">Log in</h1>
            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2 class="text-lg font-semibold mb-4">Use email and password to log in.</h2>
                <hr class="mb-4" />
                <ValidationSummary class="text-red-500 mb-4" role="alert" />

                <div class="mb-5">
                    <InputText @bind-Value="Input.Email" class="block w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-slate-400 transition duration-200" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label class="text-gray-600 mt-1">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-red-500" />
                </div>

                <div class="mb-5">
                    <InputText type="password" @bind-Value="Input.Password" class="block w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring focus:ring-slate-400 transition duration-200" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label class="text-gray-600 mt-1">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-red-500" />
                </div>

                <div class="flex items-center mb-5">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="mr-2" />
                    <label class="text-gray-600">Remember me</label>
                </div>

                <button type="submit" class="w-full bg-slate-600 text-white py-2 rounded hover:bg-slate-700 transition duration-200">Log in</button>

                <div class="mt-4 text-center text-gray-600">
                    <p class="mb-2">
                        <a href="Account/ForgotPassword" class="hover:text-slate-800">Forgot your password?</a>
                    </p>
                    <p class="mb-2">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="hover:text-slate-800">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation" class="hover:text-slate-800">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </div>

      
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }
}
