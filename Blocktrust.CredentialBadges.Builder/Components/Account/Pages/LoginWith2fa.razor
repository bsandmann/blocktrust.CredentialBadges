@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Blocktrust.CredentialBadges.Builder.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-Factor Authentication</PageTitle>

<div class="max-w-md mx-auto px-4 py-8">
    <h1 class="text-2xl font-semibold text-gray-800 mb-6">Two-Factor Authentication</h1>
    
    <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm">
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4" role="alert">
                <p>@message</p>
            </div>
        }

        <p class="text-gray-600 mb-4">Your login is protected with an authenticator app. Enter your authenticator code below.</p>
        
        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
            <input type="hidden" name="RememberMe" value="@RememberMe"/>
            <DataAnnotationsValidator/>
            
            <div class="mb-4">
                <label for="two-factor-code" class="block text-sm font-medium text-gray-700 mb-1">Authenticator code</label>
                <InputText @bind-Value="Input.TwoFactorCode" id="two-factor-code" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-0" autocomplete="off" placeholder="Enter your code"/>
                <ValidationMessage For="() => Input.TwoFactorCode" class="text-red-600 text-sm mt-1"/>
            </div>
            
            <div class="flex items-center mb-4">
                <InputCheckbox @bind-Value="Input.RememberMachine" id="remember-machine" class="h-4 w-4 text-slate-600 focus:ring-slate-500 border-gray-300 rounded"/>
                <label for="remember-machine" class="ml-2 block text-sm text-gray-700">Remember this machine</label>
            </div>
            
            <button type="submit" class="w-full bg-slate-700 text-white px-4 py-2 rounded hover:bg-slate-600 transition duration-200">
                Log in
            </button>
        </EditForm>
    </div>
    
    <div class="mt-6 text-center">
        <p class="text-gray-600">
            Don't have access to your authenticator device? You can
            <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl" class="text-slate-600 hover:text-slate-800 underline">log in with a recovery code</a>.
        </p>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}