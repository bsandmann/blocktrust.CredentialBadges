@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Blocktrust.CredentialBadges.Builder.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm Email</PageTitle>

<div class="max-w-md mx-auto px-4 py-8">
    <h1 class="text-2xl font-semibold text-gray-800 mb-6">Confirm Email</h1>
    
    <div class="bg-white border border-gray-300 rounded-lg p-6 shadow-sm">
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="@(statusMessage.StartsWith("Error") ? "bg-red-100 border-l-4 border-red-500 text-red-700" : "bg-green-100 border-l-4 border-green-500 text-green-700") p-4 mb-4" role="alert">
                <p>@statusMessage</p>
            </div>
        }
        
        <p class="text-gray-600">
            @if (statusMessage?.StartsWith("Thank you") == true)
            {
                <span>Your email has been successfully confirmed. You can now use all features of your account.</span>
            }
            else
            {
                <span>We're processing your email confirmation. If you continue to see this message, please contact support.</span>
            }
        </p>
    </div>
    
    <div class="mt-6 text-center">
        <a href="/" class="text-slate-600 hover:text-slate-800 underline">Return to Home</a>
    </div>
</div>

@code {
    private string? statusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? UserId { get; set; }

    [SupplyParameterFromQuery] private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
        }
    }
}